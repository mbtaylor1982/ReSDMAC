// flash_interface_10M16SCU169C8G.v

// Generated using ACDS version 22.1 922

`timescale 1 ps / 1 ps
module flash_interface_10M16SCU169C8G (
		input  wire        clk_clk,                        //                clk.clk
		input  wire [23:0] external_interface_address,     // external_interface.address
		input  wire [3:0]  external_interface_byte_enable, //                   .byte_enable
		input  wire        external_interface_read,        //                   .read
		input  wire        external_interface_write,       //                   .write
		input  wire [31:0] external_interface_write_data,  //                   .write_data
		output wire        external_interface_acknowledge, //                   .acknowledge
		output wire [31:0] external_interface_read_data,   //                   .read_data
		input  wire        reset_reset_n                   //              reset.reset_n
	);

	wire  [31:0] avalon_bridge_avalon_master_readdata;              // mm_interconnect_0:avalon_bridge_avalon_master_readdata -> avalon_bridge:avalon_readdata
	wire         avalon_bridge_avalon_master_waitrequest;           // mm_interconnect_0:avalon_bridge_avalon_master_waitrequest -> avalon_bridge:avalon_waitrequest
	wire   [3:0] avalon_bridge_avalon_master_byteenable;            // avalon_bridge:avalon_byteenable -> mm_interconnect_0:avalon_bridge_avalon_master_byteenable
	wire         avalon_bridge_avalon_master_read;                  // avalon_bridge:avalon_read -> mm_interconnect_0:avalon_bridge_avalon_master_read
	wire  [23:0] avalon_bridge_avalon_master_address;               // avalon_bridge:avalon_address -> mm_interconnect_0:avalon_bridge_avalon_master_address
	wire         avalon_bridge_avalon_master_write;                 // avalon_bridge:avalon_write -> mm_interconnect_0:avalon_bridge_avalon_master_write
	wire  [31:0] avalon_bridge_avalon_master_writedata;             // avalon_bridge:avalon_writedata -> mm_interconnect_0:avalon_bridge_avalon_master_writedata
	wire  [31:0] mm_interconnect_0_onchip_flash_csr_readdata;       // onchip_flash:avmm_csr_readdata -> mm_interconnect_0:onchip_flash_csr_readdata
	wire   [0:0] mm_interconnect_0_onchip_flash_csr_address;        // mm_interconnect_0:onchip_flash_csr_address -> onchip_flash:avmm_csr_addr
	wire         mm_interconnect_0_onchip_flash_csr_read;           // mm_interconnect_0:onchip_flash_csr_read -> onchip_flash:avmm_csr_read
	wire         mm_interconnect_0_onchip_flash_csr_write;          // mm_interconnect_0:onchip_flash_csr_write -> onchip_flash:avmm_csr_write
	wire  [31:0] mm_interconnect_0_onchip_flash_csr_writedata;      // mm_interconnect_0:onchip_flash_csr_writedata -> onchip_flash:avmm_csr_writedata
	wire  [31:0] mm_interconnect_0_onchip_flash_data_readdata;      // onchip_flash:avmm_data_readdata -> mm_interconnect_0:onchip_flash_data_readdata
	wire         mm_interconnect_0_onchip_flash_data_waitrequest;   // onchip_flash:avmm_data_waitrequest -> mm_interconnect_0:onchip_flash_data_waitrequest
	wire  [16:0] mm_interconnect_0_onchip_flash_data_address;       // mm_interconnect_0:onchip_flash_data_address -> onchip_flash:avmm_data_addr
	wire         mm_interconnect_0_onchip_flash_data_read;          // mm_interconnect_0:onchip_flash_data_read -> onchip_flash:avmm_data_read
	wire         mm_interconnect_0_onchip_flash_data_readdatavalid; // onchip_flash:avmm_data_readdatavalid -> mm_interconnect_0:onchip_flash_data_readdatavalid
	wire         mm_interconnect_0_onchip_flash_data_write;         // mm_interconnect_0:onchip_flash_data_write -> onchip_flash:avmm_data_write
	wire  [31:0] mm_interconnect_0_onchip_flash_data_writedata;     // mm_interconnect_0:onchip_flash_data_writedata -> onchip_flash:avmm_data_writedata
	wire   [3:0] mm_interconnect_0_onchip_flash_data_burstcount;    // mm_interconnect_0:onchip_flash_data_burstcount -> onchip_flash:avmm_data_burstcount
	wire         rst_controller_reset_out_reset;                    // rst_controller:reset_out -> [avalon_bridge:reset, mm_interconnect_0:avalon_bridge_reset_reset_bridge_in_reset_reset, onchip_flash:reset_n]

	flash_interface_10M16SCU169C8G_avalon_bridge avalon_bridge (
		.clk                (clk_clk),                                 //                clk.clk
		.reset              (rst_controller_reset_out_reset),          //              reset.reset
		.avalon_readdata    (avalon_bridge_avalon_master_readdata),    //      avalon_master.readdata
		.avalon_waitrequest (avalon_bridge_avalon_master_waitrequest), //                   .waitrequest
		.avalon_byteenable  (avalon_bridge_avalon_master_byteenable),  //                   .byteenable
		.avalon_read        (avalon_bridge_avalon_master_read),        //                   .read
		.avalon_write       (avalon_bridge_avalon_master_write),       //                   .write
		.avalon_writedata   (avalon_bridge_avalon_master_writedata),   //                   .writedata
		.avalon_address     (avalon_bridge_avalon_master_address),     //                   .address
		.address            (external_interface_address),              // external_interface.export
		.byte_enable        (external_interface_byte_enable),          //                   .export
		.read               (external_interface_read),                 //                   .export
		.write              (external_interface_write),                //                   .export
		.write_data         (external_interface_write_data),           //                   .export
		.acknowledge        (external_interface_acknowledge),          //                   .export
		.read_data          (external_interface_read_data)             //                   .export
	);

	altera_onchip_flash #(
		.INIT_FILENAME                       (""),
		.INIT_FILENAME_SIM                   (""),
		.DEVICE_FAMILY                       ("MAX 10"),
		.PART_NAME                           ("10M16SCU169C8G"),
		.DEVICE_ID                           ("16"),
		.SECTOR1_START_ADDR                  (0),
		.SECTOR1_END_ADDR                    (4095),
		.SECTOR2_START_ADDR                  (4096),
		.SECTOR2_END_ADDR                    (8191),
		.SECTOR3_START_ADDR                  (8192),
		.SECTOR3_END_ADDR                    (36863),
		.SECTOR4_START_ADDR                  (36864),
		.SECTOR4_END_ADDR                    (104447),
		.SECTOR5_START_ADDR                  (0),
		.SECTOR5_END_ADDR                    (0),
		.MIN_VALID_ADDR                      (0),
		.MAX_VALID_ADDR                      (104447),
		.MIN_UFM_VALID_ADDR                  (0),
		.MAX_UFM_VALID_ADDR                  (36863),
		.SECTOR1_MAP                         (1),
		.SECTOR2_MAP                         (2),
		.SECTOR3_MAP                         (4),
		.SECTOR4_MAP                         (5),
		.SECTOR5_MAP                         (0),
		.ADDR_RANGE1_END_ADDR                (8191),
		.ADDR_RANGE2_END_ADDR                (104447),
		.ADDR_RANGE1_OFFSET                  (1024),
		.ADDR_RANGE2_OFFSET                  (39936),
		.ADDR_RANGE3_OFFSET                  (0),
		.AVMM_DATA_ADDR_WIDTH                (17),
		.AVMM_DATA_DATA_WIDTH                (32),
		.AVMM_DATA_BURSTCOUNT_WIDTH          (4),
		.SECTOR_READ_PROTECTION_MODE         (16),
		.FLASH_SEQ_READ_DATA_COUNT           (4),
		.FLASH_ADDR_ALIGNMENT_BITS           (2),
		.FLASH_READ_CYCLE_MAX_INDEX          (4),
		.FLASH_RESET_CYCLE_MAX_INDEX         (6),
		.FLASH_BUSY_TIMEOUT_CYCLE_MAX_INDEX  (30),
		.FLASH_ERASE_TIMEOUT_CYCLE_MAX_INDEX (8750000),
		.FLASH_WRITE_TIMEOUT_CYCLE_MAX_INDEX (7625),
		.PARALLEL_MODE                       (1),
		.READ_AND_WRITE_MODE                 (1),
		.WRAPPING_BURST_MODE                 (0),
		.IS_DUAL_BOOT                        ("False"),
		.IS_ERAM_SKIP                        ("True"),
		.IS_COMPRESSED_IMAGE                 ("True")
	) onchip_flash (
		.clock                   (clk_clk),                                           //    clk.clk
		.reset_n                 (~rst_controller_reset_out_reset),                   // nreset.reset_n
		.avmm_data_addr          (mm_interconnect_0_onchip_flash_data_address),       //   data.address
		.avmm_data_read          (mm_interconnect_0_onchip_flash_data_read),          //       .read
		.avmm_data_writedata     (mm_interconnect_0_onchip_flash_data_writedata),     //       .writedata
		.avmm_data_write         (mm_interconnect_0_onchip_flash_data_write),         //       .write
		.avmm_data_readdata      (mm_interconnect_0_onchip_flash_data_readdata),      //       .readdata
		.avmm_data_waitrequest   (mm_interconnect_0_onchip_flash_data_waitrequest),   //       .waitrequest
		.avmm_data_readdatavalid (mm_interconnect_0_onchip_flash_data_readdatavalid), //       .readdatavalid
		.avmm_data_burstcount    (mm_interconnect_0_onchip_flash_data_burstcount),    //       .burstcount
		.avmm_csr_addr           (mm_interconnect_0_onchip_flash_csr_address),        //    csr.address
		.avmm_csr_read           (mm_interconnect_0_onchip_flash_csr_read),           //       .read
		.avmm_csr_writedata      (mm_interconnect_0_onchip_flash_csr_writedata),      //       .writedata
		.avmm_csr_write          (mm_interconnect_0_onchip_flash_csr_write),          //       .write
		.avmm_csr_readdata       (mm_interconnect_0_onchip_flash_csr_readdata)        //       .readdata
	);

	flash_interface_10M16SCU169C8G_mm_interconnect_0 mm_interconnect_0 (
		.clk_source_clk_clk                              (clk_clk),                                           //                            clk_source_clk.clk
		.avalon_bridge_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                    // avalon_bridge_reset_reset_bridge_in_reset.reset
		.avalon_bridge_avalon_master_address             (avalon_bridge_avalon_master_address),               //               avalon_bridge_avalon_master.address
		.avalon_bridge_avalon_master_waitrequest         (avalon_bridge_avalon_master_waitrequest),           //                                          .waitrequest
		.avalon_bridge_avalon_master_byteenable          (avalon_bridge_avalon_master_byteenable),            //                                          .byteenable
		.avalon_bridge_avalon_master_read                (avalon_bridge_avalon_master_read),                  //                                          .read
		.avalon_bridge_avalon_master_readdata            (avalon_bridge_avalon_master_readdata),              //                                          .readdata
		.avalon_bridge_avalon_master_write               (avalon_bridge_avalon_master_write),                 //                                          .write
		.avalon_bridge_avalon_master_writedata           (avalon_bridge_avalon_master_writedata),             //                                          .writedata
		.onchip_flash_csr_address                        (mm_interconnect_0_onchip_flash_csr_address),        //                          onchip_flash_csr.address
		.onchip_flash_csr_write                          (mm_interconnect_0_onchip_flash_csr_write),          //                                          .write
		.onchip_flash_csr_read                           (mm_interconnect_0_onchip_flash_csr_read),           //                                          .read
		.onchip_flash_csr_readdata                       (mm_interconnect_0_onchip_flash_csr_readdata),       //                                          .readdata
		.onchip_flash_csr_writedata                      (mm_interconnect_0_onchip_flash_csr_writedata),      //                                          .writedata
		.onchip_flash_data_address                       (mm_interconnect_0_onchip_flash_data_address),       //                         onchip_flash_data.address
		.onchip_flash_data_write                         (mm_interconnect_0_onchip_flash_data_write),         //                                          .write
		.onchip_flash_data_read                          (mm_interconnect_0_onchip_flash_data_read),          //                                          .read
		.onchip_flash_data_readdata                      (mm_interconnect_0_onchip_flash_data_readdata),      //                                          .readdata
		.onchip_flash_data_writedata                     (mm_interconnect_0_onchip_flash_data_writedata),     //                                          .writedata
		.onchip_flash_data_burstcount                    (mm_interconnect_0_onchip_flash_data_burstcount),    //                                          .burstcount
		.onchip_flash_data_readdatavalid                 (mm_interconnect_0_onchip_flash_data_readdatavalid), //                                          .readdatavalid
		.onchip_flash_data_waitrequest                   (mm_interconnect_0_onchip_flash_data_waitrequest)    //                                          .waitrequest
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule

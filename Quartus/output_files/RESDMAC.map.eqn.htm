<html>
<head>
<TITLE>HTML file for equations </TITLE>
</head>
<body>
<p>
-- Copyright (C) 1991-2013 Altera Corporation<br>
-- Your use of Altera Corporation's design tools, logic functions <br>
-- and other software and tools, and its AMPP partner logic <br>
-- functions, and any output files from any of the foregoing <br>
-- (including device programming or simulation files), and any <br>
-- associated documentation or information are expressly subject <br>
-- to the terms and conditions of the Altera Program License <br>
-- Subscription Agreement, Altera MegaCore Function License <br>
-- Agreement, or other applicable license agreement, including, <br>
-- without limitation, that your use is for the sole purpose of <br>
-- programming logic devices manufactured by Altera and sold by <br>
-- Altera or its authorized distributors.  Please refer to the <br>
-- applicable agreement for further details.<br>
<P> --X1__locked is PLL:u_PLL|atpll:APLL_inst|altpll:altpll_component|_locked
<P><A NAME="X1__locked">X1__locked</A> = PLL.LOCKED(.ENA(), .CLKSWITCH(), .ARESET(!<A HREF="#_RST">_RST</A>), .PFDENA(), .INCLK(<A HREF="#SCLK">SCLK</A>), .INCLK());

<P> --X1__clk0 is PLL:u_PLL|atpll:APLL_inst|altpll:altpll_component|_clk0
<P><A NAME="X1__clk0">X1__clk0</A> = PLL.CLK0(.ENA(), .CLKSWITCH(), .ARESET(!<A HREF="#_RST">_RST</A>), .PFDENA(), .INCLK(<A HREF="#SCLK">SCLK</A>), .INCLK());

<P> --X1__clk1 is PLL:u_PLL|atpll:APLL_inst|altpll:altpll_component|_clk1
<P><A NAME="X1__clk1">X1__clk1</A> = PLL.CLK1(.ENA(), .CLKSWITCH(), .ARESET(!<A HREF="#_RST">_RST</A>), .PFDENA(), .INCLK(<A HREF="#SCLK">SCLK</A>), .INCLK());

<P> --X1__clk2 is PLL:u_PLL|atpll:APLL_inst|altpll:altpll_component|_clk2
<P><A NAME="X1__clk2">X1__clk2</A> = PLL.CLK2(.ENA(), .CLKSWITCH(), .ARESET(!<A HREF="#_RST">_RST</A>), .PFDENA(), .INCLK(<A HREF="#SCLK">SCLK</A>), .INCLK());


<P> --N4_q_b[7] is fifo:int_fifo|altsyncram:BUFFER[0][7]__4|altsyncram_4ig1:auto_generated|q_b[7]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N4_q_b[7]_PORT_A_data_in">N4_q_b[7]_PORT_A_data_in</A> = <A HREF="#F1L3">F1L3</A>;
<P><A NAME="N4_q_b[7]_PORT_A_data_in_reg">N4_q_b[7]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N4_q_b[7]_PORT_A_data_in">N4_q_b[7]_PORT_A_data_in</A>, N4_q_b[7]_clock_0, , , );
<P><A NAME="N4_q_b[7]_PORT_A_address">N4_q_b[7]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N4_q_b[7]_PORT_A_address_reg">N4_q_b[7]_PORT_A_address_reg</A> = DFFE(<A HREF="#N4_q_b[7]_PORT_A_address">N4_q_b[7]_PORT_A_address</A>, N4_q_b[7]_clock_0, , , );
<P><A NAME="N4_q_b[7]_PORT_B_address">N4_q_b[7]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N4_q_b[7]_PORT_B_address_reg">N4_q_b[7]_PORT_B_address_reg</A> = DFFE(<A HREF="#N4_q_b[7]_PORT_B_address">N4_q_b[7]_PORT_B_address</A>, N4_q_b[7]_clock_0, , , );
<P><A NAME="N4_q_b[7]_PORT_A_write_enable">N4_q_b[7]_PORT_A_write_enable</A> = <A HREF="#M1_LLWS">M1_LLWS</A>;
<P><A NAME="N4_q_b[7]_PORT_A_write_enable_reg">N4_q_b[7]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N4_q_b[7]_PORT_A_write_enable">N4_q_b[7]_PORT_A_write_enable</A>, N4_q_b[7]_clock_0, , , );
<P><A NAME="N4_q_b[7]_PORT_B_read_enable">N4_q_b[7]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N4_q_b[7]_PORT_B_read_enable_reg">N4_q_b[7]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N4_q_b[7]_PORT_B_read_enable">N4_q_b[7]_PORT_B_read_enable</A>, N4_q_b[7]_clock_0, , , );
<P><A NAME="N4_q_b[7]_clock_0">N4_q_b[7]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N4_q_b[7]_PORT_B_data_out">N4_q_b[7]_PORT_B_data_out</A> = MEMORY(<A HREF="#N4_q_b[7]_PORT_A_data_in_reg">N4_q_b[7]_PORT_A_data_in_reg</A>, , <A HREF="#N4_q_b[7]_PORT_A_address_reg">N4_q_b[7]_PORT_A_address_reg</A>, <A HREF="#N4_q_b[7]_PORT_B_address_reg">N4_q_b[7]_PORT_B_address_reg</A>, <A HREF="#N4_q_b[7]_PORT_A_write_enable_reg">N4_q_b[7]_PORT_A_write_enable_reg</A>, <A HREF="#N4_q_b[7]_PORT_B_read_enable_reg">N4_q_b[7]_PORT_B_read_enable_reg</A>, , , <A HREF="#N4_q_b[7]_clock_0">N4_q_b[7]_clock_0</A>, , , , , );
<P><A NAME="N4_q_b[7]">N4_q_b[7]</A> = <A HREF="#N4_q_b[7]_PORT_B_data_out">N4_q_b[7]_PORT_B_data_out</A>[0];


<P> --N2_q_b[7] is fifo:int_fifo|altsyncram:BUFFER[0][23]__2|altsyncram_4ig1:auto_generated|q_b[7]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N2_q_b[7]_PORT_A_data_in">N2_q_b[7]_PORT_A_data_in</A> = <A HREF="#F1L27">F1L27</A>;
<P><A NAME="N2_q_b[7]_PORT_A_data_in_reg">N2_q_b[7]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N2_q_b[7]_PORT_A_data_in">N2_q_b[7]_PORT_A_data_in</A>, N2_q_b[7]_clock_0, , , );
<P><A NAME="N2_q_b[7]_PORT_A_address">N2_q_b[7]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N2_q_b[7]_PORT_A_address_reg">N2_q_b[7]_PORT_A_address_reg</A> = DFFE(<A HREF="#N2_q_b[7]_PORT_A_address">N2_q_b[7]_PORT_A_address</A>, N2_q_b[7]_clock_0, , , );
<P><A NAME="N2_q_b[7]_PORT_B_address">N2_q_b[7]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N2_q_b[7]_PORT_B_address_reg">N2_q_b[7]_PORT_B_address_reg</A> = DFFE(<A HREF="#N2_q_b[7]_PORT_B_address">N2_q_b[7]_PORT_B_address</A>, N2_q_b[7]_clock_0, , , );
<P><A NAME="N2_q_b[7]_PORT_A_write_enable">N2_q_b[7]_PORT_A_write_enable</A> = <A HREF="#M1_UMWS">M1_UMWS</A>;
<P><A NAME="N2_q_b[7]_PORT_A_write_enable_reg">N2_q_b[7]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N2_q_b[7]_PORT_A_write_enable">N2_q_b[7]_PORT_A_write_enable</A>, N2_q_b[7]_clock_0, , , );
<P><A NAME="N2_q_b[7]_PORT_B_read_enable">N2_q_b[7]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N2_q_b[7]_PORT_B_read_enable_reg">N2_q_b[7]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N2_q_b[7]_PORT_B_read_enable">N2_q_b[7]_PORT_B_read_enable</A>, N2_q_b[7]_clock_0, , , );
<P><A NAME="N2_q_b[7]_clock_0">N2_q_b[7]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N2_q_b[7]_PORT_B_data_out">N2_q_b[7]_PORT_B_data_out</A> = MEMORY(<A HREF="#N2_q_b[7]_PORT_A_data_in_reg">N2_q_b[7]_PORT_A_data_in_reg</A>, , <A HREF="#N2_q_b[7]_PORT_A_address_reg">N2_q_b[7]_PORT_A_address_reg</A>, <A HREF="#N2_q_b[7]_PORT_B_address_reg">N2_q_b[7]_PORT_B_address_reg</A>, <A HREF="#N2_q_b[7]_PORT_A_write_enable_reg">N2_q_b[7]_PORT_A_write_enable_reg</A>, <A HREF="#N2_q_b[7]_PORT_B_read_enable_reg">N2_q_b[7]_PORT_B_read_enable_reg</A>, , , <A HREF="#N2_q_b[7]_clock_0">N2_q_b[7]_clock_0</A>, , , , , );
<P><A NAME="N2_q_b[7]">N2_q_b[7]</A> = <A HREF="#N2_q_b[7]_PORT_B_data_out">N2_q_b[7]_PORT_B_data_out</A>[0];


<P> --N3_q_b[7] is fifo:int_fifo|altsyncram:BUFFER[0][15]__3|altsyncram_4ig1:auto_generated|q_b[7]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N3_q_b[7]_PORT_A_data_in">N3_q_b[7]_PORT_A_data_in</A> = <A HREF="#F1L12">F1L12</A>;
<P><A NAME="N3_q_b[7]_PORT_A_data_in_reg">N3_q_b[7]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N3_q_b[7]_PORT_A_data_in">N3_q_b[7]_PORT_A_data_in</A>, N3_q_b[7]_clock_0, , , );
<P><A NAME="N3_q_b[7]_PORT_A_address">N3_q_b[7]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N3_q_b[7]_PORT_A_address_reg">N3_q_b[7]_PORT_A_address_reg</A> = DFFE(<A HREF="#N3_q_b[7]_PORT_A_address">N3_q_b[7]_PORT_A_address</A>, N3_q_b[7]_clock_0, , , );
<P><A NAME="N3_q_b[7]_PORT_B_address">N3_q_b[7]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N3_q_b[7]_PORT_B_address_reg">N3_q_b[7]_PORT_B_address_reg</A> = DFFE(<A HREF="#N3_q_b[7]_PORT_B_address">N3_q_b[7]_PORT_B_address</A>, N3_q_b[7]_clock_0, , , );
<P><A NAME="N3_q_b[7]_PORT_A_write_enable">N3_q_b[7]_PORT_A_write_enable</A> = <A HREF="#M1_LMWS">M1_LMWS</A>;
<P><A NAME="N3_q_b[7]_PORT_A_write_enable_reg">N3_q_b[7]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N3_q_b[7]_PORT_A_write_enable">N3_q_b[7]_PORT_A_write_enable</A>, N3_q_b[7]_clock_0, , , );
<P><A NAME="N3_q_b[7]_PORT_B_read_enable">N3_q_b[7]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N3_q_b[7]_PORT_B_read_enable_reg">N3_q_b[7]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N3_q_b[7]_PORT_B_read_enable">N3_q_b[7]_PORT_B_read_enable</A>, N3_q_b[7]_clock_0, , , );
<P><A NAME="N3_q_b[7]_clock_0">N3_q_b[7]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N3_q_b[7]_PORT_B_data_out">N3_q_b[7]_PORT_B_data_out</A> = MEMORY(<A HREF="#N3_q_b[7]_PORT_A_data_in_reg">N3_q_b[7]_PORT_A_data_in_reg</A>, , <A HREF="#N3_q_b[7]_PORT_A_address_reg">N3_q_b[7]_PORT_A_address_reg</A>, <A HREF="#N3_q_b[7]_PORT_B_address_reg">N3_q_b[7]_PORT_B_address_reg</A>, <A HREF="#N3_q_b[7]_PORT_A_write_enable_reg">N3_q_b[7]_PORT_A_write_enable_reg</A>, <A HREF="#N3_q_b[7]_PORT_B_read_enable_reg">N3_q_b[7]_PORT_B_read_enable_reg</A>, , , <A HREF="#N3_q_b[7]_clock_0">N3_q_b[7]_clock_0</A>, , , , , );
<P><A NAME="N3_q_b[7]">N3_q_b[7]</A> = <A HREF="#N3_q_b[7]_PORT_B_data_out">N3_q_b[7]_PORT_B_data_out</A>[0];


<P> --N1_q_b[7] is fifo:int_fifo|altsyncram:BUFFER[0][31]__1|altsyncram_4ig1:auto_generated|q_b[7]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N1_q_b[7]_PORT_A_data_in">N1_q_b[7]_PORT_A_data_in</A> = <A HREF="#F1L35">F1L35</A>;
<P><A NAME="N1_q_b[7]_PORT_A_data_in_reg">N1_q_b[7]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N1_q_b[7]_PORT_A_data_in">N1_q_b[7]_PORT_A_data_in</A>, N1_q_b[7]_clock_0, , , );
<P><A NAME="N1_q_b[7]_PORT_A_address">N1_q_b[7]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N1_q_b[7]_PORT_A_address_reg">N1_q_b[7]_PORT_A_address_reg</A> = DFFE(<A HREF="#N1_q_b[7]_PORT_A_address">N1_q_b[7]_PORT_A_address</A>, N1_q_b[7]_clock_0, , , );
<P><A NAME="N1_q_b[7]_PORT_B_address">N1_q_b[7]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N1_q_b[7]_PORT_B_address_reg">N1_q_b[7]_PORT_B_address_reg</A> = DFFE(<A HREF="#N1_q_b[7]_PORT_B_address">N1_q_b[7]_PORT_B_address</A>, N1_q_b[7]_clock_0, , , );
<P><A NAME="N1_q_b[7]_PORT_A_write_enable">N1_q_b[7]_PORT_A_write_enable</A> = <A HREF="#M1_UUWS">M1_UUWS</A>;
<P><A NAME="N1_q_b[7]_PORT_A_write_enable_reg">N1_q_b[7]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N1_q_b[7]_PORT_A_write_enable">N1_q_b[7]_PORT_A_write_enable</A>, N1_q_b[7]_clock_0, , , );
<P><A NAME="N1_q_b[7]_PORT_B_read_enable">N1_q_b[7]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N1_q_b[7]_PORT_B_read_enable_reg">N1_q_b[7]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N1_q_b[7]_PORT_B_read_enable">N1_q_b[7]_PORT_B_read_enable</A>, N1_q_b[7]_clock_0, , , );
<P><A NAME="N1_q_b[7]_clock_0">N1_q_b[7]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N1_q_b[7]_PORT_B_data_out">N1_q_b[7]_PORT_B_data_out</A> = MEMORY(<A HREF="#N1_q_b[7]_PORT_A_data_in_reg">N1_q_b[7]_PORT_A_data_in_reg</A>, , <A HREF="#N1_q_b[7]_PORT_A_address_reg">N1_q_b[7]_PORT_A_address_reg</A>, <A HREF="#N1_q_b[7]_PORT_B_address_reg">N1_q_b[7]_PORT_B_address_reg</A>, <A HREF="#N1_q_b[7]_PORT_A_write_enable_reg">N1_q_b[7]_PORT_A_write_enable_reg</A>, <A HREF="#N1_q_b[7]_PORT_B_read_enable_reg">N1_q_b[7]_PORT_B_read_enable_reg</A>, , , <A HREF="#N1_q_b[7]_clock_0">N1_q_b[7]_clock_0</A>, , , , , );
<P><A NAME="N1_q_b[7]">N1_q_b[7]</A> = <A HREF="#N1_q_b[7]_PORT_B_data_out">N1_q_b[7]_PORT_B_data_out</A>[0];


<P> --N4_q_b[6] is fifo:int_fifo|altsyncram:BUFFER[0][7]__4|altsyncram_4ig1:auto_generated|q_b[6]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N4_q_b[6]_PORT_A_data_in">N4_q_b[6]_PORT_A_data_in</A> = <A HREF="#F1L4">F1L4</A>;
<P><A NAME="N4_q_b[6]_PORT_A_data_in_reg">N4_q_b[6]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N4_q_b[6]_PORT_A_data_in">N4_q_b[6]_PORT_A_data_in</A>, N4_q_b[6]_clock_0, , , );
<P><A NAME="N4_q_b[6]_PORT_A_address">N4_q_b[6]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N4_q_b[6]_PORT_A_address_reg">N4_q_b[6]_PORT_A_address_reg</A> = DFFE(<A HREF="#N4_q_b[6]_PORT_A_address">N4_q_b[6]_PORT_A_address</A>, N4_q_b[6]_clock_0, , , );
<P><A NAME="N4_q_b[6]_PORT_B_address">N4_q_b[6]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N4_q_b[6]_PORT_B_address_reg">N4_q_b[6]_PORT_B_address_reg</A> = DFFE(<A HREF="#N4_q_b[6]_PORT_B_address">N4_q_b[6]_PORT_B_address</A>, N4_q_b[6]_clock_0, , , );
<P><A NAME="N4_q_b[6]_PORT_A_write_enable">N4_q_b[6]_PORT_A_write_enable</A> = <A HREF="#M1_LLWS">M1_LLWS</A>;
<P><A NAME="N4_q_b[6]_PORT_A_write_enable_reg">N4_q_b[6]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N4_q_b[6]_PORT_A_write_enable">N4_q_b[6]_PORT_A_write_enable</A>, N4_q_b[6]_clock_0, , , );
<P><A NAME="N4_q_b[6]_PORT_B_read_enable">N4_q_b[6]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N4_q_b[6]_PORT_B_read_enable_reg">N4_q_b[6]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N4_q_b[6]_PORT_B_read_enable">N4_q_b[6]_PORT_B_read_enable</A>, N4_q_b[6]_clock_0, , , );
<P><A NAME="N4_q_b[6]_clock_0">N4_q_b[6]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N4_q_b[6]_PORT_B_data_out">N4_q_b[6]_PORT_B_data_out</A> = MEMORY(<A HREF="#N4_q_b[6]_PORT_A_data_in_reg">N4_q_b[6]_PORT_A_data_in_reg</A>, , <A HREF="#N4_q_b[6]_PORT_A_address_reg">N4_q_b[6]_PORT_A_address_reg</A>, <A HREF="#N4_q_b[6]_PORT_B_address_reg">N4_q_b[6]_PORT_B_address_reg</A>, <A HREF="#N4_q_b[6]_PORT_A_write_enable_reg">N4_q_b[6]_PORT_A_write_enable_reg</A>, <A HREF="#N4_q_b[6]_PORT_B_read_enable_reg">N4_q_b[6]_PORT_B_read_enable_reg</A>, , , <A HREF="#N4_q_b[6]_clock_0">N4_q_b[6]_clock_0</A>, , , , , );
<P><A NAME="N4_q_b[6]">N4_q_b[6]</A> = <A HREF="#N4_q_b[6]_PORT_B_data_out">N4_q_b[6]_PORT_B_data_out</A>[0];


<P> --N2_q_b[6] is fifo:int_fifo|altsyncram:BUFFER[0][23]__2|altsyncram_4ig1:auto_generated|q_b[6]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N2_q_b[6]_PORT_A_data_in">N2_q_b[6]_PORT_A_data_in</A> = <A HREF="#F1L28">F1L28</A>;
<P><A NAME="N2_q_b[6]_PORT_A_data_in_reg">N2_q_b[6]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N2_q_b[6]_PORT_A_data_in">N2_q_b[6]_PORT_A_data_in</A>, N2_q_b[6]_clock_0, , , );
<P><A NAME="N2_q_b[6]_PORT_A_address">N2_q_b[6]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N2_q_b[6]_PORT_A_address_reg">N2_q_b[6]_PORT_A_address_reg</A> = DFFE(<A HREF="#N2_q_b[6]_PORT_A_address">N2_q_b[6]_PORT_A_address</A>, N2_q_b[6]_clock_0, , , );
<P><A NAME="N2_q_b[6]_PORT_B_address">N2_q_b[6]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N2_q_b[6]_PORT_B_address_reg">N2_q_b[6]_PORT_B_address_reg</A> = DFFE(<A HREF="#N2_q_b[6]_PORT_B_address">N2_q_b[6]_PORT_B_address</A>, N2_q_b[6]_clock_0, , , );
<P><A NAME="N2_q_b[6]_PORT_A_write_enable">N2_q_b[6]_PORT_A_write_enable</A> = <A HREF="#M1_UMWS">M1_UMWS</A>;
<P><A NAME="N2_q_b[6]_PORT_A_write_enable_reg">N2_q_b[6]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N2_q_b[6]_PORT_A_write_enable">N2_q_b[6]_PORT_A_write_enable</A>, N2_q_b[6]_clock_0, , , );
<P><A NAME="N2_q_b[6]_PORT_B_read_enable">N2_q_b[6]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N2_q_b[6]_PORT_B_read_enable_reg">N2_q_b[6]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N2_q_b[6]_PORT_B_read_enable">N2_q_b[6]_PORT_B_read_enable</A>, N2_q_b[6]_clock_0, , , );
<P><A NAME="N2_q_b[6]_clock_0">N2_q_b[6]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N2_q_b[6]_PORT_B_data_out">N2_q_b[6]_PORT_B_data_out</A> = MEMORY(<A HREF="#N2_q_b[6]_PORT_A_data_in_reg">N2_q_b[6]_PORT_A_data_in_reg</A>, , <A HREF="#N2_q_b[6]_PORT_A_address_reg">N2_q_b[6]_PORT_A_address_reg</A>, <A HREF="#N2_q_b[6]_PORT_B_address_reg">N2_q_b[6]_PORT_B_address_reg</A>, <A HREF="#N2_q_b[6]_PORT_A_write_enable_reg">N2_q_b[6]_PORT_A_write_enable_reg</A>, <A HREF="#N2_q_b[6]_PORT_B_read_enable_reg">N2_q_b[6]_PORT_B_read_enable_reg</A>, , , <A HREF="#N2_q_b[6]_clock_0">N2_q_b[6]_clock_0</A>, , , , , );
<P><A NAME="N2_q_b[6]">N2_q_b[6]</A> = <A HREF="#N2_q_b[6]_PORT_B_data_out">N2_q_b[6]_PORT_B_data_out</A>[0];


<P> --N3_q_b[6] is fifo:int_fifo|altsyncram:BUFFER[0][15]__3|altsyncram_4ig1:auto_generated|q_b[6]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N3_q_b[6]_PORT_A_data_in">N3_q_b[6]_PORT_A_data_in</A> = <A HREF="#F1L14">F1L14</A>;
<P><A NAME="N3_q_b[6]_PORT_A_data_in_reg">N3_q_b[6]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N3_q_b[6]_PORT_A_data_in">N3_q_b[6]_PORT_A_data_in</A>, N3_q_b[6]_clock_0, , , );
<P><A NAME="N3_q_b[6]_PORT_A_address">N3_q_b[6]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N3_q_b[6]_PORT_A_address_reg">N3_q_b[6]_PORT_A_address_reg</A> = DFFE(<A HREF="#N3_q_b[6]_PORT_A_address">N3_q_b[6]_PORT_A_address</A>, N3_q_b[6]_clock_0, , , );
<P><A NAME="N3_q_b[6]_PORT_B_address">N3_q_b[6]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N3_q_b[6]_PORT_B_address_reg">N3_q_b[6]_PORT_B_address_reg</A> = DFFE(<A HREF="#N3_q_b[6]_PORT_B_address">N3_q_b[6]_PORT_B_address</A>, N3_q_b[6]_clock_0, , , );
<P><A NAME="N3_q_b[6]_PORT_A_write_enable">N3_q_b[6]_PORT_A_write_enable</A> = <A HREF="#M1_LMWS">M1_LMWS</A>;
<P><A NAME="N3_q_b[6]_PORT_A_write_enable_reg">N3_q_b[6]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N3_q_b[6]_PORT_A_write_enable">N3_q_b[6]_PORT_A_write_enable</A>, N3_q_b[6]_clock_0, , , );
<P><A NAME="N3_q_b[6]_PORT_B_read_enable">N3_q_b[6]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N3_q_b[6]_PORT_B_read_enable_reg">N3_q_b[6]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N3_q_b[6]_PORT_B_read_enable">N3_q_b[6]_PORT_B_read_enable</A>, N3_q_b[6]_clock_0, , , );
<P><A NAME="N3_q_b[6]_clock_0">N3_q_b[6]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N3_q_b[6]_PORT_B_data_out">N3_q_b[6]_PORT_B_data_out</A> = MEMORY(<A HREF="#N3_q_b[6]_PORT_A_data_in_reg">N3_q_b[6]_PORT_A_data_in_reg</A>, , <A HREF="#N3_q_b[6]_PORT_A_address_reg">N3_q_b[6]_PORT_A_address_reg</A>, <A HREF="#N3_q_b[6]_PORT_B_address_reg">N3_q_b[6]_PORT_B_address_reg</A>, <A HREF="#N3_q_b[6]_PORT_A_write_enable_reg">N3_q_b[6]_PORT_A_write_enable_reg</A>, <A HREF="#N3_q_b[6]_PORT_B_read_enable_reg">N3_q_b[6]_PORT_B_read_enable_reg</A>, , , <A HREF="#N3_q_b[6]_clock_0">N3_q_b[6]_clock_0</A>, , , , , );
<P><A NAME="N3_q_b[6]">N3_q_b[6]</A> = <A HREF="#N3_q_b[6]_PORT_B_data_out">N3_q_b[6]_PORT_B_data_out</A>[0];


<P> --N1_q_b[6] is fifo:int_fifo|altsyncram:BUFFER[0][31]__1|altsyncram_4ig1:auto_generated|q_b[6]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N1_q_b[6]_PORT_A_data_in">N1_q_b[6]_PORT_A_data_in</A> = <A HREF="#F1L36">F1L36</A>;
<P><A NAME="N1_q_b[6]_PORT_A_data_in_reg">N1_q_b[6]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N1_q_b[6]_PORT_A_data_in">N1_q_b[6]_PORT_A_data_in</A>, N1_q_b[6]_clock_0, , , );
<P><A NAME="N1_q_b[6]_PORT_A_address">N1_q_b[6]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N1_q_b[6]_PORT_A_address_reg">N1_q_b[6]_PORT_A_address_reg</A> = DFFE(<A HREF="#N1_q_b[6]_PORT_A_address">N1_q_b[6]_PORT_A_address</A>, N1_q_b[6]_clock_0, , , );
<P><A NAME="N1_q_b[6]_PORT_B_address">N1_q_b[6]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N1_q_b[6]_PORT_B_address_reg">N1_q_b[6]_PORT_B_address_reg</A> = DFFE(<A HREF="#N1_q_b[6]_PORT_B_address">N1_q_b[6]_PORT_B_address</A>, N1_q_b[6]_clock_0, , , );
<P><A NAME="N1_q_b[6]_PORT_A_write_enable">N1_q_b[6]_PORT_A_write_enable</A> = <A HREF="#M1_UUWS">M1_UUWS</A>;
<P><A NAME="N1_q_b[6]_PORT_A_write_enable_reg">N1_q_b[6]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N1_q_b[6]_PORT_A_write_enable">N1_q_b[6]_PORT_A_write_enable</A>, N1_q_b[6]_clock_0, , , );
<P><A NAME="N1_q_b[6]_PORT_B_read_enable">N1_q_b[6]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N1_q_b[6]_PORT_B_read_enable_reg">N1_q_b[6]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N1_q_b[6]_PORT_B_read_enable">N1_q_b[6]_PORT_B_read_enable</A>, N1_q_b[6]_clock_0, , , );
<P><A NAME="N1_q_b[6]_clock_0">N1_q_b[6]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N1_q_b[6]_PORT_B_data_out">N1_q_b[6]_PORT_B_data_out</A> = MEMORY(<A HREF="#N1_q_b[6]_PORT_A_data_in_reg">N1_q_b[6]_PORT_A_data_in_reg</A>, , <A HREF="#N1_q_b[6]_PORT_A_address_reg">N1_q_b[6]_PORT_A_address_reg</A>, <A HREF="#N1_q_b[6]_PORT_B_address_reg">N1_q_b[6]_PORT_B_address_reg</A>, <A HREF="#N1_q_b[6]_PORT_A_write_enable_reg">N1_q_b[6]_PORT_A_write_enable_reg</A>, <A HREF="#N1_q_b[6]_PORT_B_read_enable_reg">N1_q_b[6]_PORT_B_read_enable_reg</A>, , , <A HREF="#N1_q_b[6]_clock_0">N1_q_b[6]_clock_0</A>, , , , , );
<P><A NAME="N1_q_b[6]">N1_q_b[6]</A> = <A HREF="#N1_q_b[6]_PORT_B_data_out">N1_q_b[6]_PORT_B_data_out</A>[0];


<P> --N4_q_b[5] is fifo:int_fifo|altsyncram:BUFFER[0][7]__4|altsyncram_4ig1:auto_generated|q_b[5]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N4_q_b[5]_PORT_A_data_in">N4_q_b[5]_PORT_A_data_in</A> = <A HREF="#F1L5">F1L5</A>;
<P><A NAME="N4_q_b[5]_PORT_A_data_in_reg">N4_q_b[5]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N4_q_b[5]_PORT_A_data_in">N4_q_b[5]_PORT_A_data_in</A>, N4_q_b[5]_clock_0, , , );
<P><A NAME="N4_q_b[5]_PORT_A_address">N4_q_b[5]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N4_q_b[5]_PORT_A_address_reg">N4_q_b[5]_PORT_A_address_reg</A> = DFFE(<A HREF="#N4_q_b[5]_PORT_A_address">N4_q_b[5]_PORT_A_address</A>, N4_q_b[5]_clock_0, , , );
<P><A NAME="N4_q_b[5]_PORT_B_address">N4_q_b[5]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N4_q_b[5]_PORT_B_address_reg">N4_q_b[5]_PORT_B_address_reg</A> = DFFE(<A HREF="#N4_q_b[5]_PORT_B_address">N4_q_b[5]_PORT_B_address</A>, N4_q_b[5]_clock_0, , , );
<P><A NAME="N4_q_b[5]_PORT_A_write_enable">N4_q_b[5]_PORT_A_write_enable</A> = <A HREF="#M1_LLWS">M1_LLWS</A>;
<P><A NAME="N4_q_b[5]_PORT_A_write_enable_reg">N4_q_b[5]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N4_q_b[5]_PORT_A_write_enable">N4_q_b[5]_PORT_A_write_enable</A>, N4_q_b[5]_clock_0, , , );
<P><A NAME="N4_q_b[5]_PORT_B_read_enable">N4_q_b[5]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N4_q_b[5]_PORT_B_read_enable_reg">N4_q_b[5]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N4_q_b[5]_PORT_B_read_enable">N4_q_b[5]_PORT_B_read_enable</A>, N4_q_b[5]_clock_0, , , );
<P><A NAME="N4_q_b[5]_clock_0">N4_q_b[5]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N4_q_b[5]_PORT_B_data_out">N4_q_b[5]_PORT_B_data_out</A> = MEMORY(<A HREF="#N4_q_b[5]_PORT_A_data_in_reg">N4_q_b[5]_PORT_A_data_in_reg</A>, , <A HREF="#N4_q_b[5]_PORT_A_address_reg">N4_q_b[5]_PORT_A_address_reg</A>, <A HREF="#N4_q_b[5]_PORT_B_address_reg">N4_q_b[5]_PORT_B_address_reg</A>, <A HREF="#N4_q_b[5]_PORT_A_write_enable_reg">N4_q_b[5]_PORT_A_write_enable_reg</A>, <A HREF="#N4_q_b[5]_PORT_B_read_enable_reg">N4_q_b[5]_PORT_B_read_enable_reg</A>, , , <A HREF="#N4_q_b[5]_clock_0">N4_q_b[5]_clock_0</A>, , , , , );
<P><A NAME="N4_q_b[5]">N4_q_b[5]</A> = <A HREF="#N4_q_b[5]_PORT_B_data_out">N4_q_b[5]_PORT_B_data_out</A>[0];


<P> --N2_q_b[5] is fifo:int_fifo|altsyncram:BUFFER[0][23]__2|altsyncram_4ig1:auto_generated|q_b[5]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N2_q_b[5]_PORT_A_data_in">N2_q_b[5]_PORT_A_data_in</A> = <A HREF="#F1L29">F1L29</A>;
<P><A NAME="N2_q_b[5]_PORT_A_data_in_reg">N2_q_b[5]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N2_q_b[5]_PORT_A_data_in">N2_q_b[5]_PORT_A_data_in</A>, N2_q_b[5]_clock_0, , , );
<P><A NAME="N2_q_b[5]_PORT_A_address">N2_q_b[5]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N2_q_b[5]_PORT_A_address_reg">N2_q_b[5]_PORT_A_address_reg</A> = DFFE(<A HREF="#N2_q_b[5]_PORT_A_address">N2_q_b[5]_PORT_A_address</A>, N2_q_b[5]_clock_0, , , );
<P><A NAME="N2_q_b[5]_PORT_B_address">N2_q_b[5]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N2_q_b[5]_PORT_B_address_reg">N2_q_b[5]_PORT_B_address_reg</A> = DFFE(<A HREF="#N2_q_b[5]_PORT_B_address">N2_q_b[5]_PORT_B_address</A>, N2_q_b[5]_clock_0, , , );
<P><A NAME="N2_q_b[5]_PORT_A_write_enable">N2_q_b[5]_PORT_A_write_enable</A> = <A HREF="#M1_UMWS">M1_UMWS</A>;
<P><A NAME="N2_q_b[5]_PORT_A_write_enable_reg">N2_q_b[5]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N2_q_b[5]_PORT_A_write_enable">N2_q_b[5]_PORT_A_write_enable</A>, N2_q_b[5]_clock_0, , , );
<P><A NAME="N2_q_b[5]_PORT_B_read_enable">N2_q_b[5]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N2_q_b[5]_PORT_B_read_enable_reg">N2_q_b[5]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N2_q_b[5]_PORT_B_read_enable">N2_q_b[5]_PORT_B_read_enable</A>, N2_q_b[5]_clock_0, , , );
<P><A NAME="N2_q_b[5]_clock_0">N2_q_b[5]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N2_q_b[5]_PORT_B_data_out">N2_q_b[5]_PORT_B_data_out</A> = MEMORY(<A HREF="#N2_q_b[5]_PORT_A_data_in_reg">N2_q_b[5]_PORT_A_data_in_reg</A>, , <A HREF="#N2_q_b[5]_PORT_A_address_reg">N2_q_b[5]_PORT_A_address_reg</A>, <A HREF="#N2_q_b[5]_PORT_B_address_reg">N2_q_b[5]_PORT_B_address_reg</A>, <A HREF="#N2_q_b[5]_PORT_A_write_enable_reg">N2_q_b[5]_PORT_A_write_enable_reg</A>, <A HREF="#N2_q_b[5]_PORT_B_read_enable_reg">N2_q_b[5]_PORT_B_read_enable_reg</A>, , , <A HREF="#N2_q_b[5]_clock_0">N2_q_b[5]_clock_0</A>, , , , , );
<P><A NAME="N2_q_b[5]">N2_q_b[5]</A> = <A HREF="#N2_q_b[5]_PORT_B_data_out">N2_q_b[5]_PORT_B_data_out</A>[0];


<P> --N3_q_b[5] is fifo:int_fifo|altsyncram:BUFFER[0][15]__3|altsyncram_4ig1:auto_generated|q_b[5]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N3_q_b[5]_PORT_A_data_in">N3_q_b[5]_PORT_A_data_in</A> = <A HREF="#F1L16">F1L16</A>;
<P><A NAME="N3_q_b[5]_PORT_A_data_in_reg">N3_q_b[5]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N3_q_b[5]_PORT_A_data_in">N3_q_b[5]_PORT_A_data_in</A>, N3_q_b[5]_clock_0, , , );
<P><A NAME="N3_q_b[5]_PORT_A_address">N3_q_b[5]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N3_q_b[5]_PORT_A_address_reg">N3_q_b[5]_PORT_A_address_reg</A> = DFFE(<A HREF="#N3_q_b[5]_PORT_A_address">N3_q_b[5]_PORT_A_address</A>, N3_q_b[5]_clock_0, , , );
<P><A NAME="N3_q_b[5]_PORT_B_address">N3_q_b[5]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N3_q_b[5]_PORT_B_address_reg">N3_q_b[5]_PORT_B_address_reg</A> = DFFE(<A HREF="#N3_q_b[5]_PORT_B_address">N3_q_b[5]_PORT_B_address</A>, N3_q_b[5]_clock_0, , , );
<P><A NAME="N3_q_b[5]_PORT_A_write_enable">N3_q_b[5]_PORT_A_write_enable</A> = <A HREF="#M1_LMWS">M1_LMWS</A>;
<P><A NAME="N3_q_b[5]_PORT_A_write_enable_reg">N3_q_b[5]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N3_q_b[5]_PORT_A_write_enable">N3_q_b[5]_PORT_A_write_enable</A>, N3_q_b[5]_clock_0, , , );
<P><A NAME="N3_q_b[5]_PORT_B_read_enable">N3_q_b[5]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N3_q_b[5]_PORT_B_read_enable_reg">N3_q_b[5]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N3_q_b[5]_PORT_B_read_enable">N3_q_b[5]_PORT_B_read_enable</A>, N3_q_b[5]_clock_0, , , );
<P><A NAME="N3_q_b[5]_clock_0">N3_q_b[5]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N3_q_b[5]_PORT_B_data_out">N3_q_b[5]_PORT_B_data_out</A> = MEMORY(<A HREF="#N3_q_b[5]_PORT_A_data_in_reg">N3_q_b[5]_PORT_A_data_in_reg</A>, , <A HREF="#N3_q_b[5]_PORT_A_address_reg">N3_q_b[5]_PORT_A_address_reg</A>, <A HREF="#N3_q_b[5]_PORT_B_address_reg">N3_q_b[5]_PORT_B_address_reg</A>, <A HREF="#N3_q_b[5]_PORT_A_write_enable_reg">N3_q_b[5]_PORT_A_write_enable_reg</A>, <A HREF="#N3_q_b[5]_PORT_B_read_enable_reg">N3_q_b[5]_PORT_B_read_enable_reg</A>, , , <A HREF="#N3_q_b[5]_clock_0">N3_q_b[5]_clock_0</A>, , , , , );
<P><A NAME="N3_q_b[5]">N3_q_b[5]</A> = <A HREF="#N3_q_b[5]_PORT_B_data_out">N3_q_b[5]_PORT_B_data_out</A>[0];


<P> --N1_q_b[5] is fifo:int_fifo|altsyncram:BUFFER[0][31]__1|altsyncram_4ig1:auto_generated|q_b[5]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N1_q_b[5]_PORT_A_data_in">N1_q_b[5]_PORT_A_data_in</A> = <A HREF="#F1L37">F1L37</A>;
<P><A NAME="N1_q_b[5]_PORT_A_data_in_reg">N1_q_b[5]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N1_q_b[5]_PORT_A_data_in">N1_q_b[5]_PORT_A_data_in</A>, N1_q_b[5]_clock_0, , , );
<P><A NAME="N1_q_b[5]_PORT_A_address">N1_q_b[5]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N1_q_b[5]_PORT_A_address_reg">N1_q_b[5]_PORT_A_address_reg</A> = DFFE(<A HREF="#N1_q_b[5]_PORT_A_address">N1_q_b[5]_PORT_A_address</A>, N1_q_b[5]_clock_0, , , );
<P><A NAME="N1_q_b[5]_PORT_B_address">N1_q_b[5]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N1_q_b[5]_PORT_B_address_reg">N1_q_b[5]_PORT_B_address_reg</A> = DFFE(<A HREF="#N1_q_b[5]_PORT_B_address">N1_q_b[5]_PORT_B_address</A>, N1_q_b[5]_clock_0, , , );
<P><A NAME="N1_q_b[5]_PORT_A_write_enable">N1_q_b[5]_PORT_A_write_enable</A> = <A HREF="#M1_UUWS">M1_UUWS</A>;
<P><A NAME="N1_q_b[5]_PORT_A_write_enable_reg">N1_q_b[5]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N1_q_b[5]_PORT_A_write_enable">N1_q_b[5]_PORT_A_write_enable</A>, N1_q_b[5]_clock_0, , , );
<P><A NAME="N1_q_b[5]_PORT_B_read_enable">N1_q_b[5]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N1_q_b[5]_PORT_B_read_enable_reg">N1_q_b[5]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N1_q_b[5]_PORT_B_read_enable">N1_q_b[5]_PORT_B_read_enable</A>, N1_q_b[5]_clock_0, , , );
<P><A NAME="N1_q_b[5]_clock_0">N1_q_b[5]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N1_q_b[5]_PORT_B_data_out">N1_q_b[5]_PORT_B_data_out</A> = MEMORY(<A HREF="#N1_q_b[5]_PORT_A_data_in_reg">N1_q_b[5]_PORT_A_data_in_reg</A>, , <A HREF="#N1_q_b[5]_PORT_A_address_reg">N1_q_b[5]_PORT_A_address_reg</A>, <A HREF="#N1_q_b[5]_PORT_B_address_reg">N1_q_b[5]_PORT_B_address_reg</A>, <A HREF="#N1_q_b[5]_PORT_A_write_enable_reg">N1_q_b[5]_PORT_A_write_enable_reg</A>, <A HREF="#N1_q_b[5]_PORT_B_read_enable_reg">N1_q_b[5]_PORT_B_read_enable_reg</A>, , , <A HREF="#N1_q_b[5]_clock_0">N1_q_b[5]_clock_0</A>, , , , , );
<P><A NAME="N1_q_b[5]">N1_q_b[5]</A> = <A HREF="#N1_q_b[5]_PORT_B_data_out">N1_q_b[5]_PORT_B_data_out</A>[0];


<P> --N4_q_b[4] is fifo:int_fifo|altsyncram:BUFFER[0][7]__4|altsyncram_4ig1:auto_generated|q_b[4]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N4_q_b[4]_PORT_A_data_in">N4_q_b[4]_PORT_A_data_in</A> = <A HREF="#F1L6">F1L6</A>;
<P><A NAME="N4_q_b[4]_PORT_A_data_in_reg">N4_q_b[4]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N4_q_b[4]_PORT_A_data_in">N4_q_b[4]_PORT_A_data_in</A>, N4_q_b[4]_clock_0, , , );
<P><A NAME="N4_q_b[4]_PORT_A_address">N4_q_b[4]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N4_q_b[4]_PORT_A_address_reg">N4_q_b[4]_PORT_A_address_reg</A> = DFFE(<A HREF="#N4_q_b[4]_PORT_A_address">N4_q_b[4]_PORT_A_address</A>, N4_q_b[4]_clock_0, , , );
<P><A NAME="N4_q_b[4]_PORT_B_address">N4_q_b[4]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N4_q_b[4]_PORT_B_address_reg">N4_q_b[4]_PORT_B_address_reg</A> = DFFE(<A HREF="#N4_q_b[4]_PORT_B_address">N4_q_b[4]_PORT_B_address</A>, N4_q_b[4]_clock_0, , , );
<P><A NAME="N4_q_b[4]_PORT_A_write_enable">N4_q_b[4]_PORT_A_write_enable</A> = <A HREF="#M1_LLWS">M1_LLWS</A>;
<P><A NAME="N4_q_b[4]_PORT_A_write_enable_reg">N4_q_b[4]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N4_q_b[4]_PORT_A_write_enable">N4_q_b[4]_PORT_A_write_enable</A>, N4_q_b[4]_clock_0, , , );
<P><A NAME="N4_q_b[4]_PORT_B_read_enable">N4_q_b[4]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N4_q_b[4]_PORT_B_read_enable_reg">N4_q_b[4]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N4_q_b[4]_PORT_B_read_enable">N4_q_b[4]_PORT_B_read_enable</A>, N4_q_b[4]_clock_0, , , );
<P><A NAME="N4_q_b[4]_clock_0">N4_q_b[4]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N4_q_b[4]_PORT_B_data_out">N4_q_b[4]_PORT_B_data_out</A> = MEMORY(<A HREF="#N4_q_b[4]_PORT_A_data_in_reg">N4_q_b[4]_PORT_A_data_in_reg</A>, , <A HREF="#N4_q_b[4]_PORT_A_address_reg">N4_q_b[4]_PORT_A_address_reg</A>, <A HREF="#N4_q_b[4]_PORT_B_address_reg">N4_q_b[4]_PORT_B_address_reg</A>, <A HREF="#N4_q_b[4]_PORT_A_write_enable_reg">N4_q_b[4]_PORT_A_write_enable_reg</A>, <A HREF="#N4_q_b[4]_PORT_B_read_enable_reg">N4_q_b[4]_PORT_B_read_enable_reg</A>, , , <A HREF="#N4_q_b[4]_clock_0">N4_q_b[4]_clock_0</A>, , , , , );
<P><A NAME="N4_q_b[4]">N4_q_b[4]</A> = <A HREF="#N4_q_b[4]_PORT_B_data_out">N4_q_b[4]_PORT_B_data_out</A>[0];


<P> --N2_q_b[4] is fifo:int_fifo|altsyncram:BUFFER[0][23]__2|altsyncram_4ig1:auto_generated|q_b[4]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N2_q_b[4]_PORT_A_data_in">N2_q_b[4]_PORT_A_data_in</A> = <A HREF="#F1L30">F1L30</A>;
<P><A NAME="N2_q_b[4]_PORT_A_data_in_reg">N2_q_b[4]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N2_q_b[4]_PORT_A_data_in">N2_q_b[4]_PORT_A_data_in</A>, N2_q_b[4]_clock_0, , , );
<P><A NAME="N2_q_b[4]_PORT_A_address">N2_q_b[4]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N2_q_b[4]_PORT_A_address_reg">N2_q_b[4]_PORT_A_address_reg</A> = DFFE(<A HREF="#N2_q_b[4]_PORT_A_address">N2_q_b[4]_PORT_A_address</A>, N2_q_b[4]_clock_0, , , );
<P><A NAME="N2_q_b[4]_PORT_B_address">N2_q_b[4]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N2_q_b[4]_PORT_B_address_reg">N2_q_b[4]_PORT_B_address_reg</A> = DFFE(<A HREF="#N2_q_b[4]_PORT_B_address">N2_q_b[4]_PORT_B_address</A>, N2_q_b[4]_clock_0, , , );
<P><A NAME="N2_q_b[4]_PORT_A_write_enable">N2_q_b[4]_PORT_A_write_enable</A> = <A HREF="#M1_UMWS">M1_UMWS</A>;
<P><A NAME="N2_q_b[4]_PORT_A_write_enable_reg">N2_q_b[4]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N2_q_b[4]_PORT_A_write_enable">N2_q_b[4]_PORT_A_write_enable</A>, N2_q_b[4]_clock_0, , , );
<P><A NAME="N2_q_b[4]_PORT_B_read_enable">N2_q_b[4]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N2_q_b[4]_PORT_B_read_enable_reg">N2_q_b[4]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N2_q_b[4]_PORT_B_read_enable">N2_q_b[4]_PORT_B_read_enable</A>, N2_q_b[4]_clock_0, , , );
<P><A NAME="N2_q_b[4]_clock_0">N2_q_b[4]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N2_q_b[4]_PORT_B_data_out">N2_q_b[4]_PORT_B_data_out</A> = MEMORY(<A HREF="#N2_q_b[4]_PORT_A_data_in_reg">N2_q_b[4]_PORT_A_data_in_reg</A>, , <A HREF="#N2_q_b[4]_PORT_A_address_reg">N2_q_b[4]_PORT_A_address_reg</A>, <A HREF="#N2_q_b[4]_PORT_B_address_reg">N2_q_b[4]_PORT_B_address_reg</A>, <A HREF="#N2_q_b[4]_PORT_A_write_enable_reg">N2_q_b[4]_PORT_A_write_enable_reg</A>, <A HREF="#N2_q_b[4]_PORT_B_read_enable_reg">N2_q_b[4]_PORT_B_read_enable_reg</A>, , , <A HREF="#N2_q_b[4]_clock_0">N2_q_b[4]_clock_0</A>, , , , , );
<P><A NAME="N2_q_b[4]">N2_q_b[4]</A> = <A HREF="#N2_q_b[4]_PORT_B_data_out">N2_q_b[4]_PORT_B_data_out</A>[0];


<P> --N3_q_b[4] is fifo:int_fifo|altsyncram:BUFFER[0][15]__3|altsyncram_4ig1:auto_generated|q_b[4]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N3_q_b[4]_PORT_A_data_in">N3_q_b[4]_PORT_A_data_in</A> = <A HREF="#F1L18">F1L18</A>;
<P><A NAME="N3_q_b[4]_PORT_A_data_in_reg">N3_q_b[4]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N3_q_b[4]_PORT_A_data_in">N3_q_b[4]_PORT_A_data_in</A>, N3_q_b[4]_clock_0, , , );
<P><A NAME="N3_q_b[4]_PORT_A_address">N3_q_b[4]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N3_q_b[4]_PORT_A_address_reg">N3_q_b[4]_PORT_A_address_reg</A> = DFFE(<A HREF="#N3_q_b[4]_PORT_A_address">N3_q_b[4]_PORT_A_address</A>, N3_q_b[4]_clock_0, , , );
<P><A NAME="N3_q_b[4]_PORT_B_address">N3_q_b[4]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N3_q_b[4]_PORT_B_address_reg">N3_q_b[4]_PORT_B_address_reg</A> = DFFE(<A HREF="#N3_q_b[4]_PORT_B_address">N3_q_b[4]_PORT_B_address</A>, N3_q_b[4]_clock_0, , , );
<P><A NAME="N3_q_b[4]_PORT_A_write_enable">N3_q_b[4]_PORT_A_write_enable</A> = <A HREF="#M1_LMWS">M1_LMWS</A>;
<P><A NAME="N3_q_b[4]_PORT_A_write_enable_reg">N3_q_b[4]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N3_q_b[4]_PORT_A_write_enable">N3_q_b[4]_PORT_A_write_enable</A>, N3_q_b[4]_clock_0, , , );
<P><A NAME="N3_q_b[4]_PORT_B_read_enable">N3_q_b[4]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N3_q_b[4]_PORT_B_read_enable_reg">N3_q_b[4]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N3_q_b[4]_PORT_B_read_enable">N3_q_b[4]_PORT_B_read_enable</A>, N3_q_b[4]_clock_0, , , );
<P><A NAME="N3_q_b[4]_clock_0">N3_q_b[4]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N3_q_b[4]_PORT_B_data_out">N3_q_b[4]_PORT_B_data_out</A> = MEMORY(<A HREF="#N3_q_b[4]_PORT_A_data_in_reg">N3_q_b[4]_PORT_A_data_in_reg</A>, , <A HREF="#N3_q_b[4]_PORT_A_address_reg">N3_q_b[4]_PORT_A_address_reg</A>, <A HREF="#N3_q_b[4]_PORT_B_address_reg">N3_q_b[4]_PORT_B_address_reg</A>, <A HREF="#N3_q_b[4]_PORT_A_write_enable_reg">N3_q_b[4]_PORT_A_write_enable_reg</A>, <A HREF="#N3_q_b[4]_PORT_B_read_enable_reg">N3_q_b[4]_PORT_B_read_enable_reg</A>, , , <A HREF="#N3_q_b[4]_clock_0">N3_q_b[4]_clock_0</A>, , , , , );
<P><A NAME="N3_q_b[4]">N3_q_b[4]</A> = <A HREF="#N3_q_b[4]_PORT_B_data_out">N3_q_b[4]_PORT_B_data_out</A>[0];


<P> --N1_q_b[4] is fifo:int_fifo|altsyncram:BUFFER[0][31]__1|altsyncram_4ig1:auto_generated|q_b[4]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N1_q_b[4]_PORT_A_data_in">N1_q_b[4]_PORT_A_data_in</A> = <A HREF="#F1L38">F1L38</A>;
<P><A NAME="N1_q_b[4]_PORT_A_data_in_reg">N1_q_b[4]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N1_q_b[4]_PORT_A_data_in">N1_q_b[4]_PORT_A_data_in</A>, N1_q_b[4]_clock_0, , , );
<P><A NAME="N1_q_b[4]_PORT_A_address">N1_q_b[4]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N1_q_b[4]_PORT_A_address_reg">N1_q_b[4]_PORT_A_address_reg</A> = DFFE(<A HREF="#N1_q_b[4]_PORT_A_address">N1_q_b[4]_PORT_A_address</A>, N1_q_b[4]_clock_0, , , );
<P><A NAME="N1_q_b[4]_PORT_B_address">N1_q_b[4]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N1_q_b[4]_PORT_B_address_reg">N1_q_b[4]_PORT_B_address_reg</A> = DFFE(<A HREF="#N1_q_b[4]_PORT_B_address">N1_q_b[4]_PORT_B_address</A>, N1_q_b[4]_clock_0, , , );
<P><A NAME="N1_q_b[4]_PORT_A_write_enable">N1_q_b[4]_PORT_A_write_enable</A> = <A HREF="#M1_UUWS">M1_UUWS</A>;
<P><A NAME="N1_q_b[4]_PORT_A_write_enable_reg">N1_q_b[4]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N1_q_b[4]_PORT_A_write_enable">N1_q_b[4]_PORT_A_write_enable</A>, N1_q_b[4]_clock_0, , , );
<P><A NAME="N1_q_b[4]_PORT_B_read_enable">N1_q_b[4]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N1_q_b[4]_PORT_B_read_enable_reg">N1_q_b[4]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N1_q_b[4]_PORT_B_read_enable">N1_q_b[4]_PORT_B_read_enable</A>, N1_q_b[4]_clock_0, , , );
<P><A NAME="N1_q_b[4]_clock_0">N1_q_b[4]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N1_q_b[4]_PORT_B_data_out">N1_q_b[4]_PORT_B_data_out</A> = MEMORY(<A HREF="#N1_q_b[4]_PORT_A_data_in_reg">N1_q_b[4]_PORT_A_data_in_reg</A>, , <A HREF="#N1_q_b[4]_PORT_A_address_reg">N1_q_b[4]_PORT_A_address_reg</A>, <A HREF="#N1_q_b[4]_PORT_B_address_reg">N1_q_b[4]_PORT_B_address_reg</A>, <A HREF="#N1_q_b[4]_PORT_A_write_enable_reg">N1_q_b[4]_PORT_A_write_enable_reg</A>, <A HREF="#N1_q_b[4]_PORT_B_read_enable_reg">N1_q_b[4]_PORT_B_read_enable_reg</A>, , , <A HREF="#N1_q_b[4]_clock_0">N1_q_b[4]_clock_0</A>, , , , , );
<P><A NAME="N1_q_b[4]">N1_q_b[4]</A> = <A HREF="#N1_q_b[4]_PORT_B_data_out">N1_q_b[4]_PORT_B_data_out</A>[0];


<P> --N4_q_b[3] is fifo:int_fifo|altsyncram:BUFFER[0][7]__4|altsyncram_4ig1:auto_generated|q_b[3]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N4_q_b[3]_PORT_A_data_in">N4_q_b[3]_PORT_A_data_in</A> = <A HREF="#F1L7">F1L7</A>;
<P><A NAME="N4_q_b[3]_PORT_A_data_in_reg">N4_q_b[3]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N4_q_b[3]_PORT_A_data_in">N4_q_b[3]_PORT_A_data_in</A>, N4_q_b[3]_clock_0, , , );
<P><A NAME="N4_q_b[3]_PORT_A_address">N4_q_b[3]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N4_q_b[3]_PORT_A_address_reg">N4_q_b[3]_PORT_A_address_reg</A> = DFFE(<A HREF="#N4_q_b[3]_PORT_A_address">N4_q_b[3]_PORT_A_address</A>, N4_q_b[3]_clock_0, , , );
<P><A NAME="N4_q_b[3]_PORT_B_address">N4_q_b[3]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N4_q_b[3]_PORT_B_address_reg">N4_q_b[3]_PORT_B_address_reg</A> = DFFE(<A HREF="#N4_q_b[3]_PORT_B_address">N4_q_b[3]_PORT_B_address</A>, N4_q_b[3]_clock_0, , , );
<P><A NAME="N4_q_b[3]_PORT_A_write_enable">N4_q_b[3]_PORT_A_write_enable</A> = <A HREF="#M1_LLWS">M1_LLWS</A>;
<P><A NAME="N4_q_b[3]_PORT_A_write_enable_reg">N4_q_b[3]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N4_q_b[3]_PORT_A_write_enable">N4_q_b[3]_PORT_A_write_enable</A>, N4_q_b[3]_clock_0, , , );
<P><A NAME="N4_q_b[3]_PORT_B_read_enable">N4_q_b[3]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N4_q_b[3]_PORT_B_read_enable_reg">N4_q_b[3]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N4_q_b[3]_PORT_B_read_enable">N4_q_b[3]_PORT_B_read_enable</A>, N4_q_b[3]_clock_0, , , );
<P><A NAME="N4_q_b[3]_clock_0">N4_q_b[3]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N4_q_b[3]_PORT_B_data_out">N4_q_b[3]_PORT_B_data_out</A> = MEMORY(<A HREF="#N4_q_b[3]_PORT_A_data_in_reg">N4_q_b[3]_PORT_A_data_in_reg</A>, , <A HREF="#N4_q_b[3]_PORT_A_address_reg">N4_q_b[3]_PORT_A_address_reg</A>, <A HREF="#N4_q_b[3]_PORT_B_address_reg">N4_q_b[3]_PORT_B_address_reg</A>, <A HREF="#N4_q_b[3]_PORT_A_write_enable_reg">N4_q_b[3]_PORT_A_write_enable_reg</A>, <A HREF="#N4_q_b[3]_PORT_B_read_enable_reg">N4_q_b[3]_PORT_B_read_enable_reg</A>, , , <A HREF="#N4_q_b[3]_clock_0">N4_q_b[3]_clock_0</A>, , , , , );
<P><A NAME="N4_q_b[3]">N4_q_b[3]</A> = <A HREF="#N4_q_b[3]_PORT_B_data_out">N4_q_b[3]_PORT_B_data_out</A>[0];


<P> --N2_q_b[3] is fifo:int_fifo|altsyncram:BUFFER[0][23]__2|altsyncram_4ig1:auto_generated|q_b[3]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N2_q_b[3]_PORT_A_data_in">N2_q_b[3]_PORT_A_data_in</A> = <A HREF="#F1L31">F1L31</A>;
<P><A NAME="N2_q_b[3]_PORT_A_data_in_reg">N2_q_b[3]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N2_q_b[3]_PORT_A_data_in">N2_q_b[3]_PORT_A_data_in</A>, N2_q_b[3]_clock_0, , , );
<P><A NAME="N2_q_b[3]_PORT_A_address">N2_q_b[3]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N2_q_b[3]_PORT_A_address_reg">N2_q_b[3]_PORT_A_address_reg</A> = DFFE(<A HREF="#N2_q_b[3]_PORT_A_address">N2_q_b[3]_PORT_A_address</A>, N2_q_b[3]_clock_0, , , );
<P><A NAME="N2_q_b[3]_PORT_B_address">N2_q_b[3]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N2_q_b[3]_PORT_B_address_reg">N2_q_b[3]_PORT_B_address_reg</A> = DFFE(<A HREF="#N2_q_b[3]_PORT_B_address">N2_q_b[3]_PORT_B_address</A>, N2_q_b[3]_clock_0, , , );
<P><A NAME="N2_q_b[3]_PORT_A_write_enable">N2_q_b[3]_PORT_A_write_enable</A> = <A HREF="#M1_UMWS">M1_UMWS</A>;
<P><A NAME="N2_q_b[3]_PORT_A_write_enable_reg">N2_q_b[3]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N2_q_b[3]_PORT_A_write_enable">N2_q_b[3]_PORT_A_write_enable</A>, N2_q_b[3]_clock_0, , , );
<P><A NAME="N2_q_b[3]_PORT_B_read_enable">N2_q_b[3]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N2_q_b[3]_PORT_B_read_enable_reg">N2_q_b[3]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N2_q_b[3]_PORT_B_read_enable">N2_q_b[3]_PORT_B_read_enable</A>, N2_q_b[3]_clock_0, , , );
<P><A NAME="N2_q_b[3]_clock_0">N2_q_b[3]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N2_q_b[3]_PORT_B_data_out">N2_q_b[3]_PORT_B_data_out</A> = MEMORY(<A HREF="#N2_q_b[3]_PORT_A_data_in_reg">N2_q_b[3]_PORT_A_data_in_reg</A>, , <A HREF="#N2_q_b[3]_PORT_A_address_reg">N2_q_b[3]_PORT_A_address_reg</A>, <A HREF="#N2_q_b[3]_PORT_B_address_reg">N2_q_b[3]_PORT_B_address_reg</A>, <A HREF="#N2_q_b[3]_PORT_A_write_enable_reg">N2_q_b[3]_PORT_A_write_enable_reg</A>, <A HREF="#N2_q_b[3]_PORT_B_read_enable_reg">N2_q_b[3]_PORT_B_read_enable_reg</A>, , , <A HREF="#N2_q_b[3]_clock_0">N2_q_b[3]_clock_0</A>, , , , , );
<P><A NAME="N2_q_b[3]">N2_q_b[3]</A> = <A HREF="#N2_q_b[3]_PORT_B_data_out">N2_q_b[3]_PORT_B_data_out</A>[0];


<P> --N3_q_b[3] is fifo:int_fifo|altsyncram:BUFFER[0][15]__3|altsyncram_4ig1:auto_generated|q_b[3]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N3_q_b[3]_PORT_A_data_in">N3_q_b[3]_PORT_A_data_in</A> = <A HREF="#F1L20">F1L20</A>;
<P><A NAME="N3_q_b[3]_PORT_A_data_in_reg">N3_q_b[3]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N3_q_b[3]_PORT_A_data_in">N3_q_b[3]_PORT_A_data_in</A>, N3_q_b[3]_clock_0, , , );
<P><A NAME="N3_q_b[3]_PORT_A_address">N3_q_b[3]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N3_q_b[3]_PORT_A_address_reg">N3_q_b[3]_PORT_A_address_reg</A> = DFFE(<A HREF="#N3_q_b[3]_PORT_A_address">N3_q_b[3]_PORT_A_address</A>, N3_q_b[3]_clock_0, , , );
<P><A NAME="N3_q_b[3]_PORT_B_address">N3_q_b[3]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N3_q_b[3]_PORT_B_address_reg">N3_q_b[3]_PORT_B_address_reg</A> = DFFE(<A HREF="#N3_q_b[3]_PORT_B_address">N3_q_b[3]_PORT_B_address</A>, N3_q_b[3]_clock_0, , , );
<P><A NAME="N3_q_b[3]_PORT_A_write_enable">N3_q_b[3]_PORT_A_write_enable</A> = <A HREF="#M1_LMWS">M1_LMWS</A>;
<P><A NAME="N3_q_b[3]_PORT_A_write_enable_reg">N3_q_b[3]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N3_q_b[3]_PORT_A_write_enable">N3_q_b[3]_PORT_A_write_enable</A>, N3_q_b[3]_clock_0, , , );
<P><A NAME="N3_q_b[3]_PORT_B_read_enable">N3_q_b[3]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N3_q_b[3]_PORT_B_read_enable_reg">N3_q_b[3]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N3_q_b[3]_PORT_B_read_enable">N3_q_b[3]_PORT_B_read_enable</A>, N3_q_b[3]_clock_0, , , );
<P><A NAME="N3_q_b[3]_clock_0">N3_q_b[3]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N3_q_b[3]_PORT_B_data_out">N3_q_b[3]_PORT_B_data_out</A> = MEMORY(<A HREF="#N3_q_b[3]_PORT_A_data_in_reg">N3_q_b[3]_PORT_A_data_in_reg</A>, , <A HREF="#N3_q_b[3]_PORT_A_address_reg">N3_q_b[3]_PORT_A_address_reg</A>, <A HREF="#N3_q_b[3]_PORT_B_address_reg">N3_q_b[3]_PORT_B_address_reg</A>, <A HREF="#N3_q_b[3]_PORT_A_write_enable_reg">N3_q_b[3]_PORT_A_write_enable_reg</A>, <A HREF="#N3_q_b[3]_PORT_B_read_enable_reg">N3_q_b[3]_PORT_B_read_enable_reg</A>, , , <A HREF="#N3_q_b[3]_clock_0">N3_q_b[3]_clock_0</A>, , , , , );
<P><A NAME="N3_q_b[3]">N3_q_b[3]</A> = <A HREF="#N3_q_b[3]_PORT_B_data_out">N3_q_b[3]_PORT_B_data_out</A>[0];


<P> --N1_q_b[3] is fifo:int_fifo|altsyncram:BUFFER[0][31]__1|altsyncram_4ig1:auto_generated|q_b[3]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N1_q_b[3]_PORT_A_data_in">N1_q_b[3]_PORT_A_data_in</A> = <A HREF="#F1L39">F1L39</A>;
<P><A NAME="N1_q_b[3]_PORT_A_data_in_reg">N1_q_b[3]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N1_q_b[3]_PORT_A_data_in">N1_q_b[3]_PORT_A_data_in</A>, N1_q_b[3]_clock_0, , , );
<P><A NAME="N1_q_b[3]_PORT_A_address">N1_q_b[3]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N1_q_b[3]_PORT_A_address_reg">N1_q_b[3]_PORT_A_address_reg</A> = DFFE(<A HREF="#N1_q_b[3]_PORT_A_address">N1_q_b[3]_PORT_A_address</A>, N1_q_b[3]_clock_0, , , );
<P><A NAME="N1_q_b[3]_PORT_B_address">N1_q_b[3]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N1_q_b[3]_PORT_B_address_reg">N1_q_b[3]_PORT_B_address_reg</A> = DFFE(<A HREF="#N1_q_b[3]_PORT_B_address">N1_q_b[3]_PORT_B_address</A>, N1_q_b[3]_clock_0, , , );
<P><A NAME="N1_q_b[3]_PORT_A_write_enable">N1_q_b[3]_PORT_A_write_enable</A> = <A HREF="#M1_UUWS">M1_UUWS</A>;
<P><A NAME="N1_q_b[3]_PORT_A_write_enable_reg">N1_q_b[3]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N1_q_b[3]_PORT_A_write_enable">N1_q_b[3]_PORT_A_write_enable</A>, N1_q_b[3]_clock_0, , , );
<P><A NAME="N1_q_b[3]_PORT_B_read_enable">N1_q_b[3]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N1_q_b[3]_PORT_B_read_enable_reg">N1_q_b[3]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N1_q_b[3]_PORT_B_read_enable">N1_q_b[3]_PORT_B_read_enable</A>, N1_q_b[3]_clock_0, , , );
<P><A NAME="N1_q_b[3]_clock_0">N1_q_b[3]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N1_q_b[3]_PORT_B_data_out">N1_q_b[3]_PORT_B_data_out</A> = MEMORY(<A HREF="#N1_q_b[3]_PORT_A_data_in_reg">N1_q_b[3]_PORT_A_data_in_reg</A>, , <A HREF="#N1_q_b[3]_PORT_A_address_reg">N1_q_b[3]_PORT_A_address_reg</A>, <A HREF="#N1_q_b[3]_PORT_B_address_reg">N1_q_b[3]_PORT_B_address_reg</A>, <A HREF="#N1_q_b[3]_PORT_A_write_enable_reg">N1_q_b[3]_PORT_A_write_enable_reg</A>, <A HREF="#N1_q_b[3]_PORT_B_read_enable_reg">N1_q_b[3]_PORT_B_read_enable_reg</A>, , , <A HREF="#N1_q_b[3]_clock_0">N1_q_b[3]_clock_0</A>, , , , , );
<P><A NAME="N1_q_b[3]">N1_q_b[3]</A> = <A HREF="#N1_q_b[3]_PORT_B_data_out">N1_q_b[3]_PORT_B_data_out</A>[0];


<P> --N4_q_b[2] is fifo:int_fifo|altsyncram:BUFFER[0][7]__4|altsyncram_4ig1:auto_generated|q_b[2]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N4_q_b[2]_PORT_A_data_in">N4_q_b[2]_PORT_A_data_in</A> = <A HREF="#F1L8">F1L8</A>;
<P><A NAME="N4_q_b[2]_PORT_A_data_in_reg">N4_q_b[2]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N4_q_b[2]_PORT_A_data_in">N4_q_b[2]_PORT_A_data_in</A>, N4_q_b[2]_clock_0, , , );
<P><A NAME="N4_q_b[2]_PORT_A_address">N4_q_b[2]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N4_q_b[2]_PORT_A_address_reg">N4_q_b[2]_PORT_A_address_reg</A> = DFFE(<A HREF="#N4_q_b[2]_PORT_A_address">N4_q_b[2]_PORT_A_address</A>, N4_q_b[2]_clock_0, , , );
<P><A NAME="N4_q_b[2]_PORT_B_address">N4_q_b[2]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N4_q_b[2]_PORT_B_address_reg">N4_q_b[2]_PORT_B_address_reg</A> = DFFE(<A HREF="#N4_q_b[2]_PORT_B_address">N4_q_b[2]_PORT_B_address</A>, N4_q_b[2]_clock_0, , , );
<P><A NAME="N4_q_b[2]_PORT_A_write_enable">N4_q_b[2]_PORT_A_write_enable</A> = <A HREF="#M1_LLWS">M1_LLWS</A>;
<P><A NAME="N4_q_b[2]_PORT_A_write_enable_reg">N4_q_b[2]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N4_q_b[2]_PORT_A_write_enable">N4_q_b[2]_PORT_A_write_enable</A>, N4_q_b[2]_clock_0, , , );
<P><A NAME="N4_q_b[2]_PORT_B_read_enable">N4_q_b[2]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N4_q_b[2]_PORT_B_read_enable_reg">N4_q_b[2]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N4_q_b[2]_PORT_B_read_enable">N4_q_b[2]_PORT_B_read_enable</A>, N4_q_b[2]_clock_0, , , );
<P><A NAME="N4_q_b[2]_clock_0">N4_q_b[2]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N4_q_b[2]_PORT_B_data_out">N4_q_b[2]_PORT_B_data_out</A> = MEMORY(<A HREF="#N4_q_b[2]_PORT_A_data_in_reg">N4_q_b[2]_PORT_A_data_in_reg</A>, , <A HREF="#N4_q_b[2]_PORT_A_address_reg">N4_q_b[2]_PORT_A_address_reg</A>, <A HREF="#N4_q_b[2]_PORT_B_address_reg">N4_q_b[2]_PORT_B_address_reg</A>, <A HREF="#N4_q_b[2]_PORT_A_write_enable_reg">N4_q_b[2]_PORT_A_write_enable_reg</A>, <A HREF="#N4_q_b[2]_PORT_B_read_enable_reg">N4_q_b[2]_PORT_B_read_enable_reg</A>, , , <A HREF="#N4_q_b[2]_clock_0">N4_q_b[2]_clock_0</A>, , , , , );
<P><A NAME="N4_q_b[2]">N4_q_b[2]</A> = <A HREF="#N4_q_b[2]_PORT_B_data_out">N4_q_b[2]_PORT_B_data_out</A>[0];


<P> --N2_q_b[2] is fifo:int_fifo|altsyncram:BUFFER[0][23]__2|altsyncram_4ig1:auto_generated|q_b[2]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N2_q_b[2]_PORT_A_data_in">N2_q_b[2]_PORT_A_data_in</A> = <A HREF="#F1L32">F1L32</A>;
<P><A NAME="N2_q_b[2]_PORT_A_data_in_reg">N2_q_b[2]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N2_q_b[2]_PORT_A_data_in">N2_q_b[2]_PORT_A_data_in</A>, N2_q_b[2]_clock_0, , , );
<P><A NAME="N2_q_b[2]_PORT_A_address">N2_q_b[2]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N2_q_b[2]_PORT_A_address_reg">N2_q_b[2]_PORT_A_address_reg</A> = DFFE(<A HREF="#N2_q_b[2]_PORT_A_address">N2_q_b[2]_PORT_A_address</A>, N2_q_b[2]_clock_0, , , );
<P><A NAME="N2_q_b[2]_PORT_B_address">N2_q_b[2]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N2_q_b[2]_PORT_B_address_reg">N2_q_b[2]_PORT_B_address_reg</A> = DFFE(<A HREF="#N2_q_b[2]_PORT_B_address">N2_q_b[2]_PORT_B_address</A>, N2_q_b[2]_clock_0, , , );
<P><A NAME="N2_q_b[2]_PORT_A_write_enable">N2_q_b[2]_PORT_A_write_enable</A> = <A HREF="#M1_UMWS">M1_UMWS</A>;
<P><A NAME="N2_q_b[2]_PORT_A_write_enable_reg">N2_q_b[2]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N2_q_b[2]_PORT_A_write_enable">N2_q_b[2]_PORT_A_write_enable</A>, N2_q_b[2]_clock_0, , , );
<P><A NAME="N2_q_b[2]_PORT_B_read_enable">N2_q_b[2]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N2_q_b[2]_PORT_B_read_enable_reg">N2_q_b[2]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N2_q_b[2]_PORT_B_read_enable">N2_q_b[2]_PORT_B_read_enable</A>, N2_q_b[2]_clock_0, , , );
<P><A NAME="N2_q_b[2]_clock_0">N2_q_b[2]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N2_q_b[2]_PORT_B_data_out">N2_q_b[2]_PORT_B_data_out</A> = MEMORY(<A HREF="#N2_q_b[2]_PORT_A_data_in_reg">N2_q_b[2]_PORT_A_data_in_reg</A>, , <A HREF="#N2_q_b[2]_PORT_A_address_reg">N2_q_b[2]_PORT_A_address_reg</A>, <A HREF="#N2_q_b[2]_PORT_B_address_reg">N2_q_b[2]_PORT_B_address_reg</A>, <A HREF="#N2_q_b[2]_PORT_A_write_enable_reg">N2_q_b[2]_PORT_A_write_enable_reg</A>, <A HREF="#N2_q_b[2]_PORT_B_read_enable_reg">N2_q_b[2]_PORT_B_read_enable_reg</A>, , , <A HREF="#N2_q_b[2]_clock_0">N2_q_b[2]_clock_0</A>, , , , , );
<P><A NAME="N2_q_b[2]">N2_q_b[2]</A> = <A HREF="#N2_q_b[2]_PORT_B_data_out">N2_q_b[2]_PORT_B_data_out</A>[0];


<P> --N3_q_b[2] is fifo:int_fifo|altsyncram:BUFFER[0][15]__3|altsyncram_4ig1:auto_generated|q_b[2]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N3_q_b[2]_PORT_A_data_in">N3_q_b[2]_PORT_A_data_in</A> = <A HREF="#F1L22">F1L22</A>;
<P><A NAME="N3_q_b[2]_PORT_A_data_in_reg">N3_q_b[2]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N3_q_b[2]_PORT_A_data_in">N3_q_b[2]_PORT_A_data_in</A>, N3_q_b[2]_clock_0, , , );
<P><A NAME="N3_q_b[2]_PORT_A_address">N3_q_b[2]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N3_q_b[2]_PORT_A_address_reg">N3_q_b[2]_PORT_A_address_reg</A> = DFFE(<A HREF="#N3_q_b[2]_PORT_A_address">N3_q_b[2]_PORT_A_address</A>, N3_q_b[2]_clock_0, , , );
<P><A NAME="N3_q_b[2]_PORT_B_address">N3_q_b[2]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N3_q_b[2]_PORT_B_address_reg">N3_q_b[2]_PORT_B_address_reg</A> = DFFE(<A HREF="#N3_q_b[2]_PORT_B_address">N3_q_b[2]_PORT_B_address</A>, N3_q_b[2]_clock_0, , , );
<P><A NAME="N3_q_b[2]_PORT_A_write_enable">N3_q_b[2]_PORT_A_write_enable</A> = <A HREF="#M1_LMWS">M1_LMWS</A>;
<P><A NAME="N3_q_b[2]_PORT_A_write_enable_reg">N3_q_b[2]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N3_q_b[2]_PORT_A_write_enable">N3_q_b[2]_PORT_A_write_enable</A>, N3_q_b[2]_clock_0, , , );
<P><A NAME="N3_q_b[2]_PORT_B_read_enable">N3_q_b[2]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N3_q_b[2]_PORT_B_read_enable_reg">N3_q_b[2]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N3_q_b[2]_PORT_B_read_enable">N3_q_b[2]_PORT_B_read_enable</A>, N3_q_b[2]_clock_0, , , );
<P><A NAME="N3_q_b[2]_clock_0">N3_q_b[2]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N3_q_b[2]_PORT_B_data_out">N3_q_b[2]_PORT_B_data_out</A> = MEMORY(<A HREF="#N3_q_b[2]_PORT_A_data_in_reg">N3_q_b[2]_PORT_A_data_in_reg</A>, , <A HREF="#N3_q_b[2]_PORT_A_address_reg">N3_q_b[2]_PORT_A_address_reg</A>, <A HREF="#N3_q_b[2]_PORT_B_address_reg">N3_q_b[2]_PORT_B_address_reg</A>, <A HREF="#N3_q_b[2]_PORT_A_write_enable_reg">N3_q_b[2]_PORT_A_write_enable_reg</A>, <A HREF="#N3_q_b[2]_PORT_B_read_enable_reg">N3_q_b[2]_PORT_B_read_enable_reg</A>, , , <A HREF="#N3_q_b[2]_clock_0">N3_q_b[2]_clock_0</A>, , , , , );
<P><A NAME="N3_q_b[2]">N3_q_b[2]</A> = <A HREF="#N3_q_b[2]_PORT_B_data_out">N3_q_b[2]_PORT_B_data_out</A>[0];


<P> --N1_q_b[2] is fifo:int_fifo|altsyncram:BUFFER[0][31]__1|altsyncram_4ig1:auto_generated|q_b[2]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N1_q_b[2]_PORT_A_data_in">N1_q_b[2]_PORT_A_data_in</A> = <A HREF="#F1L40">F1L40</A>;
<P><A NAME="N1_q_b[2]_PORT_A_data_in_reg">N1_q_b[2]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N1_q_b[2]_PORT_A_data_in">N1_q_b[2]_PORT_A_data_in</A>, N1_q_b[2]_clock_0, , , );
<P><A NAME="N1_q_b[2]_PORT_A_address">N1_q_b[2]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N1_q_b[2]_PORT_A_address_reg">N1_q_b[2]_PORT_A_address_reg</A> = DFFE(<A HREF="#N1_q_b[2]_PORT_A_address">N1_q_b[2]_PORT_A_address</A>, N1_q_b[2]_clock_0, , , );
<P><A NAME="N1_q_b[2]_PORT_B_address">N1_q_b[2]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N1_q_b[2]_PORT_B_address_reg">N1_q_b[2]_PORT_B_address_reg</A> = DFFE(<A HREF="#N1_q_b[2]_PORT_B_address">N1_q_b[2]_PORT_B_address</A>, N1_q_b[2]_clock_0, , , );
<P><A NAME="N1_q_b[2]_PORT_A_write_enable">N1_q_b[2]_PORT_A_write_enable</A> = <A HREF="#M1_UUWS">M1_UUWS</A>;
<P><A NAME="N1_q_b[2]_PORT_A_write_enable_reg">N1_q_b[2]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N1_q_b[2]_PORT_A_write_enable">N1_q_b[2]_PORT_A_write_enable</A>, N1_q_b[2]_clock_0, , , );
<P><A NAME="N1_q_b[2]_PORT_B_read_enable">N1_q_b[2]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N1_q_b[2]_PORT_B_read_enable_reg">N1_q_b[2]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N1_q_b[2]_PORT_B_read_enable">N1_q_b[2]_PORT_B_read_enable</A>, N1_q_b[2]_clock_0, , , );
<P><A NAME="N1_q_b[2]_clock_0">N1_q_b[2]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N1_q_b[2]_PORT_B_data_out">N1_q_b[2]_PORT_B_data_out</A> = MEMORY(<A HREF="#N1_q_b[2]_PORT_A_data_in_reg">N1_q_b[2]_PORT_A_data_in_reg</A>, , <A HREF="#N1_q_b[2]_PORT_A_address_reg">N1_q_b[2]_PORT_A_address_reg</A>, <A HREF="#N1_q_b[2]_PORT_B_address_reg">N1_q_b[2]_PORT_B_address_reg</A>, <A HREF="#N1_q_b[2]_PORT_A_write_enable_reg">N1_q_b[2]_PORT_A_write_enable_reg</A>, <A HREF="#N1_q_b[2]_PORT_B_read_enable_reg">N1_q_b[2]_PORT_B_read_enable_reg</A>, , , <A HREF="#N1_q_b[2]_clock_0">N1_q_b[2]_clock_0</A>, , , , , );
<P><A NAME="N1_q_b[2]">N1_q_b[2]</A> = <A HREF="#N1_q_b[2]_PORT_B_data_out">N1_q_b[2]_PORT_B_data_out</A>[0];


<P> --N4_q_b[1] is fifo:int_fifo|altsyncram:BUFFER[0][7]__4|altsyncram_4ig1:auto_generated|q_b[1]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N4_q_b[1]_PORT_A_data_in">N4_q_b[1]_PORT_A_data_in</A> = <A HREF="#F1L9">F1L9</A>;
<P><A NAME="N4_q_b[1]_PORT_A_data_in_reg">N4_q_b[1]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N4_q_b[1]_PORT_A_data_in">N4_q_b[1]_PORT_A_data_in</A>, N4_q_b[1]_clock_0, , , );
<P><A NAME="N4_q_b[1]_PORT_A_address">N4_q_b[1]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N4_q_b[1]_PORT_A_address_reg">N4_q_b[1]_PORT_A_address_reg</A> = DFFE(<A HREF="#N4_q_b[1]_PORT_A_address">N4_q_b[1]_PORT_A_address</A>, N4_q_b[1]_clock_0, , , );
<P><A NAME="N4_q_b[1]_PORT_B_address">N4_q_b[1]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N4_q_b[1]_PORT_B_address_reg">N4_q_b[1]_PORT_B_address_reg</A> = DFFE(<A HREF="#N4_q_b[1]_PORT_B_address">N4_q_b[1]_PORT_B_address</A>, N4_q_b[1]_clock_0, , , );
<P><A NAME="N4_q_b[1]_PORT_A_write_enable">N4_q_b[1]_PORT_A_write_enable</A> = <A HREF="#M1_LLWS">M1_LLWS</A>;
<P><A NAME="N4_q_b[1]_PORT_A_write_enable_reg">N4_q_b[1]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N4_q_b[1]_PORT_A_write_enable">N4_q_b[1]_PORT_A_write_enable</A>, N4_q_b[1]_clock_0, , , );
<P><A NAME="N4_q_b[1]_PORT_B_read_enable">N4_q_b[1]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N4_q_b[1]_PORT_B_read_enable_reg">N4_q_b[1]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N4_q_b[1]_PORT_B_read_enable">N4_q_b[1]_PORT_B_read_enable</A>, N4_q_b[1]_clock_0, , , );
<P><A NAME="N4_q_b[1]_clock_0">N4_q_b[1]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N4_q_b[1]_PORT_B_data_out">N4_q_b[1]_PORT_B_data_out</A> = MEMORY(<A HREF="#N4_q_b[1]_PORT_A_data_in_reg">N4_q_b[1]_PORT_A_data_in_reg</A>, , <A HREF="#N4_q_b[1]_PORT_A_address_reg">N4_q_b[1]_PORT_A_address_reg</A>, <A HREF="#N4_q_b[1]_PORT_B_address_reg">N4_q_b[1]_PORT_B_address_reg</A>, <A HREF="#N4_q_b[1]_PORT_A_write_enable_reg">N4_q_b[1]_PORT_A_write_enable_reg</A>, <A HREF="#N4_q_b[1]_PORT_B_read_enable_reg">N4_q_b[1]_PORT_B_read_enable_reg</A>, , , <A HREF="#N4_q_b[1]_clock_0">N4_q_b[1]_clock_0</A>, , , , , );
<P><A NAME="N4_q_b[1]">N4_q_b[1]</A> = <A HREF="#N4_q_b[1]_PORT_B_data_out">N4_q_b[1]_PORT_B_data_out</A>[0];


<P> --N2_q_b[1] is fifo:int_fifo|altsyncram:BUFFER[0][23]__2|altsyncram_4ig1:auto_generated|q_b[1]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N2_q_b[1]_PORT_A_data_in">N2_q_b[1]_PORT_A_data_in</A> = <A HREF="#F1L33">F1L33</A>;
<P><A NAME="N2_q_b[1]_PORT_A_data_in_reg">N2_q_b[1]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N2_q_b[1]_PORT_A_data_in">N2_q_b[1]_PORT_A_data_in</A>, N2_q_b[1]_clock_0, , , );
<P><A NAME="N2_q_b[1]_PORT_A_address">N2_q_b[1]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N2_q_b[1]_PORT_A_address_reg">N2_q_b[1]_PORT_A_address_reg</A> = DFFE(<A HREF="#N2_q_b[1]_PORT_A_address">N2_q_b[1]_PORT_A_address</A>, N2_q_b[1]_clock_0, , , );
<P><A NAME="N2_q_b[1]_PORT_B_address">N2_q_b[1]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N2_q_b[1]_PORT_B_address_reg">N2_q_b[1]_PORT_B_address_reg</A> = DFFE(<A HREF="#N2_q_b[1]_PORT_B_address">N2_q_b[1]_PORT_B_address</A>, N2_q_b[1]_clock_0, , , );
<P><A NAME="N2_q_b[1]_PORT_A_write_enable">N2_q_b[1]_PORT_A_write_enable</A> = <A HREF="#M1_UMWS">M1_UMWS</A>;
<P><A NAME="N2_q_b[1]_PORT_A_write_enable_reg">N2_q_b[1]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N2_q_b[1]_PORT_A_write_enable">N2_q_b[1]_PORT_A_write_enable</A>, N2_q_b[1]_clock_0, , , );
<P><A NAME="N2_q_b[1]_PORT_B_read_enable">N2_q_b[1]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N2_q_b[1]_PORT_B_read_enable_reg">N2_q_b[1]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N2_q_b[1]_PORT_B_read_enable">N2_q_b[1]_PORT_B_read_enable</A>, N2_q_b[1]_clock_0, , , );
<P><A NAME="N2_q_b[1]_clock_0">N2_q_b[1]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N2_q_b[1]_PORT_B_data_out">N2_q_b[1]_PORT_B_data_out</A> = MEMORY(<A HREF="#N2_q_b[1]_PORT_A_data_in_reg">N2_q_b[1]_PORT_A_data_in_reg</A>, , <A HREF="#N2_q_b[1]_PORT_A_address_reg">N2_q_b[1]_PORT_A_address_reg</A>, <A HREF="#N2_q_b[1]_PORT_B_address_reg">N2_q_b[1]_PORT_B_address_reg</A>, <A HREF="#N2_q_b[1]_PORT_A_write_enable_reg">N2_q_b[1]_PORT_A_write_enable_reg</A>, <A HREF="#N2_q_b[1]_PORT_B_read_enable_reg">N2_q_b[1]_PORT_B_read_enable_reg</A>, , , <A HREF="#N2_q_b[1]_clock_0">N2_q_b[1]_clock_0</A>, , , , , );
<P><A NAME="N2_q_b[1]">N2_q_b[1]</A> = <A HREF="#N2_q_b[1]_PORT_B_data_out">N2_q_b[1]_PORT_B_data_out</A>[0];


<P> --N3_q_b[1] is fifo:int_fifo|altsyncram:BUFFER[0][15]__3|altsyncram_4ig1:auto_generated|q_b[1]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N3_q_b[1]_PORT_A_data_in">N3_q_b[1]_PORT_A_data_in</A> = <A HREF="#F1L24">F1L24</A>;
<P><A NAME="N3_q_b[1]_PORT_A_data_in_reg">N3_q_b[1]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N3_q_b[1]_PORT_A_data_in">N3_q_b[1]_PORT_A_data_in</A>, N3_q_b[1]_clock_0, , , );
<P><A NAME="N3_q_b[1]_PORT_A_address">N3_q_b[1]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N3_q_b[1]_PORT_A_address_reg">N3_q_b[1]_PORT_A_address_reg</A> = DFFE(<A HREF="#N3_q_b[1]_PORT_A_address">N3_q_b[1]_PORT_A_address</A>, N3_q_b[1]_clock_0, , , );
<P><A NAME="N3_q_b[1]_PORT_B_address">N3_q_b[1]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N3_q_b[1]_PORT_B_address_reg">N3_q_b[1]_PORT_B_address_reg</A> = DFFE(<A HREF="#N3_q_b[1]_PORT_B_address">N3_q_b[1]_PORT_B_address</A>, N3_q_b[1]_clock_0, , , );
<P><A NAME="N3_q_b[1]_PORT_A_write_enable">N3_q_b[1]_PORT_A_write_enable</A> = <A HREF="#M1_LMWS">M1_LMWS</A>;
<P><A NAME="N3_q_b[1]_PORT_A_write_enable_reg">N3_q_b[1]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N3_q_b[1]_PORT_A_write_enable">N3_q_b[1]_PORT_A_write_enable</A>, N3_q_b[1]_clock_0, , , );
<P><A NAME="N3_q_b[1]_PORT_B_read_enable">N3_q_b[1]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N3_q_b[1]_PORT_B_read_enable_reg">N3_q_b[1]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N3_q_b[1]_PORT_B_read_enable">N3_q_b[1]_PORT_B_read_enable</A>, N3_q_b[1]_clock_0, , , );
<P><A NAME="N3_q_b[1]_clock_0">N3_q_b[1]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N3_q_b[1]_PORT_B_data_out">N3_q_b[1]_PORT_B_data_out</A> = MEMORY(<A HREF="#N3_q_b[1]_PORT_A_data_in_reg">N3_q_b[1]_PORT_A_data_in_reg</A>, , <A HREF="#N3_q_b[1]_PORT_A_address_reg">N3_q_b[1]_PORT_A_address_reg</A>, <A HREF="#N3_q_b[1]_PORT_B_address_reg">N3_q_b[1]_PORT_B_address_reg</A>, <A HREF="#N3_q_b[1]_PORT_A_write_enable_reg">N3_q_b[1]_PORT_A_write_enable_reg</A>, <A HREF="#N3_q_b[1]_PORT_B_read_enable_reg">N3_q_b[1]_PORT_B_read_enable_reg</A>, , , <A HREF="#N3_q_b[1]_clock_0">N3_q_b[1]_clock_0</A>, , , , , );
<P><A NAME="N3_q_b[1]">N3_q_b[1]</A> = <A HREF="#N3_q_b[1]_PORT_B_data_out">N3_q_b[1]_PORT_B_data_out</A>[0];


<P> --N1_q_b[1] is fifo:int_fifo|altsyncram:BUFFER[0][31]__1|altsyncram_4ig1:auto_generated|q_b[1]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N1_q_b[1]_PORT_A_data_in">N1_q_b[1]_PORT_A_data_in</A> = <A HREF="#F1L41">F1L41</A>;
<P><A NAME="N1_q_b[1]_PORT_A_data_in_reg">N1_q_b[1]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N1_q_b[1]_PORT_A_data_in">N1_q_b[1]_PORT_A_data_in</A>, N1_q_b[1]_clock_0, , , );
<P><A NAME="N1_q_b[1]_PORT_A_address">N1_q_b[1]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N1_q_b[1]_PORT_A_address_reg">N1_q_b[1]_PORT_A_address_reg</A> = DFFE(<A HREF="#N1_q_b[1]_PORT_A_address">N1_q_b[1]_PORT_A_address</A>, N1_q_b[1]_clock_0, , , );
<P><A NAME="N1_q_b[1]_PORT_B_address">N1_q_b[1]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N1_q_b[1]_PORT_B_address_reg">N1_q_b[1]_PORT_B_address_reg</A> = DFFE(<A HREF="#N1_q_b[1]_PORT_B_address">N1_q_b[1]_PORT_B_address</A>, N1_q_b[1]_clock_0, , , );
<P><A NAME="N1_q_b[1]_PORT_A_write_enable">N1_q_b[1]_PORT_A_write_enable</A> = <A HREF="#M1_UUWS">M1_UUWS</A>;
<P><A NAME="N1_q_b[1]_PORT_A_write_enable_reg">N1_q_b[1]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N1_q_b[1]_PORT_A_write_enable">N1_q_b[1]_PORT_A_write_enable</A>, N1_q_b[1]_clock_0, , , );
<P><A NAME="N1_q_b[1]_PORT_B_read_enable">N1_q_b[1]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N1_q_b[1]_PORT_B_read_enable_reg">N1_q_b[1]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N1_q_b[1]_PORT_B_read_enable">N1_q_b[1]_PORT_B_read_enable</A>, N1_q_b[1]_clock_0, , , );
<P><A NAME="N1_q_b[1]_clock_0">N1_q_b[1]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N1_q_b[1]_PORT_B_data_out">N1_q_b[1]_PORT_B_data_out</A> = MEMORY(<A HREF="#N1_q_b[1]_PORT_A_data_in_reg">N1_q_b[1]_PORT_A_data_in_reg</A>, , <A HREF="#N1_q_b[1]_PORT_A_address_reg">N1_q_b[1]_PORT_A_address_reg</A>, <A HREF="#N1_q_b[1]_PORT_B_address_reg">N1_q_b[1]_PORT_B_address_reg</A>, <A HREF="#N1_q_b[1]_PORT_A_write_enable_reg">N1_q_b[1]_PORT_A_write_enable_reg</A>, <A HREF="#N1_q_b[1]_PORT_B_read_enable_reg">N1_q_b[1]_PORT_B_read_enable_reg</A>, , , <A HREF="#N1_q_b[1]_clock_0">N1_q_b[1]_clock_0</A>, , , , , );
<P><A NAME="N1_q_b[1]">N1_q_b[1]</A> = <A HREF="#N1_q_b[1]_PORT_B_data_out">N1_q_b[1]_PORT_B_data_out</A>[0];


<P> --N4_q_b[0] is fifo:int_fifo|altsyncram:BUFFER[0][7]__4|altsyncram_4ig1:auto_generated|q_b[0]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N4_q_b[0]_PORT_A_data_in">N4_q_b[0]_PORT_A_data_in</A> = <A HREF="#F1L10">F1L10</A>;
<P><A NAME="N4_q_b[0]_PORT_A_data_in_reg">N4_q_b[0]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N4_q_b[0]_PORT_A_data_in">N4_q_b[0]_PORT_A_data_in</A>, N4_q_b[0]_clock_0, , , );
<P><A NAME="N4_q_b[0]_PORT_A_address">N4_q_b[0]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N4_q_b[0]_PORT_A_address_reg">N4_q_b[0]_PORT_A_address_reg</A> = DFFE(<A HREF="#N4_q_b[0]_PORT_A_address">N4_q_b[0]_PORT_A_address</A>, N4_q_b[0]_clock_0, , , );
<P><A NAME="N4_q_b[0]_PORT_B_address">N4_q_b[0]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N4_q_b[0]_PORT_B_address_reg">N4_q_b[0]_PORT_B_address_reg</A> = DFFE(<A HREF="#N4_q_b[0]_PORT_B_address">N4_q_b[0]_PORT_B_address</A>, N4_q_b[0]_clock_0, , , );
<P><A NAME="N4_q_b[0]_PORT_A_write_enable">N4_q_b[0]_PORT_A_write_enable</A> = <A HREF="#M1_LLWS">M1_LLWS</A>;
<P><A NAME="N4_q_b[0]_PORT_A_write_enable_reg">N4_q_b[0]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N4_q_b[0]_PORT_A_write_enable">N4_q_b[0]_PORT_A_write_enable</A>, N4_q_b[0]_clock_0, , , );
<P><A NAME="N4_q_b[0]_PORT_B_read_enable">N4_q_b[0]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N4_q_b[0]_PORT_B_read_enable_reg">N4_q_b[0]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N4_q_b[0]_PORT_B_read_enable">N4_q_b[0]_PORT_B_read_enable</A>, N4_q_b[0]_clock_0, , , );
<P><A NAME="N4_q_b[0]_clock_0">N4_q_b[0]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N4_q_b[0]_PORT_B_data_out">N4_q_b[0]_PORT_B_data_out</A> = MEMORY(<A HREF="#N4_q_b[0]_PORT_A_data_in_reg">N4_q_b[0]_PORT_A_data_in_reg</A>, , <A HREF="#N4_q_b[0]_PORT_A_address_reg">N4_q_b[0]_PORT_A_address_reg</A>, <A HREF="#N4_q_b[0]_PORT_B_address_reg">N4_q_b[0]_PORT_B_address_reg</A>, <A HREF="#N4_q_b[0]_PORT_A_write_enable_reg">N4_q_b[0]_PORT_A_write_enable_reg</A>, <A HREF="#N4_q_b[0]_PORT_B_read_enable_reg">N4_q_b[0]_PORT_B_read_enable_reg</A>, , , <A HREF="#N4_q_b[0]_clock_0">N4_q_b[0]_clock_0</A>, , , , , );
<P><A NAME="N4_q_b[0]">N4_q_b[0]</A> = <A HREF="#N4_q_b[0]_PORT_B_data_out">N4_q_b[0]_PORT_B_data_out</A>[0];


<P> --N2_q_b[0] is fifo:int_fifo|altsyncram:BUFFER[0][23]__2|altsyncram_4ig1:auto_generated|q_b[0]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N2_q_b[0]_PORT_A_data_in">N2_q_b[0]_PORT_A_data_in</A> = <A HREF="#F1L34">F1L34</A>;
<P><A NAME="N2_q_b[0]_PORT_A_data_in_reg">N2_q_b[0]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N2_q_b[0]_PORT_A_data_in">N2_q_b[0]_PORT_A_data_in</A>, N2_q_b[0]_clock_0, , , );
<P><A NAME="N2_q_b[0]_PORT_A_address">N2_q_b[0]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N2_q_b[0]_PORT_A_address_reg">N2_q_b[0]_PORT_A_address_reg</A> = DFFE(<A HREF="#N2_q_b[0]_PORT_A_address">N2_q_b[0]_PORT_A_address</A>, N2_q_b[0]_clock_0, , , );
<P><A NAME="N2_q_b[0]_PORT_B_address">N2_q_b[0]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N2_q_b[0]_PORT_B_address_reg">N2_q_b[0]_PORT_B_address_reg</A> = DFFE(<A HREF="#N2_q_b[0]_PORT_B_address">N2_q_b[0]_PORT_B_address</A>, N2_q_b[0]_clock_0, , , );
<P><A NAME="N2_q_b[0]_PORT_A_write_enable">N2_q_b[0]_PORT_A_write_enable</A> = <A HREF="#M1_UMWS">M1_UMWS</A>;
<P><A NAME="N2_q_b[0]_PORT_A_write_enable_reg">N2_q_b[0]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N2_q_b[0]_PORT_A_write_enable">N2_q_b[0]_PORT_A_write_enable</A>, N2_q_b[0]_clock_0, , , );
<P><A NAME="N2_q_b[0]_PORT_B_read_enable">N2_q_b[0]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N2_q_b[0]_PORT_B_read_enable_reg">N2_q_b[0]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N2_q_b[0]_PORT_B_read_enable">N2_q_b[0]_PORT_B_read_enable</A>, N2_q_b[0]_clock_0, , , );
<P><A NAME="N2_q_b[0]_clock_0">N2_q_b[0]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N2_q_b[0]_PORT_B_data_out">N2_q_b[0]_PORT_B_data_out</A> = MEMORY(<A HREF="#N2_q_b[0]_PORT_A_data_in_reg">N2_q_b[0]_PORT_A_data_in_reg</A>, , <A HREF="#N2_q_b[0]_PORT_A_address_reg">N2_q_b[0]_PORT_A_address_reg</A>, <A HREF="#N2_q_b[0]_PORT_B_address_reg">N2_q_b[0]_PORT_B_address_reg</A>, <A HREF="#N2_q_b[0]_PORT_A_write_enable_reg">N2_q_b[0]_PORT_A_write_enable_reg</A>, <A HREF="#N2_q_b[0]_PORT_B_read_enable_reg">N2_q_b[0]_PORT_B_read_enable_reg</A>, , , <A HREF="#N2_q_b[0]_clock_0">N2_q_b[0]_clock_0</A>, , , , , );
<P><A NAME="N2_q_b[0]">N2_q_b[0]</A> = <A HREF="#N2_q_b[0]_PORT_B_data_out">N2_q_b[0]_PORT_B_data_out</A>[0];


<P> --N3_q_b[0] is fifo:int_fifo|altsyncram:BUFFER[0][15]__3|altsyncram_4ig1:auto_generated|q_b[0]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N3_q_b[0]_PORT_A_data_in">N3_q_b[0]_PORT_A_data_in</A> = <A HREF="#F1L26">F1L26</A>;
<P><A NAME="N3_q_b[0]_PORT_A_data_in_reg">N3_q_b[0]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N3_q_b[0]_PORT_A_data_in">N3_q_b[0]_PORT_A_data_in</A>, N3_q_b[0]_clock_0, , , );
<P><A NAME="N3_q_b[0]_PORT_A_address">N3_q_b[0]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N3_q_b[0]_PORT_A_address_reg">N3_q_b[0]_PORT_A_address_reg</A> = DFFE(<A HREF="#N3_q_b[0]_PORT_A_address">N3_q_b[0]_PORT_A_address</A>, N3_q_b[0]_clock_0, , , );
<P><A NAME="N3_q_b[0]_PORT_B_address">N3_q_b[0]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N3_q_b[0]_PORT_B_address_reg">N3_q_b[0]_PORT_B_address_reg</A> = DFFE(<A HREF="#N3_q_b[0]_PORT_B_address">N3_q_b[0]_PORT_B_address</A>, N3_q_b[0]_clock_0, , , );
<P><A NAME="N3_q_b[0]_PORT_A_write_enable">N3_q_b[0]_PORT_A_write_enable</A> = <A HREF="#M1_LMWS">M1_LMWS</A>;
<P><A NAME="N3_q_b[0]_PORT_A_write_enable_reg">N3_q_b[0]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N3_q_b[0]_PORT_A_write_enable">N3_q_b[0]_PORT_A_write_enable</A>, N3_q_b[0]_clock_0, , , );
<P><A NAME="N3_q_b[0]_PORT_B_read_enable">N3_q_b[0]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N3_q_b[0]_PORT_B_read_enable_reg">N3_q_b[0]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N3_q_b[0]_PORT_B_read_enable">N3_q_b[0]_PORT_B_read_enable</A>, N3_q_b[0]_clock_0, , , );
<P><A NAME="N3_q_b[0]_clock_0">N3_q_b[0]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N3_q_b[0]_PORT_B_data_out">N3_q_b[0]_PORT_B_data_out</A> = MEMORY(<A HREF="#N3_q_b[0]_PORT_A_data_in_reg">N3_q_b[0]_PORT_A_data_in_reg</A>, , <A HREF="#N3_q_b[0]_PORT_A_address_reg">N3_q_b[0]_PORT_A_address_reg</A>, <A HREF="#N3_q_b[0]_PORT_B_address_reg">N3_q_b[0]_PORT_B_address_reg</A>, <A HREF="#N3_q_b[0]_PORT_A_write_enable_reg">N3_q_b[0]_PORT_A_write_enable_reg</A>, <A HREF="#N3_q_b[0]_PORT_B_read_enable_reg">N3_q_b[0]_PORT_B_read_enable_reg</A>, , , <A HREF="#N3_q_b[0]_clock_0">N3_q_b[0]_clock_0</A>, , , , , );
<P><A NAME="N3_q_b[0]">N3_q_b[0]</A> = <A HREF="#N3_q_b[0]_PORT_B_data_out">N3_q_b[0]_PORT_B_data_out</A>[0];


<P> --N1_q_b[0] is fifo:int_fifo|altsyncram:BUFFER[0][31]__1|altsyncram_4ig1:auto_generated|q_b[0]
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 8, Port B Logical Depth: 8, Port B Logical Width: 8
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="N1_q_b[0]_PORT_A_data_in">N1_q_b[0]_PORT_A_data_in</A> = <A HREF="#F1L42">F1L42</A>;
<P><A NAME="N1_q_b[0]_PORT_A_data_in_reg">N1_q_b[0]_PORT_A_data_in_reg</A> = DFFE(<A HREF="#N1_q_b[0]_PORT_A_data_in">N1_q_b[0]_PORT_A_data_in</A>, N1_q_b[0]_clock_0, , , );
<P><A NAME="N1_q_b[0]_PORT_A_address">N1_q_b[0]_PORT_A_address</A> = BUS(<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>, <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>, <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A>);
<P><A NAME="N1_q_b[0]_PORT_A_address_reg">N1_q_b[0]_PORT_A_address_reg</A> = DFFE(<A HREF="#N1_q_b[0]_PORT_A_address">N1_q_b[0]_PORT_A_address</A>, N1_q_b[0]_clock_0, , , );
<P><A NAME="N1_q_b[0]_PORT_B_address">N1_q_b[0]_PORT_B_address</A> = BUS(<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>, <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>, <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A>);
<P><A NAME="N1_q_b[0]_PORT_B_address_reg">N1_q_b[0]_PORT_B_address_reg</A> = DFFE(<A HREF="#N1_q_b[0]_PORT_B_address">N1_q_b[0]_PORT_B_address</A>, N1_q_b[0]_clock_0, , , );
<P><A NAME="N1_q_b[0]_PORT_A_write_enable">N1_q_b[0]_PORT_A_write_enable</A> = <A HREF="#M1_UUWS">M1_UUWS</A>;
<P><A NAME="N1_q_b[0]_PORT_A_write_enable_reg">N1_q_b[0]_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#N1_q_b[0]_PORT_A_write_enable">N1_q_b[0]_PORT_A_write_enable</A>, N1_q_b[0]_clock_0, , , );
<P><A NAME="N1_q_b[0]_PORT_B_read_enable">N1_q_b[0]_PORT_B_read_enable</A> = VCC;
<P><A NAME="N1_q_b[0]_PORT_B_read_enable_reg">N1_q_b[0]_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#N1_q_b[0]_PORT_B_read_enable">N1_q_b[0]_PORT_B_read_enable</A>, N1_q_b[0]_clock_0, , , );
<P><A NAME="N1_q_b[0]_clock_0">N1_q_b[0]_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="N1_q_b[0]_PORT_B_data_out">N1_q_b[0]_PORT_B_data_out</A> = MEMORY(<A HREF="#N1_q_b[0]_PORT_A_data_in_reg">N1_q_b[0]_PORT_A_data_in_reg</A>, , <A HREF="#N1_q_b[0]_PORT_A_address_reg">N1_q_b[0]_PORT_A_address_reg</A>, <A HREF="#N1_q_b[0]_PORT_B_address_reg">N1_q_b[0]_PORT_B_address_reg</A>, <A HREF="#N1_q_b[0]_PORT_A_write_enable_reg">N1_q_b[0]_PORT_A_write_enable_reg</A>, <A HREF="#N1_q_b[0]_PORT_B_read_enable_reg">N1_q_b[0]_PORT_B_read_enable_reg</A>, , , <A HREF="#N1_q_b[0]_clock_0">N1_q_b[0]_clock_0</A>, , , , , );
<P><A NAME="N1_q_b[0]">N1_q_b[0]</A> = <A HREF="#N1_q_b[0]_PORT_B_data_out">N1_q_b[0]_PORT_B_data_out</A>[0];


<P> --INT is INT
<P><A NAME="INT">INT</A> = OUTPUT(<A HREF="#GB1L10">GB1L10</A>);


<P> --_SIZ1 is _SIZ1
<P><A NAME="_SIZ1">_SIZ1</A> = OUTPUT(<A HREF="#A1L151">A1L151</A>);


<P> --DSACK_O[0] is DSACK_O[0]
<P><A NAME="DSACK_O[0]">DSACK_O[0]</A> = OUTPUT(<A HREF="#A1L84">A1L84</A>);


<P> --DSACK_O[1] is DSACK_O[1]
<P><A NAME="DSACK_O[1]">DSACK_O[1]</A> = OUTPUT(<A HREF="#A1L84">A1L84</A>);


<P> --BR is BR
<P><A NAME="BR">BR</A> = OUTPUT(<A HREF="#C1_BREQ">C1_BREQ</A>);


<P> --_DMAEN is _DMAEN
<P><A NAME="_DMAEN">_DMAEN</A> = OUTPUT(<A HREF="#C1L2">C1L2</A>);


<P> --_DACK is _DACK
<P><A NAME="_DACK">_DACK</A> = OUTPUT(<A HREF="#E1L7">E1L7</A>);


<P> --_CSS is _CSS
<P><A NAME="_CSS">_CSS</A> = OUTPUT(<A HREF="#E1L23">E1L23</A>);


<P> --_IOR is _IOR
<P><A NAME="_IOR">_IOR</A> = OUTPUT(<A HREF="#A1L140">A1L140</A>);


<P> --_IOW is _IOW
<P><A NAME="_IOW">_IOW</A> = OUTPUT(<A HREF="#A1L143">A1L143</A>);


<P> --_LED_RD is _LED_RD
<P><A NAME="_LED_RD">_LED_RD</A> = OUTPUT(<A HREF="#A1L146">A1L146</A>);


<P> --_LED_WR is _LED_WR
<P><A NAME="_LED_WR">_LED_WR</A> = OUTPUT(<A HREF="#A1L148">A1L148</A>);


<P> --_LED_DMA is _LED_DMA
<P><A NAME="_LED_DMA">_LED_DMA</A> = OUTPUT(<A HREF="#C1L2">C1L2</A>);


<P> --OWN is OWN
<P><A NAME="OWN">OWN</A> = OUTPUT(<A HREF="#C1_BGACK">C1_BGACK</A>);


<P> --DATA_OE_ is DATA_OE_
<P><A NAME="DATA_OE_">DATA_OE_</A> = OUTPUT(<A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);


<P> --PDATA_OE_ is PDATA_OE_
<P><A NAME="PDATA_OE_">PDATA_OE_</A> = OUTPUT(<A HREF="#A1L96">A1L96</A>);


<P> --R_W_IO is R_W_IO
<P><A NAME="R_W_IO">R_W_IO</A> = BIDIR(<A HREF="#R_W_IO">R_W_IO</A>);


<P> --_AS_IO is _AS_IO
<P><A NAME="_AS_IO">_AS_IO</A> = BIDIR(<A HREF="#_AS_IO">_AS_IO</A>);


<P> --_DS_IO is _DS_IO
<P><A NAME="_DS_IO">_DS_IO</A> = BIDIR(<A HREF="#_DS_IO">_DS_IO</A>);


<P> --DATA_IO[0] is DATA_IO[0]
<P><A NAME="DATA_IO[0]">DATA_IO[0]</A> = BIDIR(<A HREF="#DATA_IO[0]">DATA_IO[0]</A>);


<P> --DATA_IO[1] is DATA_IO[1]
<P><A NAME="DATA_IO[1]">DATA_IO[1]</A> = BIDIR(<A HREF="#DATA_IO[1]">DATA_IO[1]</A>);


<P> --DATA_IO[2] is DATA_IO[2]
<P><A NAME="DATA_IO[2]">DATA_IO[2]</A> = BIDIR(<A HREF="#DATA_IO[2]">DATA_IO[2]</A>);


<P> --DATA_IO[3] is DATA_IO[3]
<P><A NAME="DATA_IO[3]">DATA_IO[3]</A> = BIDIR(<A HREF="#DATA_IO[3]">DATA_IO[3]</A>);


<P> --DATA_IO[4] is DATA_IO[4]
<P><A NAME="DATA_IO[4]">DATA_IO[4]</A> = BIDIR(<A HREF="#DATA_IO[4]">DATA_IO[4]</A>);


<P> --DATA_IO[5] is DATA_IO[5]
<P><A NAME="DATA_IO[5]">DATA_IO[5]</A> = BIDIR(<A HREF="#DATA_IO[5]">DATA_IO[5]</A>);


<P> --DATA_IO[6] is DATA_IO[6]
<P><A NAME="DATA_IO[6]">DATA_IO[6]</A> = BIDIR(<A HREF="#DATA_IO[6]">DATA_IO[6]</A>);


<P> --DATA_IO[7] is DATA_IO[7]
<P><A NAME="DATA_IO[7]">DATA_IO[7]</A> = BIDIR(<A HREF="#DATA_IO[7]">DATA_IO[7]</A>);


<P> --DATA_IO[8] is DATA_IO[8]
<P><A NAME="DATA_IO[8]">DATA_IO[8]</A> = BIDIR(<A HREF="#DATA_IO[8]">DATA_IO[8]</A>);


<P> --DATA_IO[9] is DATA_IO[9]
<P><A NAME="DATA_IO[9]">DATA_IO[9]</A> = BIDIR(<A HREF="#DATA_IO[9]">DATA_IO[9]</A>);


<P> --DATA_IO[10] is DATA_IO[10]
<P><A NAME="DATA_IO[10]">DATA_IO[10]</A> = BIDIR(<A HREF="#DATA_IO[10]">DATA_IO[10]</A>);


<P> --DATA_IO[11] is DATA_IO[11]
<P><A NAME="DATA_IO[11]">DATA_IO[11]</A> = BIDIR(<A HREF="#DATA_IO[11]">DATA_IO[11]</A>);


<P> --DATA_IO[12] is DATA_IO[12]
<P><A NAME="DATA_IO[12]">DATA_IO[12]</A> = BIDIR(<A HREF="#DATA_IO[12]">DATA_IO[12]</A>);


<P> --DATA_IO[13] is DATA_IO[13]
<P><A NAME="DATA_IO[13]">DATA_IO[13]</A> = BIDIR(<A HREF="#DATA_IO[13]">DATA_IO[13]</A>);


<P> --DATA_IO[14] is DATA_IO[14]
<P><A NAME="DATA_IO[14]">DATA_IO[14]</A> = BIDIR(<A HREF="#DATA_IO[14]">DATA_IO[14]</A>);


<P> --DATA_IO[15] is DATA_IO[15]
<P><A NAME="DATA_IO[15]">DATA_IO[15]</A> = BIDIR(<A HREF="#DATA_IO[15]">DATA_IO[15]</A>);


<P> --DATA_IO[16] is DATA_IO[16]
<P><A NAME="DATA_IO[16]">DATA_IO[16]</A> = BIDIR(<A HREF="#DATA_IO[16]">DATA_IO[16]</A>);


<P> --DATA_IO[17] is DATA_IO[17]
<P><A NAME="DATA_IO[17]">DATA_IO[17]</A> = BIDIR(<A HREF="#DATA_IO[17]">DATA_IO[17]</A>);


<P> --DATA_IO[18] is DATA_IO[18]
<P><A NAME="DATA_IO[18]">DATA_IO[18]</A> = BIDIR(<A HREF="#DATA_IO[18]">DATA_IO[18]</A>);


<P> --DATA_IO[19] is DATA_IO[19]
<P><A NAME="DATA_IO[19]">DATA_IO[19]</A> = BIDIR(<A HREF="#DATA_IO[19]">DATA_IO[19]</A>);


<P> --DATA_IO[20] is DATA_IO[20]
<P><A NAME="DATA_IO[20]">DATA_IO[20]</A> = BIDIR(<A HREF="#DATA_IO[20]">DATA_IO[20]</A>);


<P> --DATA_IO[21] is DATA_IO[21]
<P><A NAME="DATA_IO[21]">DATA_IO[21]</A> = BIDIR(<A HREF="#DATA_IO[21]">DATA_IO[21]</A>);


<P> --DATA_IO[22] is DATA_IO[22]
<P><A NAME="DATA_IO[22]">DATA_IO[22]</A> = BIDIR(<A HREF="#DATA_IO[22]">DATA_IO[22]</A>);


<P> --DATA_IO[23] is DATA_IO[23]
<P><A NAME="DATA_IO[23]">DATA_IO[23]</A> = BIDIR(<A HREF="#DATA_IO[23]">DATA_IO[23]</A>);


<P> --DATA_IO[24] is DATA_IO[24]
<P><A NAME="DATA_IO[24]">DATA_IO[24]</A> = BIDIR(<A HREF="#DATA_IO[24]">DATA_IO[24]</A>);


<P> --DATA_IO[25] is DATA_IO[25]
<P><A NAME="DATA_IO[25]">DATA_IO[25]</A> = BIDIR(<A HREF="#DATA_IO[25]">DATA_IO[25]</A>);


<P> --DATA_IO[26] is DATA_IO[26]
<P><A NAME="DATA_IO[26]">DATA_IO[26]</A> = BIDIR(<A HREF="#DATA_IO[26]">DATA_IO[26]</A>);


<P> --DATA_IO[27] is DATA_IO[27]
<P><A NAME="DATA_IO[27]">DATA_IO[27]</A> = BIDIR(<A HREF="#DATA_IO[27]">DATA_IO[27]</A>);


<P> --DATA_IO[28] is DATA_IO[28]
<P><A NAME="DATA_IO[28]">DATA_IO[28]</A> = BIDIR(<A HREF="#DATA_IO[28]">DATA_IO[28]</A>);


<P> --DATA_IO[29] is DATA_IO[29]
<P><A NAME="DATA_IO[29]">DATA_IO[29]</A> = BIDIR(<A HREF="#DATA_IO[29]">DATA_IO[29]</A>);


<P> --DATA_IO[30] is DATA_IO[30]
<P><A NAME="DATA_IO[30]">DATA_IO[30]</A> = BIDIR(<A HREF="#DATA_IO[30]">DATA_IO[30]</A>);


<P> --DATA_IO[31] is DATA_IO[31]
<P><A NAME="DATA_IO[31]">DATA_IO[31]</A> = BIDIR(<A HREF="#DATA_IO[31]">DATA_IO[31]</A>);


<P> --_BGACK_IO is _BGACK_IO
<P><A NAME="_BGACK_IO">_BGACK_IO</A> = BIDIR(<A HREF="#_BGACK_IO">_BGACK_IO</A>);


<P> --PD_PORT[0] is PD_PORT[0]
<P><A NAME="PD_PORT[0]">PD_PORT[0]</A> = BIDIR(<A HREF="#PD_PORT[0]">PD_PORT[0]</A>);


<P> --PD_PORT[1] is PD_PORT[1]
<P><A NAME="PD_PORT[1]">PD_PORT[1]</A> = BIDIR(<A HREF="#PD_PORT[1]">PD_PORT[1]</A>);


<P> --PD_PORT[2] is PD_PORT[2]
<P><A NAME="PD_PORT[2]">PD_PORT[2]</A> = BIDIR(<A HREF="#PD_PORT[2]">PD_PORT[2]</A>);


<P> --PD_PORT[3] is PD_PORT[3]
<P><A NAME="PD_PORT[3]">PD_PORT[3]</A> = BIDIR(<A HREF="#PD_PORT[3]">PD_PORT[3]</A>);


<P> --PD_PORT[4] is PD_PORT[4]
<P><A NAME="PD_PORT[4]">PD_PORT[4]</A> = BIDIR(<A HREF="#PD_PORT[4]">PD_PORT[4]</A>);


<P> --PD_PORT[5] is PD_PORT[5]
<P><A NAME="PD_PORT[5]">PD_PORT[5]</A> = BIDIR(<A HREF="#PD_PORT[5]">PD_PORT[5]</A>);


<P> --PD_PORT[6] is PD_PORT[6]
<P><A NAME="PD_PORT[6]">PD_PORT[6]</A> = BIDIR(<A HREF="#PD_PORT[6]">PD_PORT[6]</A>);


<P> --PD_PORT[7] is PD_PORT[7]
<P><A NAME="PD_PORT[7]">PD_PORT[7]</A> = BIDIR(<A HREF="#PD_PORT[7]">PD_PORT[7]</A>);


<P> --PD_PORT[8] is PD_PORT[8]
<P><A NAME="PD_PORT[8]">PD_PORT[8]</A> = BIDIR(<A HREF="#PD_PORT[8]">PD_PORT[8]</A>);


<P> --PD_PORT[9] is PD_PORT[9]
<P><A NAME="PD_PORT[9]">PD_PORT[9]</A> = BIDIR(<A HREF="#PD_PORT[9]">PD_PORT[9]</A>);


<P> --PD_PORT[10] is PD_PORT[10]
<P><A NAME="PD_PORT[10]">PD_PORT[10]</A> = BIDIR(<A HREF="#PD_PORT[10]">PD_PORT[10]</A>);


<P> --PD_PORT[11] is PD_PORT[11]
<P><A NAME="PD_PORT[11]">PD_PORT[11]</A> = BIDIR(<A HREF="#PD_PORT[11]">PD_PORT[11]</A>);


<P> --PD_PORT[12] is PD_PORT[12]
<P><A NAME="PD_PORT[12]">PD_PORT[12]</A> = BIDIR(<A HREF="#PD_PORT[12]">PD_PORT[12]</A>);


<P> --PD_PORT[13] is PD_PORT[13]
<P><A NAME="PD_PORT[13]">PD_PORT[13]</A> = BIDIR(<A HREF="#PD_PORT[13]">PD_PORT[13]</A>);


<P> --PD_PORT[14] is PD_PORT[14]
<P><A NAME="PD_PORT[14]">PD_PORT[14]</A> = BIDIR(<A HREF="#PD_PORT[14]">PD_PORT[14]</A>);


<P> --PD_PORT[15] is PD_PORT[15]
<P><A NAME="PD_PORT[15]">PD_PORT[15]</A> = BIDIR(<A HREF="#PD_PORT[15]">PD_PORT[15]</A>);


<P> --GB1_INT_O_ is registers:u_registers|registers_istr:u_registers_istr|INT_O_
<P><A NAME="GB1_INT_O_">GB1_INT_O_</A> = DFFEAS(<A HREF="#GB1_INT">GB1_INT</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --C1_BGACK is CPU_SM:u_CPU_SM|BGACK
<P><A NAME="C1_BGACK">C1_BGACK</A> = DFFEAS(<A HREF="#Q1L3">Q1L3</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_SIZE1 is CPU_SM:u_CPU_SM|SIZE1
<P><A NAME="C1_SIZE1">C1_SIZE1</A> = DFFEAS(<A HREF="#Q1L66">Q1L66</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --A1L151 is _SIZ1~0
<P><A NAME="A1L151">A1L151</A> = (!<A HREF="#C1_SIZE1">C1_SIZE1</A>) # (!<A HREF="#C1_BGACK">C1_BGACK</A>);


<P> --HB1_REG_DSK_ is registers:u_registers|registers_term:u_registers_term|REG_DSK_
<P><A NAME="HB1_REG_DSK_">HB1_REG_DSK_</A> = DFFEAS(<A HREF="#HB1L4">HB1L4</A>, <A HREF="#X1__clk0">X1__clk0</A>, !<A HREF="#A1L126">A1L126</A>,  ,  ,  ,  ,  ,  );


<P> --E1_nLS2CPU is SCSI_SM:u_SCSI_SM|nLS2CPU
<P><A NAME="E1_nLS2CPU">E1_nLS2CPU</A> = DFFEAS(<A HREF="#E1L26">E1L26</A>, <A HREF="#X1__clk2">X1__clk2</A>, !<A HREF="#A1L126">A1L126</A>,  ,  ,  ,  ,  ,  );


<P> --A1L83 is DSACK_O~0
<P><A NAME="A1L83">A1L83</A> = (!<A HREF="#HB1_REG_DSK_">HB1_REG_DSK_</A> & !<A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>);


<P> --C1_BREQ is CPU_SM:u_CPU_SM|BREQ
<P><A NAME="C1_BREQ">C1_BREQ</A> = DFFEAS(<A HREF="#Q1L68">Q1L68</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_DACK_o is SCSI_SM:u_SCSI_SM|DACK_o
<P><A NAME="E1_DACK_o">E1_DACK_o</A> = DFFEAS(<A HREF="#Y1L7">Y1L7</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --E1_SCSI_CS_o is SCSI_SM:u_SCSI_SM|SCSI_CS_o
<P><A NAME="E1_SCSI_CS_o">E1_SCSI_CS_o</A> = DFFEAS(<A HREF="#Y1_WideOr30">Y1_WideOr30</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --FB1_CNTR_O[4] is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[4]
<P><A NAME="FB1_CNTR_O[4]">FB1_CNTR_O[4]</A> = DFFEAS(<A HREF="#FB1L7">FB1L7</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --E1_RE_o is SCSI_SM:u_SCSI_SM|RE_o
<P><A NAME="E1_RE_o">E1_RE_o</A> = DFFEAS(<A HREF="#Y1L20">Y1L20</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --A1L139 is _IOR~0
<P><A NAME="A1L139">A1L139</A> = (<A HREF="#FB1_CNTR_O[4]">FB1_CNTR_O[4]</A>) # (<A HREF="#E1_RE_o">E1_RE_o</A>);


<P> --E1_WE_o is SCSI_SM:u_SCSI_SM|WE_o
<P><A NAME="E1_WE_o">E1_WE_o</A> = DFFEAS(<A HREF="#Y1L18">Y1L18</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --A1L142 is _IOW~0
<P><A NAME="A1L142">A1L142</A> = (<A HREF="#FB1_CNTR_O[4]">FB1_CNTR_O[4]</A>) # (<A HREF="#E1_WE_o">E1_WE_o</A>);


<P> --_CS is _CS
<P><A NAME="_CS">_CS</A> = INPUT();


<P> --FB1L9 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~0
<P><A NAME="FB1L9">FB1L9</A> = (!<A HREF="#_CS">_CS</A> & !<A HREF="#A1L126">A1L126</A>);


<P> --FB1_CNTR_O[1] is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[1]
<P><A NAME="FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> = DFFEAS(<A HREF="#FB1L3">FB1L3</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --A1L146 is _LED_RD~0
<P><A NAME="A1L146">A1L146</A> = (<A HREF="#C1_BGACK">C1_BGACK</A> & (((!<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A>)))) # (!<A HREF="#C1_BGACK">C1_BGACK</A> & (((!<A HREF="#FB1L9">FB1L9</A>)) # (!<A HREF="#A1L123">A1L123</A>)));


<P> --A1L148 is _LED_WR~0
<P><A NAME="A1L148">A1L148</A> = (<A HREF="#C1_BGACK">C1_BGACK</A> & (<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A>)) # (!<A HREF="#C1_BGACK">C1_BGACK</A> & (((<A HREF="#A1L123">A1L123</A>) # (!<A HREF="#FB1L9">FB1L9</A>))));


<P> --F1L2 is datapath:u_datapath|DOEL_~0
<P><A NAME="F1L2">F1L2</A> = (<A HREF="#C1_BGACK">C1_BGACK</A> & <A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A>);


<P> --F1_DATA_OE_ is datapath:u_datapath|DATA_OE_
<P><A NAME="F1_DATA_OE_">F1_DATA_OE_</A> = (<A HREF="#F1L2">F1L2</A>) # ((<A HREF="#A1L123">A1L123</A> & (!<A HREF="#_CS">_CS</A> & !<A HREF="#A1L137">A1L137</A>)));


<P> --A1L95 is PDATA_OE_~0
<P><A NAME="A1L95">A1L95</A> = (<A HREF="#E1_DACK_o">E1_DACK_o</A>) # (<A HREF="#E1_SCSI_CS_o">E1_SCSI_CS_o</A>);


<P> --INTA is INTA
<P><A NAME="INTA">INTA</A> = INPUT();


<P> --FB1_CNTR_O[2] is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[2]
<P><A NAME="FB1_CNTR_O[2]">FB1_CNTR_O[2]</A> = DFFEAS(<A HREF="#FB1L5">FB1L5</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --GB1_INT is registers:u_registers|registers_istr:u_registers_istr|INT
<P><A NAME="GB1_INT">GB1_INT</A> = (!<A HREF="#FB1_CNTR_O[2]">FB1_CNTR_O[2]</A>) # (!<A HREF="#INTA">INTA</A>);


<P> --C1_STATE[0] is CPU_SM:u_CPU_SM|STATE[0]
<P><A NAME="C1_STATE[0]">C1_STATE[0]</A> = DFFEAS(<A HREF="#R1L6">R1L6</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_STATE[1] is CPU_SM:u_CPU_SM|STATE[1]
<P><A NAME="C1_STATE[1]">C1_STATE[1]</A> = DFFEAS(<A HREF="#S1L8">S1L8</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_STATE[3] is CPU_SM:u_CPU_SM|STATE[3]
<P><A NAME="C1_STATE[3]">C1_STATE[3]</A> = DFFEAS(<A HREF="#U1L10">U1L10</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_STATE[2] is CPU_SM:u_CPU_SM|STATE[2]
<P><A NAME="C1_STATE[2]">C1_STATE[2]</A> = DFFEAS(<A HREF="#T1L10">T1L10</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_BGRANT_ is CPU_SM:u_CPU_SM|BGRANT_
<P><A NAME="C1_BGRANT_">C1_BGRANT_</A> = DFFEAS(<A HREF="#C1L4">C1L4</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_nCYCLEDONE is CPU_SM:u_CPU_SM|nCYCLEDONE
<P><A NAME="C1_nCYCLEDONE">C1_nCYCLEDONE</A> = DFFEAS(<A HREF="#C1L37">C1L37</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_STATE[4] is CPU_SM:u_CPU_SM|STATE[4]
<P><A NAME="C1_STATE[4]">C1_STATE[4]</A> = DFFEAS(<A HREF="#V1L10">V1L10</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Q1L1 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BGACK_d~0
<P><A NAME="Q1L1">Q1L1</A> = (<A HREF="#C1_STATE[4]">C1_STATE[4]</A>) # ((!<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#C1_BGRANT_">C1_BGRANT_</A> & <A HREF="#C1_nCYCLEDONE">C1_nCYCLEDONE</A>)));


<P> --Q1L2 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BGACK_d~1
<P><A NAME="Q1L2">Q1L2</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & ((<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & ((!<A HREF="#Q1L1">Q1L1</A>) # (!<A HREF="#C1_STATE[2]">C1_STATE[2]</A>))) # (!<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & ((<A HREF="#C1_STATE[2]">C1_STATE[2]</A>) # (<A HREF="#Q1L1">Q1L1</A>))))) # (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & ((<A HREF="#C1_STATE[2]">C1_STATE[2]</A>) # ((<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & <A HREF="#Q1L1">Q1L1</A>))));


<P> --Q1L3 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BGACK_d~2
<P><A NAME="Q1L3">Q1L3</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A>) # (<A HREF="#Q1L2">Q1L2</A>);


<P> --E1_CRESET_ is SCSI_SM:u_SCSI_SM|CRESET_
<P><A NAME="E1_CRESET_">E1_CRESET_</A> = DFFEAS(<A HREF="#X1__locked">X1__locked</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --Q1L59 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_Y~0
<P><A NAME="Q1L59">Q1L59</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> $ (<A HREF="#C1_STATE[4]">C1_STATE[4]</A>))));


<P> --_STERM is _STERM
<P><A NAME="_STERM">_STERM</A> = INPUT();


<P> --Q1L12 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~0
<P><A NAME="Q1L12">Q1L12</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>);


<P> --Q1L13 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~1
<P><A NAME="Q1L13">Q1L13</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & (<A HREF="#Q1L12">Q1L12</A> & !<A HREF="#C1_STATE[2]">C1_STATE[2]</A>)));


<P> --Q1L60 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~0
<P><A NAME="Q1L60">Q1L60</A> = (<A HREF="#_STERM">_STERM</A> & (((!<A HREF="#Q1L13">Q1L13</A>)))) # (!<A HREF="#_STERM">_STERM</A> & ((<A HREF="#C1_STATE[3]">C1_STATE[3]</A>) # ((!<A HREF="#Q1L59">Q1L59</A>))));


<P> --C1_DSACK_LATCHED_[0] is CPU_SM:u_CPU_SM|DSACK_LATCHED_[0]
<P><A NAME="C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A> = DFFEAS(<A HREF="#A1L85">A1L85</A>, !<A HREF="#X1__clk0">X1__clk0</A>, !<A HREF="#A1L126">A1L126</A>,  ,  ,  ,  ,  ,  );


<P> --C1_DSACK_LATCHED_[1] is CPU_SM:u_CPU_SM|DSACK_LATCHED_[1]
<P><A NAME="C1_DSACK_LATCHED_[1]">C1_DSACK_LATCHED_[1]</A> = DFFEAS(<A HREF="#A1L86">A1L86</A>, !<A HREF="#X1__clk0">X1__clk0</A>, !<A HREF="#A1L126">A1L126</A>,  ,  ,  ,  ,  ,  );


<P> --DSACK_I_[1] is DSACK_I_[1]
<P><A NAME="DSACK_I_[1]">DSACK_I_[1]</A> = INPUT();


<P> --_BERR is _BERR
<P><A NAME="_BERR">_BERR</A> = INPUT();


<P> --V1L1 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~0
<P><A NAME="V1L1">V1L1</A> = (<A HREF="#C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A> & (((!<A HREF="#_BERR">_BERR</A>) # (!<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A>)))) # (!<A HREF="#C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A> & (<A HREF="#C1_DSACK_LATCHED_[1]">C1_DSACK_LATCHED_[1]</A> & ((!<A HREF="#_BERR">_BERR</A>) # (!<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A>))));


<P> --DSACK_I_[0] is DSACK_I_[0]
<P><A NAME="DSACK_I_[0]">DSACK_I_[0]</A> = INPUT();


<P> --A1L85 is DSK0_IN_~0
<P><A NAME="A1L85">A1L85</A> = (!<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>) # (!<A HREF="#_BERR">_BERR</A>);


<P> --P1L17 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[51]~5
<P><A NAME="P1L17">P1L17</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --Q1L61 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~1
<P><A NAME="Q1L61">Q1L61</A> = ((<A HREF="#_STERM">_STERM</A> & ((<A HREF="#A1L85">A1L85</A>) # (!<A HREF="#V1L1">V1L1</A>)))) # (!<A HREF="#P1L17">P1L17</A>);


<P> --C1_nDSACK is CPU_SM:u_CPU_SM|nDSACK
<P><A NAME="C1_nDSACK">C1_nDSACK</A> = (!<A HREF="#C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A> & !<A HREF="#C1_DSACK_LATCHED_[1]">C1_DSACK_LATCHED_[1]</A>);


<P> --Q1L14 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~2
<P><A NAME="Q1L14">Q1L14</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (!<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (!<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --Q1L62 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~2
<P><A NAME="Q1L62">Q1L62</A> = (((<A HREF="#_STERM">_STERM</A> & !<A HREF="#C1_nDSACK">C1_nDSACK</A>)) # (!<A HREF="#Q1L14">Q1L14</A>)) # (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A>);


<P> --Q1L15 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~3
<P><A NAME="Q1L15">Q1L15</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#Q1L12">Q1L12</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --Q1L63 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~3
<P><A NAME="Q1L63">Q1L63</A> = (((!<A HREF="#Q1L15">Q1L15</A> & !<A HREF="#P1L17">P1L17</A>)) # (!<A HREF="#_STERM">_STERM</A>)) # (!<A HREF="#C1_nDSACK">C1_nDSACK</A>);


<P> --Q1L16 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~4
<P><A NAME="Q1L16">Q1L16</A> = (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & !<A HREF="#C1_STATE[1]">C1_STATE[1]</A>);


<P> --Q1L17 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~5
<P><A NAME="Q1L17">Q1L17</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#Q1L16">Q1L16</A> & (!<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & !<A HREF="#C1_STATE[2]">C1_STATE[2]</A>)));


<P> --P1L13 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[46]~6
<P><A NAME="P1L13">P1L13</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & !<A HREF="#C1_STATE[1]">C1_STATE[1]</A>)));


<P> --Q1L64 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~4
<P><A NAME="Q1L64">Q1L64</A> = (<A HREF="#Q1L63">Q1L63</A> & (!<A HREF="#Q1L17">Q1L17</A> & !<A HREF="#P1L13">P1L13</A>));


<P> --Q1L65 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~5
<P><A NAME="Q1L65">Q1L65</A> = (<A HREF="#Q1L60">Q1L60</A> & (<A HREF="#Q1L61">Q1L61</A> & (<A HREF="#Q1L62">Q1L62</A> & <A HREF="#Q1L64">Q1L64</A>)));


<P> --P1L25 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[62]~7
<P><A NAME="P1L25">P1L25</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --Q1L18 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~6
<P><A NAME="Q1L18">Q1L18</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & <A HREF="#Q1L14">Q1L14</A>);


<P> --Q1L55 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~0
<P><A NAME="Q1L55">Q1L55</A> = (!<A HREF="#Q1L18">Q1L18</A> & (!<A HREF="#Q1L15">Q1L15</A> & ((!<A HREF="#P1L17">P1L17</A>) # (!<A HREF="#A1L85">A1L85</A>))));


<P> --P1L23 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[61]~8
<P><A NAME="P1L23">P1L23</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --P1L15 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[50]~9
<P><A NAME="P1L15">P1L15</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --P1L19 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[56]~10
<P><A NAME="P1L19">P1L19</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & !<A HREF="#C1_STATE[0]">C1_STATE[0]</A>)));


<P> --Q1L71 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBRIDGEIN_d~0
<P><A NAME="Q1L71">Q1L71</A> = (!<A HREF="#P1L23">P1L23</A> & (!<A HREF="#P1L15">P1L15</A> & !<A HREF="#P1L19">P1L19</A>));


<P> --Q1L56 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~1
<P><A NAME="Q1L56">Q1L56</A> = (<A HREF="#P1L25">P1L25</A>) # (((<A HREF="#V1L1">V1L1</A> & !<A HREF="#Q1L55">Q1L55</A>)) # (!<A HREF="#Q1L71">Q1L71</A>));


<P> --P1L16 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[50]~11
<P><A NAME="P1L16">P1L16</A> = (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>);


<P> --Q1L19 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~7
<P><A NAME="Q1L19">Q1L19</A> = (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#P1L16">P1L16</A> & (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>)));


<P> --J1_BO1 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|BO1
<P><A NAME="J1_BO1">J1_BO1</A> = DFFEAS(<A HREF="#J1L5">J1L5</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --J1_BO0 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|BO0
<P><A NAME="J1_BO0">J1_BO0</A> = DFFEAS(<A HREF="#J1L2">J1L2</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --DB1L1 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|datapath_24dec:u_datapath_24dec|Z2~0
<P><A NAME="DB1L1">DB1L1</A> = (<A HREF="#J1_BO1">J1_BO1</A> & <A HREF="#J1_BO0">J1_BO0</A>);


<P> --K1_FIFOEMPTY is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY
<P><A NAME="K1_FIFOEMPTY">K1_FIFOEMPTY</A> = DFFEAS(<A HREF="#K1L24">K1L24</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --G1_FLUSHFIFO is registers:u_registers|FLUSHFIFO
<P><A NAME="G1_FLUSHFIFO">G1_FLUSHFIFO</A> = DFFEAS(<A HREF="#G1L4">G1L4</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --C1L23 is CPU_SM:u_CPU_SM|LASTWORD~0
<P><A NAME="C1L23">C1L23</A> = (<A HREF="#G1_FLUSHFIFO">G1_FLUSHFIFO</A> & ((<A HREF="#J1_BO1">J1_BO1</A>) # (<A HREF="#J1_BO0">J1_BO0</A>)));


<P> --P1L26 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|nE~0
<P><A NAME="P1L26">P1L26</A> = (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & !<A HREF="#C1_STATE[1]">C1_STATE[1]</A>)));


<P> --P1_E[26] is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[26]
<P><A NAME="P1_E[26]">P1_E[26]</A> = (<A HREF="#DB1L1">DB1L1</A>) # ((<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A>) # ((!<A HREF="#P1L26">P1L26</A>) # (!<A HREF="#C1L23">C1L23</A>)));


<P> --P1L21 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[58]~12
<P><A NAME="P1L21">P1L21</A> = (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>)));


<P> --Q1L57 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~2
<P><A NAME="Q1L57">Q1L57</A> = (<A HREF="#P1_E[26]">P1_E[26]</A> & !<A HREF="#P1L21">P1L21</A>);


<P> --Q1L66 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~6
<P><A NAME="Q1L66">Q1L66</A> = ((!<A HREF="#Q1L56">Q1L56</A> & (!<A HREF="#Q1L19">Q1L19</A> & <A HREF="#Q1L57">Q1L57</A>))) # (!<A HREF="#Q1L65">Q1L65</A>);


<P> --HB1_TERM_COUNTER[2] is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER[2]
<P><A NAME="HB1_TERM_COUNTER[2]">HB1_TERM_COUNTER[2]</A> = DFFEAS(<A HREF="#HB1L9">HB1L9</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --HB1_TERM_COUNTER[0] is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER[0]
<P><A NAME="HB1_TERM_COUNTER[0]">HB1_TERM_COUNTER[0]</A> = DFFEAS(<A HREF="#HB1L10">HB1L10</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --HB1_TERM_COUNTER[1] is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER[1]
<P><A NAME="HB1_TERM_COUNTER[1]">HB1_TERM_COUNTER[1]</A> = DFFEAS(<A HREF="#HB1L11">HB1L11</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --HB1L4 is registers:u_registers|registers_term:u_registers_term|REG_DSK_~0
<P><A NAME="HB1L4">HB1L4</A> = (<A HREF="#HB1_REG_DSK_">HB1_REG_DSK_</A>) # ((!<A HREF="#HB1_TERM_COUNTER[2]">HB1_TERM_COUNTER[2]</A> & (<A HREF="#HB1_TERM_COUNTER[0]">HB1_TERM_COUNTER[0]</A> & <A HREF="#HB1_TERM_COUNTER[1]">HB1_TERM_COUNTER[1]</A>)));


<P> --Y1_state_reg.s6 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s6
<P><A NAME="Y1_state_reg.s6">Y1_state_reg.s6</A> = DFFEAS(<A HREF="#Y1_state_reg.s26">Y1_state_reg.s26</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s19 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s19
<P><A NAME="Y1_state_reg.s19">Y1_state_reg.s19</A> = DFFEAS(<A HREF="#Y1_state_reg.s3">Y1_state_reg.s3</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1L26 is SCSI_SM:u_SCSI_SM|nLS2CPU~0
<P><A NAME="E1L26">E1L26</A> = (<A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>) # ((<A HREF="#Y1_state_reg.s6">Y1_state_reg.s6</A>) # (<A HREF="#Y1_state_reg.s19">Y1_state_reg.s19</A>));


<P> --Q1L20 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~8
<P><A NAME="Q1L20">Q1L20</A> = (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (!<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (!<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --Q1L21 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~9
<P><A NAME="Q1L21">Q1L21</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & <A HREF="#Q1L20">Q1L20</A>);


<P> --Q1L22 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~10
<P><A NAME="Q1L22">Q1L22</A> = (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & !<A HREF="#C1_STATE[2]">C1_STATE[2]</A>));


<P> --K1_FIFOFULL is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOFULL
<P><A NAME="K1_FIFOFULL">K1_FIFOFULL</A> = DFFEAS(<A HREF="#K1L18">K1L18</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --C1_FLUSHFIFO is CPU_SM:u_CPU_SM|FLUSHFIFO
<P><A NAME="C1_FLUSHFIFO">C1_FLUSHFIFO</A> = DFFEAS(<A HREF="#G1_FLUSHFIFO">G1_FLUSHFIFO</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Q1L67 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBREQ_d~4
<P><A NAME="Q1L67">Q1L67</A> = (<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A>) # ((<A HREF="#C1_FLUSHFIFO">C1_FLUSHFIFO</A> & ((<A HREF="#C1L23">C1L23</A>) # (<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A>))));


<P> --C1_DMAENA is CPU_SM:u_CPU_SM|DMAENA
<P><A NAME="C1_DMAENA">C1_DMAENA</A> = DFFEAS(<A HREF="#FB1_CNTR_O[8]">FB1_CNTR_O[8]</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --P1L2 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[0]~13
<P><A NAME="P1L2">P1L2</A> = (<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> & (<A HREF="#Q1L20">Q1L20</A> & (<A HREF="#C1_DMAENA">C1_DMAENA</A> & !<A HREF="#C1_STATE[1]">C1_STATE[1]</A>)));


<P> --Q1L68 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBREQ_d~5
<P><A NAME="Q1L68">Q1L68</A> = (<A HREF="#Q1L21">Q1L21</A>) # ((<A HREF="#Q1L69">Q1L69</A>) # ((<A HREF="#Q1L67">Q1L67</A> & <A HREF="#P1L2">P1L2</A>)));


<P> --Y1_state_reg.s16 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s16
<P><A NAME="Y1_state_reg.s16">Y1_state_reg.s16</A> = DFFEAS(<A HREF="#Y1L14">Y1L14</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_CCPUREQ is SCSI_SM:u_SCSI_SM|CCPUREQ
<P><A NAME="E1_CCPUREQ">E1_CCPUREQ</A> = DFFEAS(<A HREF="#EB1_WDREGREQ">EB1_WDREGREQ</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_RDFIFO_o is SCSI_SM:u_SCSI_SM|RDFIFO_o
<P><A NAME="E1_RDFIFO_o">E1_RDFIFO_o</A> = DFFEAS(<A HREF="#E1L14">E1L14</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --E1_CDREQ_ is SCSI_SM:u_SCSI_SM|CDREQ_
<P><A NAME="E1_CDREQ_">E1_CDREQ_</A> = DFFEAS(<A HREF="#DREQ_">DREQ_</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L30 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|always1~0
<P><A NAME="Y1L30">Y1L30</A> = (<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A>) # ((<A HREF="#E1_CCPUREQ">E1_CCPUREQ</A>) # ((<A HREF="#E1_RDFIFO_o">E1_RDFIFO_o</A>) # (!<A HREF="#E1_CDREQ_">E1_CDREQ_</A>)));


<P> --Y1L4 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector0~0
<P><A NAME="Y1L4">Y1L4</A> = (<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A> & (<A HREF="#Y1_state_reg.s16">Y1_state_reg.s16</A> & !<A HREF="#Y1L30">Y1L30</A>));


<P> --E1_RIFIFO_o is SCSI_SM:u_SCSI_SM|RIFIFO_o
<P><A NAME="E1_RIFIFO_o">E1_RIFIFO_o</A> = DFFEAS(<A HREF="#E1L19">E1L19</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L31 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|always1~1
<P><A NAME="Y1L31">Y1L31</A> = (<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> & (<A HREF="#E1_CDREQ_">E1_CDREQ_</A> & (!<A HREF="#E1_CCPUREQ">E1_CCPUREQ</A> & !<A HREF="#E1_RIFIFO_o">E1_RIFIFO_o</A>)));


<P> --Y1_state_reg.s0 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s0
<P><A NAME="Y1_state_reg.s0">Y1_state_reg.s0</A> = DFFEAS(<A HREF="#Y1L11">Y1L11</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L5 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector0~1
<P><A NAME="Y1L5">Y1L5</A> = (<A HREF="#Y1L31">Y1L31</A> & (!<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A> & !<A HREF="#Y1_state_reg.s0">Y1_state_reg.s0</A>));


<P> --Y1_state_reg.s24 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s24
<P><A NAME="Y1_state_reg.s24">Y1_state_reg.s24</A> = DFFEAS(<A HREF="#Y1L5">Y1L5</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s4 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s4
<P><A NAME="Y1_state_reg.s4">Y1_state_reg.s4</A> = DFFEAS(<A HREF="#Y1_state_reg.s24">Y1_state_reg.s24</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s20 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s20
<P><A NAME="Y1_state_reg.s20">Y1_state_reg.s20</A> = DFFEAS(<A HREF="#Y1_state_reg.s4">Y1_state_reg.s4</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L6 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector0~2
<P><A NAME="Y1L6">Y1L6</A> = (!<A HREF="#Y1_state_reg.s4">Y1_state_reg.s4</A> & (!<A HREF="#Y1_state_reg.s20">Y1_state_reg.s20</A> & ((<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A>) # (!<A HREF="#Y1_state_reg.s24">Y1_state_reg.s24</A>))));


<P> --Y1_state_reg.s2 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s2
<P><A NAME="Y1_state_reg.s2">Y1_state_reg.s2</A> = DFFEAS(<A HREF="#Y1_state_reg.s28">Y1_state_reg.s28</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s18 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s18
<P><A NAME="Y1_state_reg.s18">Y1_state_reg.s18</A> = DFFEAS(<A HREF="#Y1_state_reg.s2">Y1_state_reg.s2</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s28 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s28
<P><A NAME="Y1_state_reg.s28">Y1_state_reg.s28</A> = DFFEAS(<A HREF="#Y1L4">Y1L4</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L27 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|WideOr22~0
<P><A NAME="Y1L27">Y1L27</A> = (!<A HREF="#Y1_state_reg.s2">Y1_state_reg.s2</A> & (!<A HREF="#Y1_state_reg.s18">Y1_state_reg.s18</A> & !<A HREF="#Y1_state_reg.s28">Y1_state_reg.s28</A>));


<P> --Y1L7 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector0~3
<P><A NAME="Y1L7">Y1L7</A> = (<A HREF="#Y1L4">Y1L4</A>) # ((<A HREF="#Y1L5">Y1L5</A>) # ((!<A HREF="#Y1L27">Y1L27</A>) # (!<A HREF="#Y1L6">Y1L6</A>)));


<P> --Y1_state_reg.s3 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s3
<P><A NAME="Y1_state_reg.s3">Y1_state_reg.s3</A> = DFFEAS(<A HREF="#Y1_state_reg.s30">Y1_state_reg.s30</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s10 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s10
<P><A NAME="Y1_state_reg.s10">Y1_state_reg.s10</A> = DFFEAS(<A HREF="#Y1L21">Y1L21</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s30 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s30
<P><A NAME="Y1_state_reg.s30">Y1_state_reg.s30</A> = DFFEAS(<A HREF="#Y1_state_reg.s10">Y1_state_reg.s10</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L29 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|WideOr30~0
<P><A NAME="Y1L29">Y1L29</A> = (<A HREF="#Y1_state_reg.s6">Y1_state_reg.s6</A>) # ((<A HREF="#Y1_state_reg.s3">Y1_state_reg.s3</A>) # ((<A HREF="#Y1_state_reg.s10">Y1_state_reg.s10</A>) # (<A HREF="#Y1_state_reg.s30">Y1_state_reg.s30</A>)));


<P> --Y1_state_reg.s8 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s8
<P><A NAME="Y1_state_reg.s8">Y1_state_reg.s8</A> = DFFEAS(<A HREF="#Y1L12">Y1L12</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s17 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s17
<P><A NAME="Y1_state_reg.s17">Y1_state_reg.s17</A> = DFFEAS(<A HREF="#Y1L15">Y1L15</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s26 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s26
<P><A NAME="Y1_state_reg.s26">Y1_state_reg.s26</A> = DFFEAS(<A HREF="#Y1_state_reg.s17">Y1_state_reg.s17</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_WideOr30 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|WideOr30
<P><A NAME="Y1_WideOr30">Y1_WideOr30</A> = (<A HREF="#Y1L29">Y1L29</A>) # ((<A HREF="#Y1_state_reg.s8">Y1_state_reg.s8</A>) # ((<A HREF="#Y1_state_reg.s17">Y1_state_reg.s17</A>) # (<A HREF="#Y1_state_reg.s26">Y1_state_reg.s26</A>)));


<P> --ADDR[3] is ADDR[3]
<P><A NAME="ADDR[3]">ADDR[3]</A> = INPUT();


<P> --ADDR[5] is ADDR[5]
<P><A NAME="ADDR[5]">ADDR[5]</A> = INPUT();


<P> --ADDR[6] is ADDR[6]
<P><A NAME="ADDR[6]">ADDR[6]</A> = INPUT();


<P> --EB1L8 is registers:u_registers|addr_decoder:u_addr_decoder|h_0C~0
<P><A NAME="EB1L8">EB1L8</A> = (<A HREF="#FB1L9">FB1L9</A> & (<A HREF="#ADDR[3]">ADDR[3]</A> & (!<A HREF="#ADDR[5]">ADDR[5]</A> & !<A HREF="#ADDR[6]">ADDR[6]</A>)));


<P> --ADDR[2] is ADDR[2]
<P><A NAME="ADDR[2]">ADDR[2]</A> = INPUT();


<P> --ADDR[4] is ADDR[4]
<P><A NAME="ADDR[4]">ADDR[4]</A> = INPUT();


<P> --EB1L2 is registers:u_registers|addr_decoder:u_addr_decoder|CONTR_WR~0
<P><A NAME="EB1L2">EB1L2</A> = (<A HREF="#EB1L8">EB1L8</A> & (!<A HREF="#A1L123">A1L123</A> & (!<A HREF="#ADDR[2]">ADDR[2]</A> & !<A HREF="#ADDR[4]">ADDR[4]</A>)));


<P> --FB1L7 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[4]~1
<P><A NAME="FB1L7">FB1L7</A> = (<A HREF="#EB1L2">EB1L2</A> & (<A HREF="#A1L20">A1L20</A>)) # (!<A HREF="#EB1L2">EB1L2</A> & ((<A HREF="#FB1_CNTR_O[4]">FB1_CNTR_O[4]</A>)));


<P> --Y1L19 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector25~0
<P><A NAME="Y1L19">Y1L19</A> = (!<A HREF="#Y1_state_reg.s19">Y1_state_reg.s19</A> & (!<A HREF="#Y1_state_reg.s3">Y1_state_reg.s3</A> & (!<A HREF="#Y1_state_reg.s10">Y1_state_reg.s10</A> & !<A HREF="#Y1_state_reg.s30">Y1_state_reg.s30</A>)));


<P> --Y1L20 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector25~1
<P><A NAME="Y1L20">Y1L20</A> = (((<A HREF="#A1L123">A1L123</A> & <A HREF="#Y1_state_reg.s8">Y1_state_reg.s8</A>)) # (!<A HREF="#Y1L19">Y1L19</A>)) # (!<A HREF="#Y1L6">Y1L6</A>);


<P> --Y1L15 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector13~0
<P><A NAME="Y1L15">Y1L15</A> = (<A HREF="#Y1_state_reg.s8">Y1_state_reg.s8</A> & !<A HREF="#A1L123">A1L123</A>);


<P> --Y1L18 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector24~0
<P><A NAME="Y1L18">Y1L18</A> = (<A HREF="#Y1_state_reg.s17">Y1_state_reg.s17</A>) # ((<A HREF="#Y1_state_reg.s26">Y1_state_reg.s26</A>) # ((<A HREF="#Y1L15">Y1L15</A>) # (!<A HREF="#Y1L27">Y1L27</A>)));


<P> --FB1L3 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[1]~2
<P><A NAME="FB1L3">FB1L3</A> = (<A HREF="#EB1L2">EB1L2</A> & (<A HREF="#A1L14">A1L14</A>)) # (!<A HREF="#EB1L2">EB1L2</A> & ((<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A>)));


<P> --FB1L5 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[2]~3
<P><A NAME="FB1L5">FB1L5</A> = (<A HREF="#EB1L2">EB1L2</A> & (<A HREF="#A1L16">A1L16</A>)) # (!<A HREF="#EB1L2">EB1L2</A> & ((<A HREF="#FB1_CNTR_O[2]">FB1_CNTR_O[2]</A>)));


<P> --_RST is _RST
<P><A NAME="_RST">_RST</A> = INPUT();


<P> --SCLK is SCLK
<P><A NAME="SCLK">SCLK</A> = INPUT();


<P> --R1L1 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~0
<P><A NAME="R1L1">R1L1</A> = (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#Q1L16">Q1L16</A> & !<A HREF="#C1_STATE[0]">C1_STATE[0]</A>)));


<P> --Q1L35 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|INCFIFO_d~0
<P><A NAME="Q1L35">Q1L35</A> = (<A HREF="#V1L1">V1L1</A> & (<A HREF="#A1L85">A1L85</A> & ((<A HREF="#P1L17">P1L17</A>) # (<A HREF="#R1L1">R1L1</A>))));


<P> --G1_A1 is registers:u_registers|A1
<P><A NAME="G1_A1">G1_A1</A> = DFFEAS(<A HREF="#G1L2">G1L2</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --P1L5 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[12]~14
<P><A NAME="P1L5">P1L5</A> = (<A HREF="#C1_BGRANT_">C1_BGRANT_</A> & (<A HREF="#C1_nCYCLEDONE">C1_nCYCLEDONE</A> & <A HREF="#G1_A1">G1_A1</A>));


<P> --R1L2 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~1
<P><A NAME="R1L2">R1L2</A> = (<A HREF="#P1L18">P1L18</A>) # ((<A HREF="#Q1L35">Q1L35</A>) # ((<A HREF="#Q1L21">Q1L21</A> & <A HREF="#P1L5">P1L5</A>)));


<P> --P1L11 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[43]~15
<P><A NAME="P1L11">P1L11</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & !<A HREF="#C1_STATE[2]">C1_STATE[2]</A>)));


<P> --S1L9 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|p2b~0
<P><A NAME="S1L9">S1L9</A> = (!<A HREF="#_STERM">_STERM</A> & ((<A HREF="#P1L17">P1L17</A>) # ((<A HREF="#P1L13">P1L13</A>) # (<A HREF="#P1L11">P1L11</A>))));


<P> --P1L24 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[61]~16
<P><A NAME="P1L24">P1L24</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>);


<P> --Q1L23 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~11
<P><A NAME="Q1L23">Q1L23</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#P1L24">P1L24</A> & !<A HREF="#C1_STATE[2]">C1_STATE[2]</A>)));


<P> --S1L1 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~0
<P><A NAME="S1L1">S1L1</A> = (<A HREF="#P1_E[26]">P1_E[26]</A> & (!<A HREF="#P1L21">P1L21</A> & ((!<A HREF="#Q1L23">Q1L23</A>) # (!<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A>))));


<P> --P1L12 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[43]~17
<P><A NAME="P1L12">P1L12</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & !<A HREF="#C1_STATE[2]">C1_STATE[2]</A>));


<P> --P1L22 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[60]~18
<P><A NAME="P1L22">P1L22</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>)));


<P> --Q1L46 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLHW_d~0
<P><A NAME="Q1L46">Q1L46</A> = (!<A HREF="#P1L22">P1L22</A> & ((<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A>) # ((!<A HREF="#P1L12">P1L12</A>) # (!<A HREF="#P1L24">P1L24</A>))));


<P> --R1L3 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~2
<P><A NAME="R1L3">R1L3</A> = (<A HREF="#Q1L46">Q1L46</A> & (!<A HREF="#P1L25">P1L25</A> & !<A HREF="#Q1L19">Q1L19</A>));


<P> --C1_LASTWORD is CPU_SM:u_CPU_SM|LASTWORD
<P><A NAME="C1_LASTWORD">C1_LASTWORD</A> = (<A HREF="#G1_FLUSHFIFO">G1_FLUSHFIFO</A> & (!<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A> & ((<A HREF="#J1_BO1">J1_BO1</A>) # (<A HREF="#J1_BO0">J1_BO0</A>))));


<P> --Q1L72 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nSTOPFLUSH_d~0
<P><A NAME="Q1L72">Q1L72</A> = (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#Q1L16">Q1L16</A> & !<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A>)));


<P> --R1L4 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~3
<P><A NAME="R1L4">R1L4</A> = (<A HREF="#S1L1">S1L1</A> & (<A HREF="#R1L3">R1L3</A> & ((<A HREF="#C1_LASTWORD">C1_LASTWORD</A>) # (!<A HREF="#Q1L72">Q1L72</A>))));


<P> --R1L5 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~4
<P><A NAME="R1L5">R1L5</A> = (<A HREF="#P1L15">P1L15</A>) # ((<A HREF="#P1L19">P1L19</A>) # ((<A HREF="#S1L9">S1L9</A>) # (!<A HREF="#R1L4">R1L4</A>)));


<P> --Q1L48 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_Y~0
<P><A NAME="Q1L48">Q1L48</A> = (!<A HREF="#P1L11">P1L11</A> & (((!<A HREF="#P1L24">P1L24</A>) # (!<A HREF="#C1_STATE[2]">C1_STATE[2]</A>)) # (!<A HREF="#C1_STATE[3]">C1_STATE[3]</A>)));


<P> --U1L11 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|p4b~0
<P><A NAME="U1L11">U1L11</A> = (<A HREF="#Q1L48">Q1L48</A> & (!<A HREF="#Q1L14">Q1L14</A> & !<A HREF="#Q1L15">Q1L15</A>));


<P> --P1L10 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[37]~19
<P><A NAME="P1L10">P1L10</A> = (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --R1L7 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|p1c~0
<P><A NAME="R1L7">R1L7</A> = (!<A HREF="#Q1L13">Q1L13</A> & (!<A HREF="#Q1L17">Q1L17</A> & (!<A HREF="#P1L13">P1L13</A> & !<A HREF="#P1L10">P1L10</A>)));


<P> --P1L20 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[57]~20
<P><A NAME="P1L20">P1L20</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & !<A HREF="#C1_STATE[1]">C1_STATE[1]</A>)));


<P> --S1L10 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|p2c~0
<P><A NAME="S1L10">S1L10</A> = (!<A HREF="#P1L20">P1L20</A> & (((<A HREF="#A1L85">A1L85</A>) # (!<A HREF="#P1L17">P1L17</A>)) # (!<A HREF="#V1L1">V1L1</A>)));


<P> --R1L8 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|p1c~1
<P><A NAME="R1L8">R1L8</A> = (((<A HREF="#C1_nDSACK">C1_nDSACK</A> & !<A HREF="#U1L11">U1L11</A>)) # (!<A HREF="#S1L10">S1L10</A>)) # (!<A HREF="#R1L7">R1L7</A>);


<P> --R1L6 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~5
<P><A NAME="R1L6">R1L6</A> = (<A HREF="#R1L2">R1L2</A>) # ((<A HREF="#R1L5">R1L5</A>) # ((<A HREF="#_STERM">_STERM</A> & <A HREF="#R1L8">R1L8</A>)));


<P> --S1L11 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|p2c~1
<P><A NAME="S1L11">S1L11</A> = (<A HREF="#C1_nDSACK">C1_nDSACK</A> & ((<A HREF="#Q1L18">Q1L18</A>) # ((<A HREF="#Q1L15">Q1L15</A>) # (!<A HREF="#Q1L48">Q1L48</A>))));


<P> --P1L14 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[46]~21
<P><A NAME="P1L14">P1L14</A> = (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & !<A HREF="#C1_STATE[1]">C1_STATE[1]</A>));


<P> --R1L9 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|p1c~2
<P><A NAME="R1L9">R1L9</A> = (!<A HREF="#Q1L13">Q1L13</A> & (!<A HREF="#Q1L17">Q1L17</A> & ((!<A HREF="#P1L14">P1L14</A>) # (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A>))));


<P> --P1L8 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[27]~22
<P><A NAME="P1L8">P1L8</A> = (<A HREF="#_STERM">_STERM</A> & ((<A HREF="#S1L11">S1L11</A>) # ((!<A HREF="#S1L10">S1L10</A>) # (!<A HREF="#R1L9">R1L9</A>))));


<P> --S1L2 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~1
<P><A NAME="S1L2">S1L2</A> = (<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & (!<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> & (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>)));


<P> --C1_DREQ_ is CPU_SM:u_CPU_SM|DREQ_
<P><A NAME="C1_DREQ_">C1_DREQ_</A> = DFFEAS(<A HREF="#DREQ_">DREQ_</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --S1L3 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~2
<P><A NAME="S1L3">S1L3</A> = (<A HREF="#C1_DMAENA">C1_DMAENA</A> & (<A HREF="#S1L2">S1L2</A> & (<A HREF="#C1_DREQ_">C1_DREQ_</A> & !<A HREF="#C1_STATE[1]">C1_STATE[1]</A>)));


<P> --S1L4 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~3
<P><A NAME="S1L4">S1L4</A> = (!<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A> & ((<A HREF="#S1L3">S1L3</A>) # ((<A HREF="#P1L26">P1L26</A> & !<A HREF="#C1L23">C1L23</A>))));


<P> --Q1L58 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~3
<P><A NAME="Q1L58">Q1L58</A> = (<A HREF="#P1L17">P1L17</A> & ((!<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>) # (!<A HREF="#_BERR">_BERR</A>)));


<P> --A1L86 is DSK1_IN_~0
<P><A NAME="A1L86">A1L86</A> = (!<A HREF="#_BERR">_BERR</A>) # (!<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A>);


<P> --S1L5 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~4
<P><A NAME="S1L5">S1L5</A> = (<A HREF="#A1L86">A1L86</A> & ((<A HREF="#P1L11">P1L11</A>) # ((<A HREF="#Q1L58">Q1L58</A> & !<A HREF="#C1_nDSACK">C1_nDSACK</A>))));


<P> --P1L9 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[35]~23
<P><A NAME="P1L9">P1L9</A> = (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & <A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --S1L6 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~5
<P><A NAME="S1L6">S1L6</A> = (<A HREF="#P1L23">P1L23</A>) # ((<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#Q1L20">Q1L20</A> & !<A HREF="#P1L5">P1L5</A>)));


<P> --Q1L36 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|INCFIFO_d~1
<P><A NAME="Q1L36">Q1L36</A> = (!<A HREF="#P1L18">P1L18</A> & (!<A HREF="#S1L9">S1L9</A> & ((<A HREF="#C1_nDSACK">C1_nDSACK</A>) # (!<A HREF="#P1L15">P1L15</A>))));


<P> --S1L7 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~6
<P><A NAME="S1L7">S1L7</A> = (<A HREF="#P1L9">P1L9</A>) # ((<A HREF="#S1L6">S1L6</A>) # ((!<A HREF="#Q1L36">Q1L36</A>) # (!<A HREF="#S1L1">S1L1</A>)));


<P> --S1L8 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~7
<P><A NAME="S1L8">S1L8</A> = (<A HREF="#P1L8">P1L8</A>) # ((<A HREF="#S1L4">S1L4</A>) # ((<A HREF="#S1L5">S1L5</A>) # (<A HREF="#S1L7">S1L7</A>)));


<P> --P1L27 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|nE~1
<P><A NAME="P1L27">P1L27</A> = (<A HREF="#C1_BGRANT_">C1_BGRANT_</A> & (<A HREF="#C1_nCYCLEDONE">C1_nCYCLEDONE</A> & !<A HREF="#G1_A1">G1_A1</A>));


<P> --P1L28 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|nE~2
<P><A NAME="P1L28">P1L28</A> = (<A HREF="#P1L16">P1L16</A> & (<A HREF="#C1_LASTWORD">C1_LASTWORD</A> & (<A HREF="#Q1L22">Q1L22</A> & <A HREF="#P1L27">P1L27</A>)));


<P> --U1L1 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~0
<P><A NAME="U1L1">U1L1</A> = (<A HREF="#DB1L1">DB1L1</A> & ((<A HREF="#P1L28">P1L28</A>) # ((<A HREF="#P1L2">P1L2</A> & <A HREF="#Q1L67">Q1L67</A>)))) # (!<A HREF="#DB1L1">DB1L1</A> & (<A HREF="#P1L2">P1L2</A> & (<A HREF="#Q1L67">Q1L67</A>)));


<P> --U1L2 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~1
<P><A NAME="U1L2">U1L2</A> = (<A HREF="#U1L1">U1L1</A>) # ((!<A HREF="#_STERM">_STERM</A> & ((!<A HREF="#R1L7">R1L7</A>) # (!<A HREF="#U1L11">U1L11</A>))));


<P> --P1L4 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[8]~24
<P><A NAME="P1L4">P1L4</A> = (<A HREF="#P1L16">P1L16</A> & (<A HREF="#Q1L22">Q1L22</A> & (<A HREF="#P1L27">P1L27</A> & !<A HREF="#C1_LASTWORD">C1_LASTWORD</A>)));


<P> --Q1L49 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_Y~1
<P><A NAME="Q1L49">Q1L49</A> = (!<A HREF="#C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A> & (!<A HREF="#C1_DSACK_LATCHED_[1]">C1_DSACK_LATCHED_[1]</A> & ((<A HREF="#P1L17">P1L17</A>) # (<A HREF="#P1L11">P1L11</A>))));


<P> --U1L3 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~2
<P><A NAME="U1L3">U1L3</A> = (<A HREF="#_STERM">_STERM</A> & ((<A HREF="#P1L13">P1L13</A>) # ((<A HREF="#Q1L49">Q1L49</A>) # (!<A HREF="#S1L10">S1L10</A>))));


<P> --P1L29 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|nE~3
<P><A NAME="P1L29">P1L29</A> = (<A HREF="#Q1L14">Q1L14</A> & ((!<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>) # (!<A HREF="#_BERR">_BERR</A>)));


<P> --U1L4 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~3
<P><A NAME="U1L4">U1L4</A> = (<A HREF="#P1L15">P1L15</A>) # ((<A HREF="#A1L86">A1L86</A> & ((<A HREF="#P1L29">P1L29</A>) # (!<A HREF="#Q1L55">Q1L55</A>))));


<P> --U1L5 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~4
<P><A NAME="U1L5">U1L5</A> = (<A HREF="#P1L4">P1L4</A>) # ((<A HREF="#U1L3">U1L3</A>) # ((<A HREF="#U1L4">U1L4</A> & !<A HREF="#C1_nDSACK">C1_nDSACK</A>)));


<P> --P1L6 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[21]~25
<P><A NAME="P1L6">P1L6</A> = (<A HREF="#C1L23">C1L23</A> & (<A HREF="#P1L26">P1L26</A> & !<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A>));


<P> --T1L1 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~0
<P><A NAME="T1L1">T1L1</A> = (<A HREF="#DB1L1">DB1L1</A> & (!<A HREF="#P1L6">P1L6</A> & ((!<A HREF="#Q1L22">Q1L22</A>) # (!<A HREF="#Q1L16">Q1L16</A>)))) # (!<A HREF="#DB1L1">DB1L1</A> & (((!<A HREF="#Q1L22">Q1L22</A>) # (!<A HREF="#Q1L16">Q1L16</A>))));


<P> --U1L6 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~5
<P><A NAME="U1L6">U1L6</A> = (((<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A> & <A HREF="#P1L26">P1L26</A>)) # (!<A HREF="#T1L1">T1L1</A>)) # (!<A HREF="#Q1L46">Q1L46</A>);


<P> --U1L7 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~6
<P><A NAME="U1L7">U1L7</A> = (<A HREF="#P1L16">P1L16</A> & (<A HREF="#Q1L22">Q1L22</A> & ((!<A HREF="#C1_nCYCLEDONE">C1_nCYCLEDONE</A>) # (!<A HREF="#C1_BGRANT_">C1_BGRANT_</A>))));


<P> --U1L8 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~7
<P><A NAME="U1L8">U1L8</A> = (<A HREF="#P1L23">P1L23</A>) # ((<A HREF="#U1L7">U1L7</A>) # ((<A HREF="#P1L11">P1L11</A> & <A HREF="#A1L86">A1L86</A>)));


<P> --U1L9 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~8
<P><A NAME="U1L9">U1L9</A> = (<A HREF="#P1L18">P1L18</A>) # ((<A HREF="#U1L8">U1L8</A>) # ((<A HREF="#Q1L21">Q1L21</A> & <A HREF="#P1L5">P1L5</A>)));


<P> --U1L10 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~9
<P><A NAME="U1L10">U1L10</A> = (<A HREF="#U1L2">U1L2</A>) # ((<A HREF="#U1L5">U1L5</A>) # ((<A HREF="#U1L6">U1L6</A>) # (<A HREF="#U1L9">U1L9</A>)));


<P> --V1L11 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|p5b~0
<P><A NAME="V1L11">V1L11</A> = (!<A HREF="#Q1L14">Q1L14</A> & (!<A HREF="#Q1L17">Q1L17</A> & !<A HREF="#P1L10">P1L10</A>));


<P> --V1L12 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|p5b~1
<P><A NAME="V1L12">V1L12</A> = (!<A HREF="#_STERM">_STERM</A> & ((<A HREF="#Q1L15">Q1L15</A>) # ((<A HREF="#Q1L13">Q1L13</A>) # (!<A HREF="#V1L11">V1L11</A>))));


<P> --T1L2 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~1
<P><A NAME="T1L2">T1L2</A> = ((<A HREF="#P1L28">P1L28</A> & ((!<A HREF="#J1_BO0">J1_BO0</A>) # (!<A HREF="#J1_BO1">J1_BO1</A>)))) # (!<A HREF="#T1L1">T1L1</A>);


<P> --T1L3 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~2
<P><A NAME="T1L3">T1L3</A> = (<A HREF="#P1L25">P1L25</A>) # ((<A HREF="#P1L19">P1L19</A>) # ((<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A> & <A HREF="#Q1L23">Q1L23</A>)));


<P> --T1L4 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~3
<P><A NAME="T1L4">T1L4</A> = (<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A>) # (((!<A HREF="#J1_BO1">J1_BO1</A> & !<A HREF="#J1_BO0">J1_BO0</A>)) # (!<A HREF="#G1_FLUSHFIFO">G1_FLUSHFIFO</A>));


<P> --T1L11 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|p3a~0
<P><A NAME="T1L11">T1L11</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (!<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & ((<A HREF="#C1_STATE[1]">C1_STATE[1]</A>) # (!<A HREF="#C1_STATE[2]">C1_STATE[2]</A>))));


<P> --Q1L38 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~0
<P><A NAME="Q1L38">Q1L38</A> = (<A HREF="#T1L11">T1L11</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>);


<P> --T1L5 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~4
<P><A NAME="T1L5">T1L5</A> = (<A HREF="#V1L1">V1L1</A> & ((<A HREF="#Q1L38">Q1L38</A>) # ((<A HREF="#P1L26">P1L26</A> & <A HREF="#T1L4">T1L4</A>)))) # (!<A HREF="#V1L1">V1L1</A> & (<A HREF="#P1L26">P1L26</A> & (<A HREF="#T1L4">T1L4</A>)));


<P> --Q1L50 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~0
<P><A NAME="Q1L50">Q1L50</A> = (!<A HREF="#P1L9">P1L9</A> & ((<A HREF="#C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A>) # ((<A HREF="#C1_DSACK_LATCHED_[1]">C1_DSACK_LATCHED_[1]</A>) # (!<A HREF="#P1L15">P1L15</A>))));


<P> --T1L6 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~5
<P><A NAME="T1L6">T1L6</A> = ((<A HREF="#P1L16">P1L16</A> & (<A HREF="#Q1L22">Q1L22</A> & <A HREF="#P1L5">P1L5</A>))) # (!<A HREF="#Q1L50">Q1L50</A>);


<P> --T1L7 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~6
<P><A NAME="T1L7">T1L7</A> = (<A HREF="#T1L2">T1L2</A>) # ((<A HREF="#T1L3">T1L3</A>) # ((<A HREF="#T1L5">T1L5</A>) # (<A HREF="#T1L6">T1L6</A>)));


<P> --V1L2 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~1
<P><A NAME="V1L2">V1L2</A> = (<A HREF="#_BERR">_BERR</A> & (<A HREF="#V1L1">V1L1</A> & (<A HREF="#P1L17">P1L17</A> & <A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>)));


<P> --T1L8 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~7
<P><A NAME="T1L8">T1L8</A> = (!<A HREF="#C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A> & (!<A HREF="#C1_DSACK_LATCHED_[1]">C1_DSACK_LATCHED_[1]</A> & ((<A HREF="#Q1L15">Q1L15</A>) # (<A HREF="#P1L17">P1L17</A>))));


<P> --T1L9 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~8
<P><A NAME="T1L9">T1L9</A> = (<A HREF="#Q1L13">Q1L13</A>) # ((<A HREF="#V1L2">V1L2</A>) # ((<A HREF="#P1L13">P1L13</A>) # (<A HREF="#T1L8">T1L8</A>)));


<P> --T1L10 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~9
<P><A NAME="T1L10">T1L10</A> = (<A HREF="#V1L12">V1L12</A>) # ((<A HREF="#T1L7">T1L7</A>) # ((<A HREF="#_STERM">_STERM</A> & <A HREF="#T1L9">T1L9</A>)));


<P> --_BG is _BG
<P><A NAME="_BG">_BG</A> = INPUT();


<P> --C1L36 is CPU_SM:u_CPU_SM|aCYCLEDONE_~0
<P><A NAME="C1L36">C1L36</A> = (<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A> & (<A HREF="#_BERR">_BERR</A> & (<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A> & <A HREF="#_STERM">_STERM</A>)));


<P> --C1L37 is CPU_SM:u_CPU_SM|aCYCLEDONE_~1
<P><A NAME="C1L37">C1L37</A> = (<A HREF="#A1L126">A1L126</A> & (<A HREF="#A1L130">A1L130</A> & <A HREF="#C1L36">C1L36</A>));


<P> --V1L3 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~2
<P><A NAME="V1L3">V1L3</A> = (!<A HREF="#Q1L15">Q1L15</A> & (((!<A HREF="#A1L85">A1L85</A> & !<A HREF="#C1_STATE[1]">C1_STATE[1]</A>)) # (!<A HREF="#Q1L14">Q1L14</A>)));


<P> --V1L4 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~3
<P><A NAME="V1L4">V1L4</A> = (<A HREF="#P1L28">P1L28</A>) # ((<A HREF="#P1L4">P1L4</A>) # ((<A HREF="#V1L1">V1L1</A> & !<A HREF="#V1L3">V1L3</A>)));


<P> --V1L5 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~4
<P><A NAME="V1L5">V1L5</A> = (<A HREF="#P1L23">P1L23</A>) # ((<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (<A HREF="#Q1L20">Q1L20</A> & <A HREF="#P1L27">P1L27</A>)));


<P> --Q1L39 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~1
<P><A NAME="Q1L39">Q1L39</A> = (<A HREF="#P1L11">P1L11</A> & (!<A HREF="#C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A> & !<A HREF="#C1_DSACK_LATCHED_[1]">C1_DSACK_LATCHED_[1]</A>));


<P> --V1L6 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~5
<P><A NAME="V1L6">V1L6</A> = (<A HREF="#V1L5">V1L5</A>) # ((<A HREF="#_STERM">_STERM</A> & ((<A HREF="#Q1L39">Q1L39</A>) # (!<A HREF="#S1L10">S1L10</A>))));


<P> --V1L7 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~6
<P><A NAME="V1L7">V1L7</A> = (<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A>) # ((!<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A> & (<A HREF="#C1_DREQ_">C1_DREQ_</A> & <A HREF="#C1_STATE[4]">C1_STATE[4]</A>)));


<P> --V1L8 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~7
<P><A NAME="V1L8">V1L8</A> = (<A HREF="#C1_DMAENA">C1_DMAENA</A> & (!<A HREF="#V1L7">V1L7</A> & ((<A HREF="#C1_STATE[4]">C1_STATE[4]</A>) # (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A>)))) # (!<A HREF="#C1_DMAENA">C1_DMAENA</A> & (((<A HREF="#C1_STATE[4]">C1_STATE[4]</A>))));


<P> --V1L9 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~8
<P><A NAME="V1L9">V1L9</A> = (<A HREF="#V1L6">V1L6</A>) # ((<A HREF="#V1L8">V1L8</A> & (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>)));


<P> --V1L10 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~9
<P><A NAME="V1L10">V1L10</A> = (<A HREF="#V1L12">V1L12</A>) # ((<A HREF="#V1L4">V1L4</A>) # ((<A HREF="#V1L9">V1L9</A>) # (!<A HREF="#R1L4">R1L4</A>)));


<P> --FB1L10 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~4
<P><A NAME="FB1L10">FB1L10</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (!<A HREF="#_CS">_CS</A> & (!<A HREF="#A1L126">A1L126</A> & !<A HREF="#ADDR[6]">ADDR[6]</A>)));


<P> --EB1_h_0C is registers:u_registers|addr_decoder:u_addr_decoder|h_0C
<P><A NAME="EB1_h_0C">EB1_h_0C</A> = (<A HREF="#FB1L10">FB1L10</A> & (<A HREF="#ADDR[2]">ADDR[2]</A> & (!<A HREF="#ADDR[5]">ADDR[5]</A> & !<A HREF="#ADDR[4]">ADDR[4]</A>)));


<P> --E1_INCBO_o is SCSI_SM:u_SCSI_SM|INCBO_o
<P><A NAME="E1_INCBO_o">E1_INCBO_o</A> = DFFEAS(<A HREF="#Y1_INCBO">Y1_INCBO</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --J1L4 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|BO1~0
<P><A NAME="J1L4">J1L4</A> = (<A HREF="#E1_INCBO_o">E1_INCBO_o</A> & (((!<A HREF="#J1_BO0">J1_BO0</A> & !<A HREF="#EB1_h_0C">EB1_h_0C</A>)))) # (!<A HREF="#E1_INCBO_o">E1_INCBO_o</A> & (<A HREF="#A1L123">A1L123</A> & ((<A HREF="#EB1_h_0C">EB1_h_0C</A>))));


<P> --J1L5 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|BO1~1
<P><A NAME="J1L5">J1L5</A> = (<A HREF="#EB1_h_0C">EB1_h_0C</A> & ((<A HREF="#J1L4">J1L4</A> & (<A HREF="#J1_BO1">J1_BO1</A>)) # (!<A HREF="#J1L4">J1L4</A> & ((!<A HREF="#A1L62">A1L62</A>))))) # (!<A HREF="#EB1_h_0C">EB1_h_0C</A> & (<A HREF="#J1_BO1">J1_BO1</A> $ (((<A HREF="#J1L4">J1L4</A>)))));


<P> --J1L2 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|BO0~0
<P><A NAME="J1L2">J1L2</A> = <A HREF="#J1_BO0">J1_BO0</A> $ (<A HREF="#E1_INCBO_o">E1_INCBO_o</A>);


<P> --K1_UP[7] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[7]
<P><A NAME="K1_UP[7]">K1_UP[7]</A> = DFFEAS(<A HREF="#K1L35">K1L35</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#K1L36">K1L36</A>,  ,  ,  ,  );


<P> --K1_UP[6] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[6]
<P><A NAME="K1_UP[6]">K1_UP[6]</A> = DFFEAS(<A HREF="#K1L37">K1L37</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#K1L36">K1L36</A>,  ,  ,  ,  );


<P> --K1_UP[5] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[5]
<P><A NAME="K1_UP[5]">K1_UP[5]</A> = DFFEAS(<A HREF="#K1L38">K1L38</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#K1L36">K1L36</A>,  ,  ,  ,  );


<P> --K1_UP[4] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[4]
<P><A NAME="K1_UP[4]">K1_UP[4]</A> = DFFEAS(<A HREF="#K1L39">K1L39</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#K1L36">K1L36</A>,  ,  ,  ,  );


<P> --K1L20 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~0
<P><A NAME="K1L20">K1L20</A> = (!<A HREF="#K1_UP[7]">K1_UP[7]</A> & (!<A HREF="#K1_UP[6]">K1_UP[6]</A> & (!<A HREF="#K1_UP[5]">K1_UP[5]</A> & !<A HREF="#K1_UP[4]">K1_UP[4]</A>)));


<P> --K1_UP[3] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[3]
<P><A NAME="K1_UP[3]">K1_UP[3]</A> = DFFEAS(<A HREF="#K1L40">K1L40</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#K1L36">K1L36</A>,  ,  ,  ,  );


<P> --K1_UP[2] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[2]
<P><A NAME="K1_UP[2]">K1_UP[2]</A> = DFFEAS(<A HREF="#K1L41">K1L41</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#K1L36">K1L36</A>,  ,  ,  ,  );


<P> --K1_UP[1] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[1]
<P><A NAME="K1_UP[1]">K1_UP[1]</A> = DFFEAS(<A HREF="#K1L42">K1L42</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#K1L36">K1L36</A>,  ,  ,  ,  );


<P> --K1_UP[0] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[0]
<P><A NAME="K1_UP[0]">K1_UP[0]</A> = DFFEAS(<A HREF="#C1_INCFIFO">C1_INCFIFO</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#K1L36">K1L36</A>,  ,  ,  ,  );


<P> --K1L21 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~1
<P><A NAME="K1L21">K1L21</A> = (!<A HREF="#K1_UP[3]">K1_UP[3]</A> & (!<A HREF="#K1_UP[2]">K1_UP[2]</A> & (!<A HREF="#K1_UP[1]">K1_UP[1]</A> & !<A HREF="#K1_UP[0]">K1_UP[0]</A>)));


<P> --K1_DOWN[6] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[6]
<P><A NAME="K1_DOWN[6]">K1_DOWN[6]</A> = DFFEAS(<A HREF="#K1L15">K1L15</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --K1_DOWN[5] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[5]
<P><A NAME="K1_DOWN[5]">K1_DOWN[5]</A> = DFFEAS(<A HREF="#K1L13">K1L13</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --K1_DOWN[4] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[4]
<P><A NAME="K1_DOWN[4]">K1_DOWN[4]</A> = DFFEAS(<A HREF="#K1L11">K1L11</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --K1_DOWN[3] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[3]
<P><A NAME="K1_DOWN[3]">K1_DOWN[3]</A> = DFFEAS(<A HREF="#K1L9">K1L9</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --K1L22 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~2
<P><A NAME="K1L22">K1L22</A> = (!<A HREF="#K1_DOWN[6]">K1_DOWN[6]</A> & (!<A HREF="#K1_DOWN[5]">K1_DOWN[5]</A> & (!<A HREF="#K1_DOWN[4]">K1_DOWN[4]</A> & !<A HREF="#K1_DOWN[3]">K1_DOWN[3]</A>)));


<P> --K1_DOWN[2] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[2]
<P><A NAME="K1_DOWN[2]">K1_DOWN[2]</A> = DFFEAS(<A HREF="#K1L7">K1L7</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --K1_DOWN[1] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[1]
<P><A NAME="K1_DOWN[1]">K1_DOWN[1]</A> = DFFEAS(<A HREF="#K1L5">K1L5</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --K1_DOWN[0] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[0]
<P><A NAME="K1_DOWN[0]">K1_DOWN[0]</A> = DFFEAS(<A HREF="#K1L3">K1L3</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --K1L23 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~3
<P><A NAME="K1L23">K1L23</A> = (!<A HREF="#K1_DOWN[2]">K1_DOWN[2]</A> & (!<A HREF="#K1_DOWN[1]">K1_DOWN[1]</A> & !<A HREF="#K1_DOWN[0]">K1_DOWN[0]</A>));


<P> --K1L24 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~4
<P><A NAME="K1L24">K1L24</A> = (((!<A HREF="#K1L23">K1L23</A>) # (!<A HREF="#K1L22">K1L22</A>)) # (!<A HREF="#K1L21">K1L21</A>)) # (!<A HREF="#K1L20">K1L20</A>);


<P> --EB1L3 is registers:u_registers|addr_decoder:u_addr_decoder|FLUSH_~0
<P><A NAME="EB1L3">EB1L3</A> = (<A HREF="#FB1L9">FB1L9</A> & (!<A HREF="#ADDR[5]">ADDR[5]</A> & (!<A HREF="#ADDR[3]">ADDR[3]</A> & !<A HREF="#ADDR[6]">ADDR[6]</A>)));


<P> --EB1L4 is registers:u_registers|addr_decoder:u_addr_decoder|FLUSH_~1
<P><A NAME="EB1L4">EB1L4</A> = (<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> & (<A HREF="#ADDR[2]">ADDR[2]</A> & <A HREF="#ADDR[4]">ADDR[4]</A>));


<P> --C1_STOPFLUSH is CPU_SM:u_CPU_SM|STOPFLUSH
<P><A NAME="C1_STOPFLUSH">C1_STOPFLUSH</A> = DFFEAS(<A HREF="#Q1L73">Q1L73</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1L4 is registers:u_registers|FLUSHFIFO~0
<P><A NAME="G1L4">G1L4</A> = (<A HREF="#EB1L3">EB1L3</A> & ((<A HREF="#EB1L4">EB1L4</A>) # ((<A HREF="#G1_FLUSHFIFO">G1_FLUSHFIFO</A> & !<A HREF="#C1_STOPFLUSH">C1_STOPFLUSH</A>)))) # (!<A HREF="#EB1L3">EB1L3</A> & (((<A HREF="#G1_FLUSHFIFO">G1_FLUSHFIFO</A> & !<A HREF="#C1_STOPFLUSH">C1_STOPFLUSH</A>))));


<P> --HB1L2 is registers:u_registers|registers_term:u_registers_term|CYCLE_ACTIVE~0
<P><A NAME="HB1L2">HB1L2</A> = (<A HREF="#_CS">_CS</A>) # ((<A HREF="#A1L126">A1L126</A>) # ((<A HREF="#ADDR[6]">ADDR[6]</A>) # (<A HREF="#EB1_h_0C">EB1_h_0C</A>)));


<P> --HB1L1 is registers:u_registers|registers_term:u_registers_term|Add0~0
<P><A NAME="HB1L1">HB1L1</A> = (<A HREF="#HB1_TERM_COUNTER[0]">HB1_TERM_COUNTER[0]</A> & <A HREF="#HB1_TERM_COUNTER[1]">HB1_TERM_COUNTER[1]</A>);


<P> --HB1L9 is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER~0
<P><A NAME="HB1L9">HB1L9</A> = (!<A HREF="#A1L126">A1L126</A> & (<A HREF="#HB1_TERM_COUNTER[2]">HB1_TERM_COUNTER[2]</A> $ (((!<A HREF="#HB1L2">HB1L2</A> & <A HREF="#HB1L1">HB1L1</A>)))));


<P> --HB1L10 is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER~1
<P><A NAME="HB1L10">HB1L10</A> = (!<A HREF="#A1L126">A1L126</A> & (<A HREF="#HB1_TERM_COUNTER[0]">HB1_TERM_COUNTER[0]</A> $ (!<A HREF="#HB1L2">HB1L2</A>)));


<P> --HB1L11 is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER~2
<P><A NAME="HB1L11">HB1L11</A> = (!<A HREF="#A1L126">A1L126</A> & (<A HREF="#HB1_TERM_COUNTER[1]">HB1_TERM_COUNTER[1]</A> $ (((!<A HREF="#HB1L2">HB1L2</A> & <A HREF="#HB1_TERM_COUNTER[0]">HB1_TERM_COUNTER[0]</A>)))));


<P> --K1L16 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|Equal2~0
<P><A NAME="K1L16">K1L16</A> = (<A HREF="#K1_UP[7]">K1_UP[7]</A> & (<A HREF="#K1_UP[6]">K1_UP[6]</A> & (<A HREF="#K1_UP[5]">K1_UP[5]</A> & <A HREF="#K1_UP[4]">K1_UP[4]</A>)));


<P> --K1L17 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|Equal2~1
<P><A NAME="K1L17">K1L17</A> = (<A HREF="#K1_UP[3]">K1_UP[3]</A> & <A HREF="#K1_UP[2]">K1_UP[2]</A>);


<P> --K1L18 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|Equal2~2
<P><A NAME="K1L18">K1L18</A> = (<A HREF="#K1_UP[1]">K1_UP[1]</A> & (<A HREF="#K1_UP[0]">K1_UP[0]</A> & (<A HREF="#K1L16">K1L16</A> & <A HREF="#K1L17">K1L17</A>)));


<P> --FB1_CNTR_O[8] is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]
<P><A NAME="FB1_CNTR_O[8]">FB1_CNTR_O[8]</A> = DFFEAS(<A HREF="#FB1L12">FB1L12</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s1 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s1
<P><A NAME="Y1_state_reg.s1">Y1_state_reg.s1</A> = DFFEAS(<A HREF="#Y1_state_reg.s18">Y1_state_reg.s18</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L14 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector12~0
<P><A NAME="Y1L14">Y1L14</A> = (<A HREF="#Y1_state_reg.s1">Y1_state_reg.s1</A>) # ((!<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> & (!<A HREF="#E1_CCPUREQ">E1_CCPUREQ</A> & !<A HREF="#Y1_state_reg.s0">Y1_state_reg.s0</A>)));


<P> --EB1_WDREGREQ is registers:u_registers|addr_decoder:u_addr_decoder|WDREGREQ
<P><A NAME="EB1_WDREGREQ">EB1_WDREGREQ</A> = (<A HREF="#ADDR[6]">ADDR[6]</A> & (!<A HREF="#_CS">_CS</A> & !<A HREF="#A1L126">A1L126</A>));


<P> --E1_RDFIFO_d is SCSI_SM:u_SCSI_SM|RDFIFO_d
<P><A NAME="E1_RDFIFO_d">E1_RDFIFO_d</A> = DFFEAS(<A HREF="#Y1L2">Y1L2</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --C1_INCFIFO is CPU_SM:u_CPU_SM|INCFIFO
<P><A NAME="C1_INCFIFO">C1_INCFIFO</A> = DFFEAS(<A HREF="#Q1L37">Q1L37</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_DECFIFO is CPU_SM:u_CPU_SM|DECFIFO
<P><A NAME="C1_DECFIFO">C1_DECFIFO</A> = DFFEAS(<A HREF="#Q1L7">Q1L7</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1L14 is SCSI_SM:u_SCSI_SM|RDFIFO_o~0
<P><A NAME="E1L14">E1L14</A> = (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & ((<A HREF="#E1_RDFIFO_o">E1_RDFIFO_o</A>) # ((<A HREF="#E1_RDFIFO_d">E1_RDFIFO_d</A> & !<A HREF="#C1_INCFIFO">C1_INCFIFO</A>))));


<P> --_DREQ is _DREQ
<P><A NAME="_DREQ">_DREQ</A> = INPUT();


<P> --DREQ_ is DREQ_
<P><A NAME="DREQ_">DREQ_</A> = (!<A HREF="#_DREQ">_DREQ</A> & <A HREF="#FB1_CNTR_O[8]">FB1_CNTR_O[8]</A>);


<P> --E1_RIFIFO_d is SCSI_SM:u_SCSI_SM|RIFIFO_d
<P><A NAME="E1_RIFIFO_d">E1_RIFIFO_d</A> = DFFEAS(<A HREF="#Y1L3">Y1L3</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --E1L18 is SCSI_SM:u_SCSI_SM|RIFIFO_o~0
<P><A NAME="E1L18">E1L18</A> = (<A HREF="#E1_RIFIFO_d">E1_RIFIFO_d</A> & !<A HREF="#E1_RDFIFO_d">E1_RDFIFO_d</A>);


<P> --E1L19 is SCSI_SM:u_SCSI_SM|RIFIFO_o~1
<P><A NAME="E1L19">E1L19</A> = (<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (<A HREF="#E1_RIFIFO_o">E1_RIFIFO_o</A>)) # (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (!<A HREF="#C1_INCFIFO">C1_INCFIFO</A> & ((<A HREF="#E1_RIFIFO_o">E1_RIFIFO_o</A>) # (<A HREF="#E1L18">E1L18</A>))));


<P> --Y1_state_reg.s14 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s14
<P><A NAME="Y1_state_reg.s14">Y1_state_reg.s14</A> = DFFEAS(<A HREF="#Y1L13">Y1L13</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1_state_reg.s25 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s25
<P><A NAME="Y1_state_reg.s25">Y1_state_reg.s25</A> = DFFEAS(<A HREF="#Y1L16">Y1L16</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_CDSACK_ is SCSI_SM:u_SCSI_SM|CDSACK_
<P><A NAME="E1_CDSACK_">E1_CDSACK_</A> = DFFEAS(<A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L8 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector1~0
<P><A NAME="Y1L8">Y1L8</A> = (<A HREF="#Y1_state_reg.s14">Y1_state_reg.s14</A> & (((!<A HREF="#E1_CDSACK_">E1_CDSACK_</A>) # (!<A HREF="#Y1_state_reg.s0">Y1_state_reg.s0</A>)))) # (!<A HREF="#Y1_state_reg.s14">Y1_state_reg.s14</A> & (<A HREF="#Y1_state_reg.s25">Y1_state_reg.s25</A> & ((!<A HREF="#E1_CDSACK_">E1_CDSACK_</A>) # (!<A HREF="#Y1_state_reg.s0">Y1_state_reg.s0</A>))));


<P> --Y1L9 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector1~1
<P><A NAME="Y1L9">Y1L9</A> = (<A HREF="#Y1_state_reg.s16">Y1_state_reg.s16</A> & (!<A HREF="#E1_CCPUREQ">E1_CCPUREQ</A> & ((<A HREF="#Y1L30">Y1L30</A>) # (!<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A>))));


<P> --Y1_state_reg.s12 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s12
<P><A NAME="Y1_state_reg.s12">Y1_state_reg.s12</A> = DFFEAS(<A HREF="#Y1_state_reg.s20">Y1_state_reg.s20</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L32 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|always1~2
<P><A NAME="Y1L32">Y1L32</A> = (<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> & !<A HREF="#E1_CCPUREQ">E1_CCPUREQ</A>);


<P> --Y1L10 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector1~2
<P><A NAME="Y1L10">Y1L10</A> = (<A HREF="#Y1L32">Y1L32</A> & (!<A HREF="#Y1_state_reg.s0">Y1_state_reg.s0</A> & ((<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A>) # (!<A HREF="#Y1L31">Y1L31</A>))));


<P> --Y1L11 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector1~3
<P><A NAME="Y1L11">Y1L11</A> = (!<A HREF="#Y1L8">Y1L8</A> & (!<A HREF="#Y1L9">Y1L9</A> & (!<A HREF="#Y1_state_reg.s12">Y1_state_reg.s12</A> & !<A HREF="#Y1L10">Y1L10</A>)));


<P> --Y1L21 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector25~2
<P><A NAME="Y1L21">Y1L21</A> = (<A HREF="#A1L123">A1L123</A> & <A HREF="#Y1_state_reg.s8">Y1_state_reg.s8</A>);


<P> --Y1L12 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector7~0
<P><A NAME="Y1L12">Y1L12</A> = (<A HREF="#E1_CCPUREQ">E1_CCPUREQ</A> & ((<A HREF="#Y1_state_reg.s16">Y1_state_reg.s16</A>) # (!<A HREF="#Y1_state_reg.s0">Y1_state_reg.s0</A>)));


<P> --AS_O_ is AS_O_
<P><A NAME="AS_O_">AS_O_</A> = DFFEAS(<A HREF="#A1L8">A1L8</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --DS_O_ is DS_O_
<P><A NAME="DS_O_">DS_O_</A> = DFFEAS(<A HREF="#A1L88">A1L88</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --AB1_LD_LATCH[0] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[0]
<P><A NAME="AB1_LD_LATCH[0]">AB1_LD_LATCH[0]</A> = DFFEAS(<A HREF="#N4_q_b[7]">N4_q_b[7]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --GB1_ISTR_O[0] is registers:u_registers|registers_istr:u_registers_istr|ISTR_O[0]
<P><A NAME="GB1_ISTR_O[0]">GB1_ISTR_O[0]</A> = DFFEAS(<A HREF="#GB1L15">GB1L15</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --EB1L5 is registers:u_registers|addr_decoder:u_addr_decoder|ISTR_RD_~0
<P><A NAME="EB1L5">EB1L5</A> = (<A HREF="#ADDR[2]">ADDR[2]</A> & <A HREF="#ADDR[4]">ADDR[4]</A>);


<P> --C1_F2CPUL is CPU_SM:u_CPU_SM|F2CPUL
<P><A NAME="C1_F2CPUL">C1_F2CPUL</A> = DFFEAS(<A HREF="#Q1L32">Q1L32</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_S2CPU_o is SCSI_SM:u_SCSI_SM|S2CPU_o
<P><A NAME="E1_S2CPU_o">E1_S2CPU_o</A> = DFFEAS(<A HREF="#Y1L22">Y1L22</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --AB1L1 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[0]~0
<P><A NAME="AB1L1">AB1L1</A> = (!<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>);


<P> --AB1L2 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[0]~1
<P><A NAME="AB1L2">AB1L2</A> = (<A HREF="#A1L123">A1L123</A> & (<A HREF="#EB1L8">EB1L8</A> & (<A HREF="#EB1L5">EB1L5</A> & <A HREF="#AB1L1">AB1L1</A>)));


<P> --AB1L10 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[3]~2
<P><A NAME="AB1L10">AB1L10</A> = (<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>);


<P> --AB1L3 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[0]~3
<P><A NAME="AB1L3">AB1L3</A> = (<A HREF="#AB1_LD_LATCH[0]">AB1_LD_LATCH[0]</A> & ((<A HREF="#AB1L10">AB1L10</A>) # ((<A HREF="#GB1_ISTR_O[0]">GB1_ISTR_O[0]</A> & <A HREF="#AB1L2">AB1L2</A>)))) # (!<A HREF="#AB1_LD_LATCH[0]">AB1_LD_LATCH[0]</A> & (<A HREF="#GB1_ISTR_O[0]">GB1_ISTR_O[0]</A> & (<A HREF="#AB1L2">AB1L2</A>)));


<P> --AB1_LD_LATCH[1] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[1]
<P><A NAME="AB1_LD_LATCH[1]">AB1_LD_LATCH[1]</A> = DFFEAS(<A HREF="#N4_q_b[6]">N4_q_b[6]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --EB1L1 is registers:u_registers|addr_decoder:u_addr_decoder|CONTR_RD_~0
<P><A NAME="EB1L1">EB1L1</A> = (<A HREF="#A1L123">A1L123</A> & (<A HREF="#EB1L8">EB1L8</A> & (!<A HREF="#ADDR[2]">ADDR[2]</A> & !<A HREF="#ADDR[4]">ADDR[4]</A>)));


<P> --AB1L4 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[1]~4
<P><A NAME="AB1L4">AB1L4</A> = (<A HREF="#EB1L1">EB1L1</A> & (!<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1L5 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[1]~5
<P><A NAME="AB1L5">AB1L5</A> = (<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> & ((<A HREF="#AB1L4">AB1L4</A>) # ((<A HREF="#AB1L10">AB1L10</A> & <A HREF="#AB1_LD_LATCH[1]">AB1_LD_LATCH[1]</A>)))) # (!<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A> & (<A HREF="#AB1L10">AB1L10</A> & (<A HREF="#AB1_LD_LATCH[1]">AB1_LD_LATCH[1]</A>)));


<P> --GB1_ISTR_O[1] is registers:u_registers|registers_istr:u_registers_istr|ISTR_O[1]
<P><A NAME="GB1_ISTR_O[1]">GB1_ISTR_O[1]</A> = DFFEAS(<A HREF="#GB1_FF">GB1_FF</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --AB1L6 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[1]~6
<P><A NAME="AB1L6">AB1L6</A> = (<A HREF="#AB1L5">AB1L5</A>) # ((<A HREF="#AB1L2">AB1L2</A> & (<A HREF="#GB1_ISTR_O[1]">GB1_ISTR_O[1]</A> & !<A HREF="#EB1L1">EB1L1</A>)));


<P> --AB1L7 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[2]~7
<P><A NAME="AB1L7">AB1L7</A> = (<A HREF="#A1L123">A1L123</A> & (<A HREF="#ADDR[2]">ADDR[2]</A> & (<A HREF="#AB1L1">AB1L1</A> & !<A HREF="#ADDR[4]">ADDR[4]</A>)));


<P> --AB1L8 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[2]~8
<P><A NAME="AB1L8">AB1L8</A> = (<A HREF="#FB1_CNTR_O[2]">FB1_CNTR_O[2]</A> & ((<A HREF="#AB1L4">AB1L4</A>) # ((<A HREF="#EB1L3">EB1L3</A> & <A HREF="#AB1L7">AB1L7</A>)))) # (!<A HREF="#FB1_CNTR_O[2]">FB1_CNTR_O[2]</A> & (<A HREF="#EB1L3">EB1L3</A> & (<A HREF="#AB1L7">AB1L7</A>)));


<P> --AB1_LD_LATCH[2] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[2]
<P><A NAME="AB1_LD_LATCH[2]">AB1_LD_LATCH[2]</A> = DFFEAS(<A HREF="#N4_q_b[5]">N4_q_b[5]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L9 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[2]~9
<P><A NAME="AB1L9">AB1L9</A> = (<A HREF="#AB1L8">AB1L8</A>) # ((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & (<A HREF="#AB1_LD_LATCH[2]">AB1_LD_LATCH[2]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>)));


<P> --AB1_LD_LATCH[3] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[3]
<P><A NAME="AB1_LD_LATCH[3]">AB1_LD_LATCH[3]</A> = DFFEAS(<A HREF="#N4_q_b[4]">N4_q_b[4]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L11 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[3]~10
<P><A NAME="AB1L11">AB1L11</A> = (<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & (<A HREF="#AB1_LD_LATCH[3]">AB1_LD_LATCH[3]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_LD_LATCH[4] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[4]
<P><A NAME="AB1_LD_LATCH[4]">AB1_LD_LATCH[4]</A> = DFFEAS(<A HREF="#N4_q_b[3]">N4_q_b[3]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L12 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[4]~11
<P><A NAME="AB1L12">AB1L12</A> = (<A HREF="#FB1_CNTR_O[4]">FB1_CNTR_O[4]</A> & ((<A HREF="#AB1L4">AB1L4</A>) # ((<A HREF="#AB1L10">AB1L10</A> & <A HREF="#AB1_LD_LATCH[4]">AB1_LD_LATCH[4]</A>)))) # (!<A HREF="#FB1_CNTR_O[4]">FB1_CNTR_O[4]</A> & (<A HREF="#AB1L10">AB1L10</A> & (<A HREF="#AB1_LD_LATCH[4]">AB1_LD_LATCH[4]</A>)));


<P> --GB1_ISTR_O[4] is registers:u_registers|registers_istr:u_registers_istr|ISTR_O[4]
<P><A NAME="GB1_ISTR_O[4]">GB1_ISTR_O[4]</A> = DFFEAS(<A HREF="#GB1_INT_P">GB1_INT_P</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --AB1L13 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[4]~12
<P><A NAME="AB1L13">AB1L13</A> = (<A HREF="#AB1L12">AB1L12</A>) # ((<A HREF="#AB1L2">AB1L2</A> & (<A HREF="#GB1_ISTR_O[4]">GB1_ISTR_O[4]</A> & !<A HREF="#EB1L1">EB1L1</A>)));


<P> --GB1_ISTR_O[5] is registers:u_registers|registers_istr:u_registers_istr|ISTR_O[5]
<P><A NAME="GB1_ISTR_O[5]">GB1_ISTR_O[5]</A> = DFFEAS(<A HREF="#GB1_INT_F">GB1_INT_F</A>, !<A HREF="#X1__clk0">X1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --AB1_LD_LATCH[5] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[5]
<P><A NAME="AB1_LD_LATCH[5]">AB1_LD_LATCH[5]</A> = DFFEAS(<A HREF="#N4_q_b[2]">N4_q_b[2]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L14 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[5]~13
<P><A NAME="AB1L14">AB1L14</A> = (<A HREF="#AB1L10">AB1L10</A> & ((<A HREF="#AB1_LD_LATCH[5]">AB1_LD_LATCH[5]</A>) # ((<A HREF="#AB1L2">AB1L2</A> & <A HREF="#GB1_ISTR_O[5]">GB1_ISTR_O[5]</A>)))) # (!<A HREF="#AB1L10">AB1L10</A> & (<A HREF="#AB1L2">AB1L2</A> & (<A HREF="#GB1_ISTR_O[5]">GB1_ISTR_O[5]</A>)));


<P> --AB1_LD_LATCH[6] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[6]
<P><A NAME="AB1_LD_LATCH[6]">AB1_LD_LATCH[6]</A> = DFFEAS(<A HREF="#N4_q_b[1]">N4_q_b[1]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L15 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[6]~14
<P><A NAME="AB1L15">AB1L15</A> = (<A HREF="#AB1L10">AB1L10</A> & ((<A HREF="#AB1_LD_LATCH[6]">AB1_LD_LATCH[6]</A>) # ((<A HREF="#AB1L2">AB1L2</A> & <A HREF="#GB1_ISTR_O[5]">GB1_ISTR_O[5]</A>)))) # (!<A HREF="#AB1L10">AB1L10</A> & (<A HREF="#AB1L2">AB1L2</A> & (<A HREF="#GB1_ISTR_O[5]">GB1_ISTR_O[5]</A>)));


<P> --AB1_LD_LATCH[7] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[7]
<P><A NAME="AB1_LD_LATCH[7]">AB1_LD_LATCH[7]</A> = DFFEAS(<A HREF="#N4_q_b[0]">N4_q_b[0]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L16 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[7]~15
<P><A NAME="AB1L16">AB1L16</A> = (<A HREF="#AB1L10">AB1L10</A> & ((<A HREF="#AB1_LD_LATCH[7]">AB1_LD_LATCH[7]</A>) # ((<A HREF="#AB1L2">AB1L2</A> & <A HREF="#GB1_ISTR_O[5]">GB1_ISTR_O[5]</A>)))) # (!<A HREF="#AB1L10">AB1L10</A> & (<A HREF="#AB1L2">AB1L2</A> & (<A HREF="#GB1_ISTR_O[5]">GB1_ISTR_O[5]</A>)));


<P> --BB1_SCSI_DATA_LATCHED[0] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[0]
<P><A NAME="BB1_SCSI_DATA_LATCHED[0]">BB1_SCSI_DATA_LATCHED[0]</A> = DFFEAS(<A HREF="#A1L99">A1L99</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>,  , <A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>,  ,  ,  ,  );


<P> --AB1_LD_LATCH[8] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[8]
<P><A NAME="AB1_LD_LATCH[8]">AB1_LD_LATCH[8]</A> = DFFEAS(<A HREF="#N3_q_b[7]">N3_q_b[7]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L17 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[8]~16
<P><A NAME="AB1L17">AB1L17</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[0]">BB1_SCSI_DATA_LATCHED[0]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & <A HREF="#AB1_LD_LATCH[8]">AB1_LD_LATCH[8]</A>))));


<P> --AB1L18 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[8]~17
<P><A NAME="AB1L18">AB1L18</A> = (<A HREF="#AB1L17">AB1L17</A>) # ((<A HREF="#FB1_CNTR_O[8]">FB1_CNTR_O[8]</A> & (<A HREF="#AB1L1">AB1L1</A> & <A HREF="#EB1L1">EB1L1</A>)));


<P> --BB1_SCSI_DATA_LATCHED[1] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[1]
<P><A NAME="BB1_SCSI_DATA_LATCHED[1]">BB1_SCSI_DATA_LATCHED[1]</A> = DFFEAS(<A HREF="#A1L101">A1L101</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>,  , <A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>,  ,  ,  ,  );


<P> --AB1_LD_LATCH[9] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[9]
<P><A NAME="AB1_LD_LATCH[9]">AB1_LD_LATCH[9]</A> = DFFEAS(<A HREF="#N3_q_b[6]">N3_q_b[6]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L19 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[9]~18
<P><A NAME="AB1L19">AB1L19</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[1]">BB1_SCSI_DATA_LATCHED[1]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & <A HREF="#AB1_LD_LATCH[9]">AB1_LD_LATCH[9]</A>))));


<P> --BB1_SCSI_DATA_LATCHED[2] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[2]
<P><A NAME="BB1_SCSI_DATA_LATCHED[2]">BB1_SCSI_DATA_LATCHED[2]</A> = DFFEAS(<A HREF="#A1L103">A1L103</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>,  , <A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>,  ,  ,  ,  );


<P> --AB1_LD_LATCH[10] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[10]
<P><A NAME="AB1_LD_LATCH[10]">AB1_LD_LATCH[10]</A> = DFFEAS(<A HREF="#N3_q_b[5]">N3_q_b[5]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L20 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[10]~19
<P><A NAME="AB1L20">AB1L20</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[2]">BB1_SCSI_DATA_LATCHED[2]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & <A HREF="#AB1_LD_LATCH[10]">AB1_LD_LATCH[10]</A>))));


<P> --BB1_SCSI_DATA_LATCHED[3] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[3]
<P><A NAME="BB1_SCSI_DATA_LATCHED[3]">BB1_SCSI_DATA_LATCHED[3]</A> = DFFEAS(<A HREF="#A1L105">A1L105</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>,  , <A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>,  ,  ,  ,  );


<P> --AB1_LD_LATCH[11] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[11]
<P><A NAME="AB1_LD_LATCH[11]">AB1_LD_LATCH[11]</A> = DFFEAS(<A HREF="#N3_q_b[4]">N3_q_b[4]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L21 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[11]~20
<P><A NAME="AB1L21">AB1L21</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[3]">BB1_SCSI_DATA_LATCHED[3]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & <A HREF="#AB1_LD_LATCH[11]">AB1_LD_LATCH[11]</A>))));


<P> --BB1_SCSI_DATA_LATCHED[4] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[4]
<P><A NAME="BB1_SCSI_DATA_LATCHED[4]">BB1_SCSI_DATA_LATCHED[4]</A> = DFFEAS(<A HREF="#A1L107">A1L107</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>,  , <A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>,  ,  ,  ,  );


<P> --AB1_LD_LATCH[12] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[12]
<P><A NAME="AB1_LD_LATCH[12]">AB1_LD_LATCH[12]</A> = DFFEAS(<A HREF="#N3_q_b[3]">N3_q_b[3]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L22 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[12]~21
<P><A NAME="AB1L22">AB1L22</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[4]">BB1_SCSI_DATA_LATCHED[4]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & <A HREF="#AB1_LD_LATCH[12]">AB1_LD_LATCH[12]</A>))));


<P> --BB1_SCSI_DATA_LATCHED[5] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[5]
<P><A NAME="BB1_SCSI_DATA_LATCHED[5]">BB1_SCSI_DATA_LATCHED[5]</A> = DFFEAS(<A HREF="#A1L109">A1L109</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>,  , <A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>,  ,  ,  ,  );


<P> --AB1_LD_LATCH[13] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[13]
<P><A NAME="AB1_LD_LATCH[13]">AB1_LD_LATCH[13]</A> = DFFEAS(<A HREF="#N3_q_b[2]">N3_q_b[2]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L23 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[13]~22
<P><A NAME="AB1L23">AB1L23</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[5]">BB1_SCSI_DATA_LATCHED[5]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & <A HREF="#AB1_LD_LATCH[13]">AB1_LD_LATCH[13]</A>))));


<P> --BB1_SCSI_DATA_LATCHED[6] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[6]
<P><A NAME="BB1_SCSI_DATA_LATCHED[6]">BB1_SCSI_DATA_LATCHED[6]</A> = DFFEAS(<A HREF="#A1L111">A1L111</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>,  , <A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>,  ,  ,  ,  );


<P> --AB1_LD_LATCH[14] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[14]
<P><A NAME="AB1_LD_LATCH[14]">AB1_LD_LATCH[14]</A> = DFFEAS(<A HREF="#N3_q_b[1]">N3_q_b[1]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L24 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[14]~23
<P><A NAME="AB1L24">AB1L24</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[6]">BB1_SCSI_DATA_LATCHED[6]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & <A HREF="#AB1_LD_LATCH[14]">AB1_LD_LATCH[14]</A>))));


<P> --BB1_SCSI_DATA_LATCHED[7] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[7]
<P><A NAME="BB1_SCSI_DATA_LATCHED[7]">BB1_SCSI_DATA_LATCHED[7]</A> = DFFEAS(<A HREF="#A1L113">A1L113</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>,  , <A HREF="#E1_nLS2CPU">E1_nLS2CPU</A>,  ,  ,  ,  );


<P> --AB1_LD_LATCH[15] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[15]
<P><A NAME="AB1_LD_LATCH[15]">AB1_LD_LATCH[15]</A> = DFFEAS(<A HREF="#N3_q_b[0]">N3_q_b[0]</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L25 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[15]~24
<P><A NAME="AB1L25">AB1L25</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[7]">BB1_SCSI_DATA_LATCHED[7]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUL">C1_F2CPUL</A> & <A HREF="#AB1_LD_LATCH[15]">AB1_LD_LATCH[15]</A>))));


<P> --AB1_UD_LATCH[0] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[0]
<P><A NAME="AB1_UD_LATCH[0]">AB1_UD_LATCH[0]</A> = DFFEAS(<A HREF="#AB1L76">AB1L76</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --C1_F2CPUH is CPU_SM:u_CPU_SM|F2CPUH
<P><A NAME="C1_F2CPUH">C1_F2CPUH</A> = DFFEAS(<A HREF="#Q1L28">Q1L28</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --AB1L26 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[16]~25
<P><A NAME="AB1L26">AB1L26</A> = (<A HREF="#AB1_UD_LATCH[0]">AB1_UD_LATCH[0]</A> & (<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_UD_LATCH[1] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[1]
<P><A NAME="AB1_UD_LATCH[1]">AB1_UD_LATCH[1]</A> = DFFEAS(<A HREF="#AB1L77">AB1L77</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L27 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[17]~26
<P><A NAME="AB1L27">AB1L27</A> = (<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & (<A HREF="#AB1_UD_LATCH[1]">AB1_UD_LATCH[1]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_UD_LATCH[2] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[2]
<P><A NAME="AB1_UD_LATCH[2]">AB1_UD_LATCH[2]</A> = DFFEAS(<A HREF="#AB1L78">AB1L78</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L28 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[18]~27
<P><A NAME="AB1L28">AB1L28</A> = (<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & (<A HREF="#AB1_UD_LATCH[2]">AB1_UD_LATCH[2]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_UD_LATCH[3] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[3]
<P><A NAME="AB1_UD_LATCH[3]">AB1_UD_LATCH[3]</A> = DFFEAS(<A HREF="#AB1L79">AB1L79</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L29 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[19]~28
<P><A NAME="AB1L29">AB1L29</A> = (<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & (<A HREF="#AB1_UD_LATCH[3]">AB1_UD_LATCH[3]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_UD_LATCH[4] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[4]
<P><A NAME="AB1_UD_LATCH[4]">AB1_UD_LATCH[4]</A> = DFFEAS(<A HREF="#AB1L80">AB1L80</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L30 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[20]~29
<P><A NAME="AB1L30">AB1L30</A> = (<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & (<A HREF="#AB1_UD_LATCH[4]">AB1_UD_LATCH[4]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_UD_LATCH[5] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[5]
<P><A NAME="AB1_UD_LATCH[5]">AB1_UD_LATCH[5]</A> = DFFEAS(<A HREF="#AB1L81">AB1L81</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L31 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[21]~30
<P><A NAME="AB1L31">AB1L31</A> = (<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & (<A HREF="#AB1_UD_LATCH[5]">AB1_UD_LATCH[5]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_UD_LATCH[6] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[6]
<P><A NAME="AB1_UD_LATCH[6]">AB1_UD_LATCH[6]</A> = DFFEAS(<A HREF="#AB1L82">AB1L82</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L32 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[22]~31
<P><A NAME="AB1L32">AB1L32</A> = (<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & (<A HREF="#AB1_UD_LATCH[6]">AB1_UD_LATCH[6]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_UD_LATCH[7] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[7]
<P><A NAME="AB1_UD_LATCH[7]">AB1_UD_LATCH[7]</A> = DFFEAS(<A HREF="#AB1L83">AB1L83</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L33 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[23]~32
<P><A NAME="AB1L33">AB1L33</A> = (<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & (<A HREF="#AB1_UD_LATCH[7]">AB1_UD_LATCH[7]</A> & !<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A>));


<P> --AB1_UD_LATCH[8] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[8]
<P><A NAME="AB1_UD_LATCH[8]">AB1_UD_LATCH[8]</A> = DFFEAS(<A HREF="#AB1L84">AB1L84</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L34 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[24]~33
<P><A NAME="AB1L34">AB1L34</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[0]">BB1_SCSI_DATA_LATCHED[0]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & <A HREF="#AB1_UD_LATCH[8]">AB1_UD_LATCH[8]</A>))));


<P> --AB1_UD_LATCH[9] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[9]
<P><A NAME="AB1_UD_LATCH[9]">AB1_UD_LATCH[9]</A> = DFFEAS(<A HREF="#AB1L85">AB1L85</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L35 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[25]~34
<P><A NAME="AB1L35">AB1L35</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[1]">BB1_SCSI_DATA_LATCHED[1]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & <A HREF="#AB1_UD_LATCH[9]">AB1_UD_LATCH[9]</A>))));


<P> --AB1_UD_LATCH[10] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[10]
<P><A NAME="AB1_UD_LATCH[10]">AB1_UD_LATCH[10]</A> = DFFEAS(<A HREF="#AB1L86">AB1L86</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L36 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[26]~35
<P><A NAME="AB1L36">AB1L36</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[2]">BB1_SCSI_DATA_LATCHED[2]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & <A HREF="#AB1_UD_LATCH[10]">AB1_UD_LATCH[10]</A>))));


<P> --AB1_UD_LATCH[11] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[11]
<P><A NAME="AB1_UD_LATCH[11]">AB1_UD_LATCH[11]</A> = DFFEAS(<A HREF="#AB1L87">AB1L87</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L37 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[27]~36
<P><A NAME="AB1L37">AB1L37</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[3]">BB1_SCSI_DATA_LATCHED[3]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & <A HREF="#AB1_UD_LATCH[11]">AB1_UD_LATCH[11]</A>))));


<P> --AB1_UD_LATCH[12] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[12]
<P><A NAME="AB1_UD_LATCH[12]">AB1_UD_LATCH[12]</A> = DFFEAS(<A HREF="#AB1L88">AB1L88</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L38 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[28]~37
<P><A NAME="AB1L38">AB1L38</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[4]">BB1_SCSI_DATA_LATCHED[4]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & <A HREF="#AB1_UD_LATCH[12]">AB1_UD_LATCH[12]</A>))));


<P> --AB1_UD_LATCH[13] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[13]
<P><A NAME="AB1_UD_LATCH[13]">AB1_UD_LATCH[13]</A> = DFFEAS(<A HREF="#AB1L89">AB1L89</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L39 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[29]~38
<P><A NAME="AB1L39">AB1L39</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[5]">BB1_SCSI_DATA_LATCHED[5]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & <A HREF="#AB1_UD_LATCH[13]">AB1_UD_LATCH[13]</A>))));


<P> --AB1_UD_LATCH[14] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[14]
<P><A NAME="AB1_UD_LATCH[14]">AB1_UD_LATCH[14]</A> = DFFEAS(<A HREF="#AB1L90">AB1L90</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L40 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[30]~39
<P><A NAME="AB1L40">AB1L40</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[6]">BB1_SCSI_DATA_LATCHED[6]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & <A HREF="#AB1_UD_LATCH[14]">AB1_UD_LATCH[14]</A>))));


<P> --AB1_UD_LATCH[15] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[15]
<P><A NAME="AB1_UD_LATCH[15]">AB1_UD_LATCH[15]</A> = DFFEAS(<A HREF="#AB1L91">AB1L91</A>, <A HREF="#X1__clk2">X1__clk2</A>,  ,  , <A HREF="#C1_PAS">C1_PAS</A>,  ,  ,  ,  );


<P> --AB1L41 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[31]~40
<P><A NAME="AB1L41">AB1L41</A> = (<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (<A HREF="#BB1_SCSI_DATA_LATCHED[7]">BB1_SCSI_DATA_LATCHED[7]</A>)) # (!<A HREF="#E1_S2CPU_o">E1_S2CPU_o</A> & (((<A HREF="#C1_F2CPUH">C1_F2CPUH</A> & <A HREF="#AB1_UD_LATCH[15]">AB1_UD_LATCH[15]</A>))));


<P> --C1_DIEH is CPU_SM:u_CPU_SM|DIEH
<P><A NAME="C1_DIEH">C1_DIEH</A> = DFFEAS(<A HREF="#Q1L10">Q1L10</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --BB1L10 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[0]~0
<P><A NAME="BB1L10">BB1L10</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L44">A1L44</A> & (<A HREF="#C1_DIEH">C1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L12">A1L12</A>))));


<P> --E1_CPU2S_o is SCSI_SM:u_SCSI_SM|CPU2S_o
<P><A NAME="E1_CPU2S_o">E1_CPU2S_o</A> = DFFEAS(<A HREF="#Y1L24">Y1L24</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --E1_F2S_o is SCSI_SM:u_SCSI_SM|F2S_o
<P><A NAME="E1_F2S_o">E1_F2S_o</A> = DFFEAS(<A HREF="#Y1_WideOr22">Y1_WideOr22</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --BB1L11 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[0]~1
<P><A NAME="BB1L11">BB1L11</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#J1_BO0">J1_BO0</A>)))) # (!<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#N3_q_b[7]">N3_q_b[7]</A>)) # (!<A HREF="#J1_BO0">J1_BO0</A> & ((<A HREF="#N1_q_b[7]">N1_q_b[7]</A>)))));


<P> --BB1L12 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[0]~2
<P><A NAME="BB1L12">BB1L12</A> = (<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#BB1L11">BB1L11</A> & (<A HREF="#N4_q_b[7]">N4_q_b[7]</A>)) # (!<A HREF="#BB1L11">BB1L11</A> & ((<A HREF="#N2_q_b[7]">N2_q_b[7]</A>))))) # (!<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#BB1L11">BB1L11</A>))));


<P> --BB1L13 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[0]~3
<P><A NAME="BB1L13">BB1L13</A> = (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & (<A HREF="#BB1L10">BB1L10</A> & (!<A HREF="#E1_F2S_o">E1_F2S_o</A>))) # (!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & (((<A HREF="#E1_F2S_o">E1_F2S_o</A> & <A HREF="#BB1L12">BB1L12</A>))));


<P> --BB1L14 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[1]~4
<P><A NAME="BB1L14">BB1L14</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L46">A1L46</A> & (<A HREF="#C1_DIEH">C1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L14">A1L14</A>))));


<P> --BB1L15 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[1]~5
<P><A NAME="BB1L15">BB1L15</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#J1_BO0">J1_BO0</A>)))) # (!<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#N3_q_b[6]">N3_q_b[6]</A>)) # (!<A HREF="#J1_BO0">J1_BO0</A> & ((<A HREF="#N1_q_b[6]">N1_q_b[6]</A>)))));


<P> --BB1L16 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[1]~6
<P><A NAME="BB1L16">BB1L16</A> = (<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#BB1L15">BB1L15</A> & (<A HREF="#N4_q_b[6]">N4_q_b[6]</A>)) # (!<A HREF="#BB1L15">BB1L15</A> & ((<A HREF="#N2_q_b[6]">N2_q_b[6]</A>))))) # (!<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#BB1L15">BB1L15</A>))));


<P> --BB1L17 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[1]~7
<P><A NAME="BB1L17">BB1L17</A> = (<A HREF="#E1_F2S_o">E1_F2S_o</A> & (((!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & <A HREF="#BB1L16">BB1L16</A>)))) # (!<A HREF="#E1_F2S_o">E1_F2S_o</A> & (<A HREF="#BB1L14">BB1L14</A> & (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A>)));


<P> --BB1L18 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[2]~8
<P><A NAME="BB1L18">BB1L18</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L48">A1L48</A> & (<A HREF="#C1_DIEH">C1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L16">A1L16</A>))));


<P> --BB1L19 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[2]~9
<P><A NAME="BB1L19">BB1L19</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#J1_BO0">J1_BO0</A>)))) # (!<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#N3_q_b[5]">N3_q_b[5]</A>)) # (!<A HREF="#J1_BO0">J1_BO0</A> & ((<A HREF="#N1_q_b[5]">N1_q_b[5]</A>)))));


<P> --BB1L20 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[2]~10
<P><A NAME="BB1L20">BB1L20</A> = (<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#BB1L19">BB1L19</A> & (<A HREF="#N4_q_b[5]">N4_q_b[5]</A>)) # (!<A HREF="#BB1L19">BB1L19</A> & ((<A HREF="#N2_q_b[5]">N2_q_b[5]</A>))))) # (!<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#BB1L19">BB1L19</A>))));


<P> --BB1L21 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[2]~11
<P><A NAME="BB1L21">BB1L21</A> = (<A HREF="#E1_F2S_o">E1_F2S_o</A> & (((!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & <A HREF="#BB1L20">BB1L20</A>)))) # (!<A HREF="#E1_F2S_o">E1_F2S_o</A> & (<A HREF="#BB1L18">BB1L18</A> & (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A>)));


<P> --BB1L22 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[3]~12
<P><A NAME="BB1L22">BB1L22</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L50">A1L50</A> & (<A HREF="#C1_DIEH">C1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L18">A1L18</A>))));


<P> --BB1L23 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[3]~13
<P><A NAME="BB1L23">BB1L23</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#J1_BO0">J1_BO0</A>)))) # (!<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#N3_q_b[4]">N3_q_b[4]</A>)) # (!<A HREF="#J1_BO0">J1_BO0</A> & ((<A HREF="#N1_q_b[4]">N1_q_b[4]</A>)))));


<P> --BB1L24 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[3]~14
<P><A NAME="BB1L24">BB1L24</A> = (<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#BB1L23">BB1L23</A> & (<A HREF="#N4_q_b[4]">N4_q_b[4]</A>)) # (!<A HREF="#BB1L23">BB1L23</A> & ((<A HREF="#N2_q_b[4]">N2_q_b[4]</A>))))) # (!<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#BB1L23">BB1L23</A>))));


<P> --BB1L25 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[3]~15
<P><A NAME="BB1L25">BB1L25</A> = (<A HREF="#E1_F2S_o">E1_F2S_o</A> & (((!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & <A HREF="#BB1L24">BB1L24</A>)))) # (!<A HREF="#E1_F2S_o">E1_F2S_o</A> & (<A HREF="#BB1L22">BB1L22</A> & (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A>)));


<P> --BB1L26 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[4]~16
<P><A NAME="BB1L26">BB1L26</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L52">A1L52</A> & (<A HREF="#C1_DIEH">C1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L20">A1L20</A>))));


<P> --BB1L27 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[4]~17
<P><A NAME="BB1L27">BB1L27</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#J1_BO0">J1_BO0</A>)))) # (!<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#N3_q_b[3]">N3_q_b[3]</A>)) # (!<A HREF="#J1_BO0">J1_BO0</A> & ((<A HREF="#N1_q_b[3]">N1_q_b[3]</A>)))));


<P> --BB1L28 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[4]~18
<P><A NAME="BB1L28">BB1L28</A> = (<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#BB1L27">BB1L27</A> & (<A HREF="#N4_q_b[3]">N4_q_b[3]</A>)) # (!<A HREF="#BB1L27">BB1L27</A> & ((<A HREF="#N2_q_b[3]">N2_q_b[3]</A>))))) # (!<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#BB1L27">BB1L27</A>))));


<P> --BB1L29 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[4]~19
<P><A NAME="BB1L29">BB1L29</A> = (<A HREF="#E1_F2S_o">E1_F2S_o</A> & (((!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & <A HREF="#BB1L28">BB1L28</A>)))) # (!<A HREF="#E1_F2S_o">E1_F2S_o</A> & (<A HREF="#BB1L26">BB1L26</A> & (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A>)));


<P> --BB1L30 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[5]~20
<P><A NAME="BB1L30">BB1L30</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L54">A1L54</A> & (<A HREF="#C1_DIEH">C1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L22">A1L22</A>))));


<P> --BB1L31 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[5]~21
<P><A NAME="BB1L31">BB1L31</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#J1_BO0">J1_BO0</A>)))) # (!<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#N3_q_b[2]">N3_q_b[2]</A>)) # (!<A HREF="#J1_BO0">J1_BO0</A> & ((<A HREF="#N1_q_b[2]">N1_q_b[2]</A>)))));


<P> --BB1L32 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[5]~22
<P><A NAME="BB1L32">BB1L32</A> = (<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#BB1L31">BB1L31</A> & (<A HREF="#N4_q_b[2]">N4_q_b[2]</A>)) # (!<A HREF="#BB1L31">BB1L31</A> & ((<A HREF="#N2_q_b[2]">N2_q_b[2]</A>))))) # (!<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#BB1L31">BB1L31</A>))));


<P> --BB1L33 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[5]~23
<P><A NAME="BB1L33">BB1L33</A> = (<A HREF="#E1_F2S_o">E1_F2S_o</A> & (((!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & <A HREF="#BB1L32">BB1L32</A>)))) # (!<A HREF="#E1_F2S_o">E1_F2S_o</A> & (<A HREF="#BB1L30">BB1L30</A> & (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A>)));


<P> --BB1L34 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[6]~24
<P><A NAME="BB1L34">BB1L34</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L56">A1L56</A> & (<A HREF="#C1_DIEH">C1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L24">A1L24</A>))));


<P> --BB1L35 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[6]~25
<P><A NAME="BB1L35">BB1L35</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#J1_BO0">J1_BO0</A>)))) # (!<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#N3_q_b[1]">N3_q_b[1]</A>)) # (!<A HREF="#J1_BO0">J1_BO0</A> & ((<A HREF="#N1_q_b[1]">N1_q_b[1]</A>)))));


<P> --BB1L36 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[6]~26
<P><A NAME="BB1L36">BB1L36</A> = (<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#BB1L35">BB1L35</A> & (<A HREF="#N4_q_b[1]">N4_q_b[1]</A>)) # (!<A HREF="#BB1L35">BB1L35</A> & ((<A HREF="#N2_q_b[1]">N2_q_b[1]</A>))))) # (!<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#BB1L35">BB1L35</A>))));


<P> --BB1L37 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[6]~27
<P><A NAME="BB1L37">BB1L37</A> = (<A HREF="#E1_F2S_o">E1_F2S_o</A> & (((!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & <A HREF="#BB1L36">BB1L36</A>)))) # (!<A HREF="#E1_F2S_o">E1_F2S_o</A> & (<A HREF="#BB1L34">BB1L34</A> & (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A>)));


<P> --BB1L38 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[7]~28
<P><A NAME="BB1L38">BB1L38</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L58">A1L58</A> & (<A HREF="#C1_DIEH">C1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L26">A1L26</A>))));


<P> --BB1L39 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[7]~29
<P><A NAME="BB1L39">BB1L39</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#J1_BO0">J1_BO0</A>)))) # (!<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#N3_q_b[0]">N3_q_b[0]</A>)) # (!<A HREF="#J1_BO0">J1_BO0</A> & ((<A HREF="#N1_q_b[0]">N1_q_b[0]</A>)))));


<P> --BB1L40 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[7]~30
<P><A NAME="BB1L40">BB1L40</A> = (<A HREF="#J1_BO1">J1_BO1</A> & ((<A HREF="#BB1L39">BB1L39</A> & (<A HREF="#N4_q_b[0]">N4_q_b[0]</A>)) # (!<A HREF="#BB1L39">BB1L39</A> & ((<A HREF="#N2_q_b[0]">N2_q_b[0]</A>))))) # (!<A HREF="#J1_BO1">J1_BO1</A> & (((<A HREF="#BB1L39">BB1L39</A>))));


<P> --BB1L41 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[7]~31
<P><A NAME="BB1L41">BB1L41</A> = (<A HREF="#E1_F2S_o">E1_F2S_o</A> & (((!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & <A HREF="#BB1L40">BB1L40</A>)))) # (!<A HREF="#E1_F2S_o">E1_F2S_o</A> & (<A HREF="#BB1L38">BB1L38</A> & (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A>)));


<P> --G1L2 is registers:u_registers|A1~0
<P><A NAME="G1L2">G1L2</A> = (<A HREF="#EB1_h_0C">EB1_h_0C</A> & ((<A HREF="#A1L123">A1L123</A> & (<A HREF="#G1_A1">G1_A1</A>)) # (!<A HREF="#A1L123">A1L123</A> & ((<A HREF="#A1L62">A1L62</A>))))) # (!<A HREF="#EB1_h_0C">EB1_h_0C</A> & (<A HREF="#G1_A1">G1_A1</A>));


<P> --Y1_INCBO is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|INCBO
<P><A NAME="Y1_INCBO">Y1_INCBO</A> = (<A HREF="#Y1_state_reg.s1">Y1_state_reg.s1</A>) # (<A HREF="#Y1_state_reg.s12">Y1_state_reg.s12</A>);


<P> --K1L35 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~0
<P><A NAME="K1L35">K1L35</A> = (<A HREF="#C1_INCFIFO">C1_INCFIFO</A> & ((<A HREF="#K1_UP[6]">K1_UP[6]</A>) # (<A HREF="#K1_DOWN[0]">K1_DOWN[0]</A>)));


<P> --K1L36 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~1
<P><A NAME="K1L36">K1L36</A> = (<A HREF="#C1_INCFIFO">C1_INCFIFO</A>) # ((<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & ((!<A HREF="#K1L21">K1L21</A>) # (!<A HREF="#K1L20">K1L20</A>))));


<P> --K1L37 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~2
<P><A NAME="K1L37">K1L37</A> = (<A HREF="#C1_INCFIFO">C1_INCFIFO</A> & ((<A HREF="#K1_UP[5]">K1_UP[5]</A>) # (<A HREF="#K1_DOWN[1]">K1_DOWN[1]</A>)));


<P> --K1L38 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~3
<P><A NAME="K1L38">K1L38</A> = (<A HREF="#C1_INCFIFO">C1_INCFIFO</A> & ((<A HREF="#K1_UP[4]">K1_UP[4]</A>) # (<A HREF="#K1_DOWN[2]">K1_DOWN[2]</A>)));


<P> --K1L39 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~4
<P><A NAME="K1L39">K1L39</A> = (<A HREF="#C1_INCFIFO">C1_INCFIFO</A> & ((<A HREF="#K1_UP[3]">K1_UP[3]</A>) # (<A HREF="#K1_DOWN[3]">K1_DOWN[3]</A>)));


<P> --K1L40 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~5
<P><A NAME="K1L40">K1L40</A> = (<A HREF="#C1_INCFIFO">C1_INCFIFO</A> & ((<A HREF="#K1_UP[2]">K1_UP[2]</A>) # (<A HREF="#K1_DOWN[4]">K1_DOWN[4]</A>)));


<P> --K1L41 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~6
<P><A NAME="K1L41">K1L41</A> = (<A HREF="#C1_INCFIFO">C1_INCFIFO</A> & ((<A HREF="#K1_UP[1]">K1_UP[1]</A>) # (<A HREF="#K1_DOWN[5]">K1_DOWN[5]</A>)));


<P> --K1L42 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~7
<P><A NAME="K1L42">K1L42</A> = (<A HREF="#C1_INCFIFO">C1_INCFIFO</A> & ((<A HREF="#K1_UP[0]">K1_UP[0]</A>) # (<A HREF="#K1_DOWN[6]">K1_DOWN[6]</A>)));


<P> --K1L15 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[6]~0
<P><A NAME="K1L15">K1L15</A> = (<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (((<A HREF="#K1_UP[1]">K1_UP[1]</A>) # (<A HREF="#K1_DOWN[5]">K1_DOWN[5]</A>)))) # (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (<A HREF="#K1_DOWN[6]">K1_DOWN[6]</A>));


<P> --K1L13 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[5]~1
<P><A NAME="K1L13">K1L13</A> = (<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (((<A HREF="#K1_UP[2]">K1_UP[2]</A>) # (<A HREF="#K1_DOWN[4]">K1_DOWN[4]</A>)))) # (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (<A HREF="#K1_DOWN[5]">K1_DOWN[5]</A>));


<P> --K1L11 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[4]~2
<P><A NAME="K1L11">K1L11</A> = (<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (((<A HREF="#K1_UP[3]">K1_UP[3]</A>) # (<A HREF="#K1_DOWN[3]">K1_DOWN[3]</A>)))) # (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (<A HREF="#K1_DOWN[4]">K1_DOWN[4]</A>));


<P> --K1L9 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[3]~3
<P><A NAME="K1L9">K1L9</A> = (<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (((<A HREF="#K1_UP[4]">K1_UP[4]</A>) # (<A HREF="#K1_DOWN[2]">K1_DOWN[2]</A>)))) # (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (<A HREF="#K1_DOWN[3]">K1_DOWN[3]</A>));


<P> --K1L7 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[2]~4
<P><A NAME="K1L7">K1L7</A> = (<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (((<A HREF="#K1_UP[5]">K1_UP[5]</A>) # (<A HREF="#K1_DOWN[1]">K1_DOWN[1]</A>)))) # (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (<A HREF="#K1_DOWN[2]">K1_DOWN[2]</A>));


<P> --K1L5 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[1]~5
<P><A NAME="K1L5">K1L5</A> = (<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (((<A HREF="#K1_UP[6]">K1_UP[6]</A>) # (<A HREF="#K1_DOWN[0]">K1_DOWN[0]</A>)))) # (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (<A HREF="#K1_DOWN[1]">K1_DOWN[1]</A>));


<P> --K1L3 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[0]~6
<P><A NAME="K1L3">K1L3</A> = (<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & (<A HREF="#K1_UP[7]">K1_UP[7]</A>)) # (!<A HREF="#C1_DECFIFO">C1_DECFIFO</A> & ((<A HREF="#K1_DOWN[0]">K1_DOWN[0]</A>)));


<P> --P1L3 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[0]~26
<P><A NAME="P1L3">P1L3</A> = (<A HREF="#C1_FLUSHFIFO">C1_FLUSHFIFO</A> & (!<A HREF="#C1L23">C1L23</A> & (!<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A> & !<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A>)));


<P> --Q1L73 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nSTOPFLUSH_d~1
<P><A NAME="Q1L73">Q1L73</A> = (<A HREF="#Q1L72">Q1L72</A>) # ((<A HREF="#P1L28">P1L28</A>) # ((<A HREF="#P1L2">P1L2</A> & <A HREF="#P1L3">P1L3</A>)));


<P> --FB1L11 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~5
<P><A NAME="FB1L11">FB1L11</A> = (<A HREF="#FB1_CNTR_O[8]">FB1_CNTR_O[8]</A> & (((!<A HREF="#EB1L5">EB1L5</A>) # (!<A HREF="#FB1L10">FB1L10</A>)) # (!<A HREF="#ADDR[5]">ADDR[5]</A>)));


<P> --FB1L12 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~6
<P><A NAME="FB1L12">FB1L12</A> = (<A HREF="#FB1L11">FB1L11</A>) # ((<A HREF="#ADDR[4]">ADDR[4]</A> & (<A HREF="#EB1L3">EB1L3</A> & !<A HREF="#ADDR[2]">ADDR[2]</A>)));


<P> --Y1L2 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|RDFIFO~0
<P><A NAME="Y1L2">Y1L2</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (<A HREF="#J1_BO0">J1_BO0</A> & <A HREF="#Y1_state_reg.s1">Y1_state_reg.s1</A>));


<P> --Q1L33 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|FF~0
<P><A NAME="Q1L33">Q1L33</A> = (<A HREF="#Q1L14">Q1L14</A> & ((<A HREF="#C1_STATE[1]">C1_STATE[1]</A>) # ((!<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>) # (!<A HREF="#_BERR">_BERR</A>))));


<P> --Q1L34 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|FF~1
<P><A NAME="Q1L34">Q1L34</A> = (<A HREF="#V1L1">V1L1</A> & ((<A HREF="#Q1L33">Q1L33</A>) # ((!<A HREF="#_STERM">_STERM</A> & !<A HREF="#V1L11">V1L11</A>)))) # (!<A HREF="#V1L1">V1L1</A> & (((!<A HREF="#_STERM">_STERM</A> & !<A HREF="#V1L11">V1L11</A>))));


<P> --Q1L37 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|INCFIFO_d~2
<P><A NAME="Q1L37">Q1L37</A> = (<A HREF="#Q1L35">Q1L35</A>) # (((<A HREF="#E1_RIFIFO_o">E1_RIFIFO_o</A> & !<A HREF="#Q1L34">Q1L34</A>)) # (!<A HREF="#Q1L36">Q1L36</A>));


<P> --Q1L7 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DECFIFO_d~0
<P><A NAME="Q1L7">Q1L7</A> = (<A HREF="#Q1L34">Q1L34</A>) # ((<A HREF="#E1_RDFIFO_o">E1_RDFIFO_o</A> & (<A HREF="#Q1L36">Q1L36</A> & !<A HREF="#Q1L35">Q1L35</A>)));


<P> --Y1L3 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|RIFIFO~0
<P><A NAME="Y1L3">Y1L3</A> = (<A HREF="#J1_BO1">J1_BO1</A> & (<A HREF="#J1_BO0">J1_BO0</A> & <A HREF="#Y1_state_reg.s12">Y1_state_reg.s12</A>));


<P> --Y1_state_reg.s22 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s22
<P><A NAME="Y1_state_reg.s22">Y1_state_reg.s22</A> = DFFEAS(<A HREF="#Y1_state_reg.s6">Y1_state_reg.s6</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L13 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector11~0
<P><A NAME="Y1L13">Y1L13</A> = (<A HREF="#Y1_state_reg.s22">Y1_state_reg.s22</A>) # ((<A HREF="#Y1_state_reg.s14">Y1_state_reg.s14</A> & <A HREF="#E1_CDSACK_">E1_CDSACK_</A>));


<P> --Y1_state_reg.s9 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s9
<P><A NAME="Y1_state_reg.s9">Y1_state_reg.s9</A> = DFFEAS(<A HREF="#Y1_state_reg.s19">Y1_state_reg.s19</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Y1L16 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector19~0
<P><A NAME="Y1L16">Y1L16</A> = (<A HREF="#Y1_state_reg.s9">Y1_state_reg.s9</A>) # ((<A HREF="#Y1_state_reg.s25">Y1_state_reg.s25</A> & <A HREF="#E1_CDSACK_">E1_CDSACK_</A>));


<P> --C1_PAS is CPU_SM:u_CPU_SM|PAS
<P><A NAME="C1_PAS">C1_PAS</A> = DFFEAS(<A HREF="#Q1L45">Q1L45</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --C1_PDS is CPU_SM:u_CPU_SM|PDS
<P><A NAME="C1_PDS">C1_PDS</A> = DFFEAS(<A HREF="#Q1L44">Q1L44</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --GB1_FE is registers:u_registers|registers_istr:u_registers_istr|FE
<P><A NAME="GB1_FE">GB1_FE</A> = DFFEAS(<A HREF="#GB1L2">GB1L2</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#GB1L7">GB1L7</A>,  ,  ,  ,  );


<P> --Q1L25 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~0
<P><A NAME="Q1L25">Q1L25</A> = (<A HREF="#C1_nDSACK">C1_nDSACK</A> & (<A HREF="#_STERM">_STERM</A>)) # (!<A HREF="#C1_nDSACK">C1_nDSACK</A> & (((!<A HREF="#_BERR">_BERR</A>) # (!<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A>))));


<P> --Q1L29 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~0
<P><A NAME="Q1L29">Q1L29</A> = (<A HREF="#Q1L19">Q1L19</A>) # ((<A HREF="#Q1L17">Q1L17</A>) # ((<A HREF="#Q1L38">Q1L38</A> & <A HREF="#Q1L25">Q1L25</A>)));


<P> --Q1L30 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~1
<P><A NAME="Q1L30">Q1L30</A> = (<A HREF="#Q1L14">Q1L14</A>) # ((<A HREF="#Q1L59">Q1L59</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>));


<P> --Q1L43 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_d~0
<P><A NAME="Q1L43">Q1L43</A> = (<A HREF="#Q1L57">Q1L57</A> & (<A HREF="#T1L1">T1L1</A> & ((!<A HREF="#P1L26">P1L26</A>) # (!<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A>))));


<P> --Q1L31 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~2
<P><A NAME="Q1L31">Q1L31</A> = (<A HREF="#Q1L43">Q1L43</A> & (!<A HREF="#P1L10">P1L10</A> & ((!<A HREF="#Q1L13">Q1L13</A>) # (!<A HREF="#_STERM">_STERM</A>))));


<P> --Q1L32 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~3
<P><A NAME="Q1L32">Q1L32</A> = (<A HREF="#Q1L29">Q1L29</A>) # (((<A HREF="#Q1L30">Q1L30</A> & !<A HREF="#_STERM">_STERM</A>)) # (!<A HREF="#Q1L31">Q1L31</A>));


<P> --Y1L22 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector26~0
<P><A NAME="Y1L22">Y1L22</A> = (<A HREF="#Y1L21">Y1L21</A>) # ((<A HREF="#Y1_state_reg.s25">Y1_state_reg.s25</A>) # ((<A HREF="#Y1_state_reg.s9">Y1_state_reg.s9</A>) # (!<A HREF="#Y1L19">Y1L19</A>)));


<P> --GB1_FF is registers:u_registers|registers_istr:u_registers_istr|FF
<P><A NAME="GB1_FF">GB1_FF</A> = DFFEAS(<A HREF="#GB1L4">GB1L4</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#GB1L7">GB1L7</A>,  ,  ,  ,  );


<P> --GB1_INT_P is registers:u_registers|registers_istr:u_registers_istr|INT_P
<P><A NAME="GB1_INT_P">GB1_INT_P</A> = DFFEAS(<A HREF="#GB1L12">GB1L12</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#GB1L7">GB1L7</A>,  ,  ,  ,  );


<P> --GB1_INT_F is registers:u_registers|registers_istr:u_registers_istr|INT_F
<P><A NAME="GB1_INT_F">GB1_INT_F</A> = DFFEAS(<A HREF="#GB1L8">GB1L8</A>, !<A HREF="#X1__clk0">X1__clk0</A>, <A HREF="#X1__locked">X1__locked</A>,  , <A HREF="#GB1L7">GB1L7</A>,  ,  ,  ,  );


<P> --C1_BRIDGEOUT is CPU_SM:u_CPU_SM|BRIDGEOUT
<P><A NAME="C1_BRIDGEOUT">C1_BRIDGEOUT</A> = DFFEAS(<A HREF="#Q1L6">Q1L6</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --AB1L76 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~0
<P><A NAME="AB1L76">AB1L76</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N4_q_b[7]">N4_q_b[7]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N2_q_b[7]">N2_q_b[7]</A>)));


<P> --Q1L24 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_X~0
<P><A NAME="Q1L24">Q1L24</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (!<A HREF="#C1_STATE[3]">C1_STATE[3]</A> & (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> $ (!<A HREF="#C1_STATE[2]">C1_STATE[2]</A>))));


<P> --Q1L26 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~1
<P><A NAME="Q1L26">Q1L26</A> = (<A HREF="#Q1L25">Q1L25</A> & (<A HREF="#Q1L24">Q1L24</A> & !<A HREF="#C1_STATE[4]">C1_STATE[4]</A>));


<P> --Q1L27 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~2
<P><A NAME="Q1L27">Q1L27</A> = (<A HREF="#Q1L14">Q1L14</A> & (((<A HREF="#Q1L59">Q1L59</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>)) # (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A>))) # (!<A HREF="#Q1L14">Q1L14</A> & (<A HREF="#Q1L59">Q1L59</A> & ((!<A HREF="#C1_STATE[3]">C1_STATE[3]</A>))));


<P> --Q1L28 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~3
<P><A NAME="Q1L28">Q1L28</A> = (<A HREF="#Q1L26">Q1L26</A>) # (((<A HREF="#Q1L27">Q1L27</A> & !<A HREF="#_STERM">_STERM</A>)) # (!<A HREF="#Q1L31">Q1L31</A>));


<P> --AB1L77 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~1
<P><A NAME="AB1L77">AB1L77</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N4_q_b[6]">N4_q_b[6]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N2_q_b[6]">N2_q_b[6]</A>)));


<P> --AB1L78 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~2
<P><A NAME="AB1L78">AB1L78</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N4_q_b[5]">N4_q_b[5]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N2_q_b[5]">N2_q_b[5]</A>)));


<P> --AB1L79 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~3
<P><A NAME="AB1L79">AB1L79</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N4_q_b[4]">N4_q_b[4]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N2_q_b[4]">N2_q_b[4]</A>)));


<P> --AB1L80 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~4
<P><A NAME="AB1L80">AB1L80</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N4_q_b[3]">N4_q_b[3]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N2_q_b[3]">N2_q_b[3]</A>)));


<P> --AB1L81 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~5
<P><A NAME="AB1L81">AB1L81</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N4_q_b[2]">N4_q_b[2]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N2_q_b[2]">N2_q_b[2]</A>)));


<P> --AB1L82 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~6
<P><A NAME="AB1L82">AB1L82</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N4_q_b[1]">N4_q_b[1]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N2_q_b[1]">N2_q_b[1]</A>)));


<P> --AB1L83 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~7
<P><A NAME="AB1L83">AB1L83</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N4_q_b[0]">N4_q_b[0]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N2_q_b[0]">N2_q_b[0]</A>)));


<P> --AB1L84 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~8
<P><A NAME="AB1L84">AB1L84</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N3_q_b[7]">N3_q_b[7]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N1_q_b[7]">N1_q_b[7]</A>)));


<P> --AB1L85 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~9
<P><A NAME="AB1L85">AB1L85</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N3_q_b[6]">N3_q_b[6]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N1_q_b[6]">N1_q_b[6]</A>)));


<P> --AB1L86 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~10
<P><A NAME="AB1L86">AB1L86</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N3_q_b[5]">N3_q_b[5]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N1_q_b[5]">N1_q_b[5]</A>)));


<P> --AB1L87 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~11
<P><A NAME="AB1L87">AB1L87</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N3_q_b[4]">N3_q_b[4]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N1_q_b[4]">N1_q_b[4]</A>)));


<P> --AB1L88 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~12
<P><A NAME="AB1L88">AB1L88</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N3_q_b[3]">N3_q_b[3]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N1_q_b[3]">N1_q_b[3]</A>)));


<P> --AB1L89 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~13
<P><A NAME="AB1L89">AB1L89</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N3_q_b[2]">N3_q_b[2]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N1_q_b[2]">N1_q_b[2]</A>)));


<P> --AB1L90 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~14
<P><A NAME="AB1L90">AB1L90</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N3_q_b[1]">N3_q_b[1]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N1_q_b[1]">N1_q_b[1]</A>)));


<P> --AB1L91 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~15
<P><A NAME="AB1L91">AB1L91</A> = (<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & (<A HREF="#N3_q_b[0]">N3_q_b[0]</A>)) # (!<A HREF="#C1_BRIDGEOUT">C1_BRIDGEOUT</A> & ((<A HREF="#N1_q_b[0]">N1_q_b[0]</A>)));


<P> --Q1L8 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEH_Z~0
<P><A NAME="Q1L8">Q1L8</A> = (<A HREF="#P1L20">P1L20</A>) # ((<A HREF="#Q1L49">Q1L49</A>) # ((<A HREF="#Q1L12">Q1L12</A> & <A HREF="#P1L14">P1L14</A>)));


<P> --Q1L9 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEH_d~0
<P><A NAME="Q1L9">Q1L9</A> = (<A HREF="#_STERM">_STERM</A> & (((!<A HREF="#Q1L8">Q1L8</A>)))) # (!<A HREF="#_STERM">_STERM</A> & (<A HREF="#Q1L48">Q1L48</A> & (!<A HREF="#P1L13">P1L13</A>)));


<P> --Q1L51 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~1
<P><A NAME="Q1L51">Q1L51</A> = (<A HREF="#Q1L46">Q1L46</A> & (!<A HREF="#P1L25">P1L25</A> & (!<A HREF="#P1L23">P1L23</A> & !<A HREF="#P1L19">P1L19</A>)));


<P> --Q1L10 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEH_d~1
<P><A NAME="Q1L10">Q1L10</A> = (<A HREF="#P1L15">P1L15</A>) # ((<A HREF="#S1L5">S1L5</A>) # ((!<A HREF="#Q1L51">Q1L51</A>) # (!<A HREF="#Q1L9">Q1L9</A>)));


<P> --Y1L24 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector28~0
<P><A NAME="Y1L24">Y1L24</A> = (<A HREF="#Y1_state_reg.s6">Y1_state_reg.s6</A>) # ((<A HREF="#Y1_state_reg.s17">Y1_state_reg.s17</A>) # ((<A HREF="#Y1_state_reg.s26">Y1_state_reg.s26</A>) # (<A HREF="#Y1L15">Y1L15</A>)));


<P> --Y1_WideOr22 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|WideOr22
<P><A NAME="Y1_WideOr22">Y1_WideOr22</A> = (<A HREF="#Y1_state_reg.s2">Y1_state_reg.s2</A>) # ((<A HREF="#Y1_state_reg.s18">Y1_state_reg.s18</A>) # ((<A HREF="#Y1_state_reg.s28">Y1_state_reg.s28</A>) # (<A HREF="#Y1_state_reg.s1">Y1_state_reg.s1</A>)));


<P> --LLW is LLW
<P><A NAME="LLW">LLW</A> = DFFEAS(<A HREF="#C1_PLLW">C1_PLLW</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --M1_LLWS is fifo:int_fifo|fifo_write_strobes:u_write_strobes|LLWS
<P><A NAME="M1_LLWS">M1_LLWS</A> = (<A HREF="#LLW">LLW</A>) # ((<A HREF="#E1_DACK_o">E1_DACK_o</A> & (<A HREF="#E1_RE_o">E1_RE_o</A> & <A HREF="#DB1L1">DB1L1</A>)));


<P> --C1_BRIDGEIN is CPU_SM:u_CPU_SM|BRIDGEIN
<P><A NAME="C1_BRIDGEIN">C1_BRIDGEIN</A> = DFFEAS(<A HREF="#Q1_nBRIDGEIN_d">Q1_nBRIDGEIN_d</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Z1_UD_LATCH[0] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[0]
<P><A NAME="Z1_UD_LATCH[0]">Z1_UD_LATCH[0]</A> = DFFEAS(<A HREF="#A1L44">A1L44</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --C1_DIEL is CPU_SM:u_CPU_SM|DIEL
<P><A NAME="C1_DIEL">C1_DIEL</A> = DFFEAS(<A HREF="#Q1L11">Q1L11</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --F1_bDIEL is datapath:u_datapath|bDIEL
<P><A NAME="F1_bDIEL">F1_bDIEL</A> = (<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A>) # (<A HREF="#C1_DIEL">C1_DIEL</A>);


<P> --Z1L1 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[0]~0
<P><A NAME="Z1L1">Z1L1</A> = (<A HREF="#F1_bDIEL">F1_bDIEL</A> & (<A HREF="#A1L12">A1L12</A>)) # (!<A HREF="#F1_bDIEL">F1_bDIEL</A> & (((<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & <A HREF="#Z1_UD_LATCH[0]">Z1_UD_LATCH[0]</A>))));


<P> --E1_S2F_o is SCSI_SM:u_SCSI_SM|S2F_o
<P><A NAME="E1_S2F_o">E1_S2F_o</A> = DFFEAS(<A HREF="#Y1L23">Y1L23</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --F1L3 is datapath:u_datapath|FIFO_ID[0]~0
<P><A NAME="F1L3">F1L3</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L99">A1L99</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & ((<A HREF="#Z1L1">Z1L1</A>)));


<P> --L1_COUNT[0] is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[0]
<P><A NAME="L1_COUNT[0]">L1_COUNT[0]</A> = DFFEAS(<A HREF="#L1L3">L1L3</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --L1_COUNT[1] is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[1]
<P><A NAME="L1_COUNT[1]">L1_COUNT[1]</A> = DFFEAS(<A HREF="#L1L5">L1L5</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --L1_COUNT[2] is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[2]
<P><A NAME="L1_COUNT[2]">L1_COUNT[2]</A> = DFFEAS(<A HREF="#L1L8">L1L8</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --L2_COUNT[0] is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[0]
<P><A NAME="L2_COUNT[0]">L2_COUNT[0]</A> = DFFEAS(<A HREF="#L2L3">L2L3</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --L2_COUNT[1] is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[1]
<P><A NAME="L2_COUNT[1]">L2_COUNT[1]</A> = DFFEAS(<A HREF="#L2L5">L2L5</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --L2_COUNT[2] is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[2]
<P><A NAME="L2_COUNT[2]">L2_COUNT[2]</A> = DFFEAS(<A HREF="#L2L8">L2L8</A>, <A HREF="#X1__clk2">X1__clk2</A>, <A HREF="#X1__locked">X1__locked</A>,  ,  ,  ,  ,  ,  );


<P> --LHW is LHW
<P><A NAME="LHW">LHW</A> = DFFEAS(<A HREF="#C1_PLHW">C1_PLHW</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --M1L2 is fifo:int_fifo|fifo_write_strobes:u_write_strobes|LLWS~0
<P><A NAME="M1L2">M1L2</A> = (<A HREF="#E1_DACK_o">E1_DACK_o</A> & <A HREF="#E1_RE_o">E1_RE_o</A>);


<P> --M1_UMWS is fifo:int_fifo|fifo_write_strobes:u_write_strobes|UMWS
<P><A NAME="M1_UMWS">M1_UMWS</A> = (<A HREF="#LHW">LHW</A>) # ((<A HREF="#J1_BO0">J1_BO0</A> & (<A HREF="#M1L2">M1L2</A> & !<A HREF="#J1_BO1">J1_BO1</A>)));


<P> --F1L27 is datapath:u_datapath|FIFO_ID[16]~1
<P><A NAME="F1L27">F1L27</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L99">A1L99</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L44">A1L44</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --M1_LMWS is fifo:int_fifo|fifo_write_strobes:u_write_strobes|LMWS
<P><A NAME="M1_LMWS">M1_LMWS</A> = (<A HREF="#LLW">LLW</A>) # ((<A HREF="#J1_BO1">J1_BO1</A> & (<A HREF="#M1L2">M1L2</A> & !<A HREF="#J1_BO0">J1_BO0</A>)));


<P> --F1L11 is datapath:u_datapath|FIFO_ID[8]~2
<P><A NAME="F1L11">F1L11</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L99">A1L99</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L28">A1L28</A> & <A HREF="#F1_bDIEL">F1_bDIEL</A>))));


<P> --Z1_UD_LATCH[8] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[8]
<P><A NAME="Z1_UD_LATCH[8]">Z1_UD_LATCH[8]</A> = DFFEAS(<A HREF="#A1L60">A1L60</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --Z1L8 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[7]~1
<P><A NAME="Z1L8">Z1L8</A> = (<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & (!<A HREF="#E1_CPU2S_o">E1_CPU2S_o</A> & !<A HREF="#C1_DIEL">C1_DIEL</A>));


<P> --F1L12 is datapath:u_datapath|FIFO_ID[8]~3
<P><A NAME="F1L12">F1L12</A> = (<A HREF="#F1L11">F1L11</A>) # ((<A HREF="#Z1_UD_LATCH[8]">Z1_UD_LATCH[8]</A> & (<A HREF="#Z1L8">Z1L8</A> & !<A HREF="#E1_S2F_o">E1_S2F_o</A>)));


<P> --M1_UUWS is fifo:int_fifo|fifo_write_strobes:u_write_strobes|UUWS
<P><A NAME="M1_UUWS">M1_UUWS</A> = (<A HREF="#LHW">LHW</A>) # ((<A HREF="#M1L2">M1L2</A> & (!<A HREF="#J1_BO1">J1_BO1</A> & !<A HREF="#J1_BO0">J1_BO0</A>)));


<P> --F1L35 is datapath:u_datapath|FIFO_ID[24]~4
<P><A NAME="F1L35">F1L35</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L99">A1L99</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L60">A1L60</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --Z1_UD_LATCH[1] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[1]
<P><A NAME="Z1_UD_LATCH[1]">Z1_UD_LATCH[1]</A> = DFFEAS(<A HREF="#A1L46">A1L46</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --Z1L2 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[1]~2
<P><A NAME="Z1L2">Z1L2</A> = (<A HREF="#F1_bDIEL">F1_bDIEL</A> & (<A HREF="#A1L14">A1L14</A>)) # (!<A HREF="#F1_bDIEL">F1_bDIEL</A> & (((<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & <A HREF="#Z1_UD_LATCH[1]">Z1_UD_LATCH[1]</A>))));


<P> --F1L4 is datapath:u_datapath|FIFO_ID[1]~5
<P><A NAME="F1L4">F1L4</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L101">A1L101</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & ((<A HREF="#Z1L2">Z1L2</A>)));


<P> --F1L28 is datapath:u_datapath|FIFO_ID[17]~6
<P><A NAME="F1L28">F1L28</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L101">A1L101</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L46">A1L46</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --F1L13 is datapath:u_datapath|FIFO_ID[9]~7
<P><A NAME="F1L13">F1L13</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L101">A1L101</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L30">A1L30</A> & <A HREF="#F1_bDIEL">F1_bDIEL</A>))));


<P> --Z1_UD_LATCH[9] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[9]
<P><A NAME="Z1_UD_LATCH[9]">Z1_UD_LATCH[9]</A> = DFFEAS(<A HREF="#A1L62">A1L62</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --F1L14 is datapath:u_datapath|FIFO_ID[9]~8
<P><A NAME="F1L14">F1L14</A> = (<A HREF="#F1L13">F1L13</A>) # ((<A HREF="#Z1L8">Z1L8</A> & (<A HREF="#Z1_UD_LATCH[9]">Z1_UD_LATCH[9]</A> & !<A HREF="#E1_S2F_o">E1_S2F_o</A>)));


<P> --F1L36 is datapath:u_datapath|FIFO_ID[25]~9
<P><A NAME="F1L36">F1L36</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L101">A1L101</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L62">A1L62</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --Z1_UD_LATCH[2] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[2]
<P><A NAME="Z1_UD_LATCH[2]">Z1_UD_LATCH[2]</A> = DFFEAS(<A HREF="#A1L48">A1L48</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --Z1L3 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[2]~3
<P><A NAME="Z1L3">Z1L3</A> = (<A HREF="#F1_bDIEL">F1_bDIEL</A> & (<A HREF="#A1L16">A1L16</A>)) # (!<A HREF="#F1_bDIEL">F1_bDIEL</A> & (((<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & <A HREF="#Z1_UD_LATCH[2]">Z1_UD_LATCH[2]</A>))));


<P> --F1L5 is datapath:u_datapath|FIFO_ID[2]~10
<P><A NAME="F1L5">F1L5</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L103">A1L103</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & ((<A HREF="#Z1L3">Z1L3</A>)));


<P> --F1L29 is datapath:u_datapath|FIFO_ID[18]~11
<P><A NAME="F1L29">F1L29</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L103">A1L103</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L48">A1L48</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --F1L15 is datapath:u_datapath|FIFO_ID[10]~12
<P><A NAME="F1L15">F1L15</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L103">A1L103</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L32">A1L32</A> & <A HREF="#F1_bDIEL">F1_bDIEL</A>))));


<P> --Z1_UD_LATCH[10] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[10]
<P><A NAME="Z1_UD_LATCH[10]">Z1_UD_LATCH[10]</A> = DFFEAS(<A HREF="#A1L64">A1L64</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --F1L16 is datapath:u_datapath|FIFO_ID[10]~13
<P><A NAME="F1L16">F1L16</A> = (<A HREF="#F1L15">F1L15</A>) # ((<A HREF="#Z1L8">Z1L8</A> & (<A HREF="#Z1_UD_LATCH[10]">Z1_UD_LATCH[10]</A> & !<A HREF="#E1_S2F_o">E1_S2F_o</A>)));


<P> --F1L37 is datapath:u_datapath|FIFO_ID[26]~14
<P><A NAME="F1L37">F1L37</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L103">A1L103</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L64">A1L64</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --Z1_UD_LATCH[3] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[3]
<P><A NAME="Z1_UD_LATCH[3]">Z1_UD_LATCH[3]</A> = DFFEAS(<A HREF="#A1L50">A1L50</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --Z1L4 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[3]~4
<P><A NAME="Z1L4">Z1L4</A> = (<A HREF="#F1_bDIEL">F1_bDIEL</A> & (<A HREF="#A1L18">A1L18</A>)) # (!<A HREF="#F1_bDIEL">F1_bDIEL</A> & (((<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & <A HREF="#Z1_UD_LATCH[3]">Z1_UD_LATCH[3]</A>))));


<P> --F1L6 is datapath:u_datapath|FIFO_ID[3]~15
<P><A NAME="F1L6">F1L6</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L105">A1L105</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & ((<A HREF="#Z1L4">Z1L4</A>)));


<P> --F1L30 is datapath:u_datapath|FIFO_ID[19]~16
<P><A NAME="F1L30">F1L30</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L105">A1L105</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L50">A1L50</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --F1L17 is datapath:u_datapath|FIFO_ID[11]~17
<P><A NAME="F1L17">F1L17</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L105">A1L105</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L34">A1L34</A> & <A HREF="#F1_bDIEL">F1_bDIEL</A>))));


<P> --Z1_UD_LATCH[11] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[11]
<P><A NAME="Z1_UD_LATCH[11]">Z1_UD_LATCH[11]</A> = DFFEAS(<A HREF="#A1L66">A1L66</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --F1L18 is datapath:u_datapath|FIFO_ID[11]~18
<P><A NAME="F1L18">F1L18</A> = (<A HREF="#F1L17">F1L17</A>) # ((<A HREF="#Z1L8">Z1L8</A> & (<A HREF="#Z1_UD_LATCH[11]">Z1_UD_LATCH[11]</A> & !<A HREF="#E1_S2F_o">E1_S2F_o</A>)));


<P> --F1L38 is datapath:u_datapath|FIFO_ID[27]~19
<P><A NAME="F1L38">F1L38</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L105">A1L105</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L66">A1L66</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --Z1_UD_LATCH[4] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[4]
<P><A NAME="Z1_UD_LATCH[4]">Z1_UD_LATCH[4]</A> = DFFEAS(<A HREF="#A1L52">A1L52</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --Z1L5 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[4]~5
<P><A NAME="Z1L5">Z1L5</A> = (<A HREF="#F1_bDIEL">F1_bDIEL</A> & (<A HREF="#A1L20">A1L20</A>)) # (!<A HREF="#F1_bDIEL">F1_bDIEL</A> & (((<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & <A HREF="#Z1_UD_LATCH[4]">Z1_UD_LATCH[4]</A>))));


<P> --F1L7 is datapath:u_datapath|FIFO_ID[4]~20
<P><A NAME="F1L7">F1L7</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L107">A1L107</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & ((<A HREF="#Z1L5">Z1L5</A>)));


<P> --F1L31 is datapath:u_datapath|FIFO_ID[20]~21
<P><A NAME="F1L31">F1L31</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L107">A1L107</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L52">A1L52</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --F1L19 is datapath:u_datapath|FIFO_ID[12]~22
<P><A NAME="F1L19">F1L19</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L107">A1L107</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L36">A1L36</A> & <A HREF="#F1_bDIEL">F1_bDIEL</A>))));


<P> --Z1_UD_LATCH[12] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[12]
<P><A NAME="Z1_UD_LATCH[12]">Z1_UD_LATCH[12]</A> = DFFEAS(<A HREF="#A1L68">A1L68</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --F1L20 is datapath:u_datapath|FIFO_ID[12]~23
<P><A NAME="F1L20">F1L20</A> = (<A HREF="#F1L19">F1L19</A>) # ((<A HREF="#Z1L8">Z1L8</A> & (<A HREF="#Z1_UD_LATCH[12]">Z1_UD_LATCH[12]</A> & !<A HREF="#E1_S2F_o">E1_S2F_o</A>)));


<P> --F1L39 is datapath:u_datapath|FIFO_ID[28]~24
<P><A NAME="F1L39">F1L39</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L107">A1L107</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L68">A1L68</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --Z1_UD_LATCH[5] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[5]
<P><A NAME="Z1_UD_LATCH[5]">Z1_UD_LATCH[5]</A> = DFFEAS(<A HREF="#A1L54">A1L54</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --Z1L6 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[5]~6
<P><A NAME="Z1L6">Z1L6</A> = (<A HREF="#F1_bDIEL">F1_bDIEL</A> & (<A HREF="#A1L22">A1L22</A>)) # (!<A HREF="#F1_bDIEL">F1_bDIEL</A> & (((<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & <A HREF="#Z1_UD_LATCH[5]">Z1_UD_LATCH[5]</A>))));


<P> --F1L8 is datapath:u_datapath|FIFO_ID[5]~25
<P><A NAME="F1L8">F1L8</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L109">A1L109</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & ((<A HREF="#Z1L6">Z1L6</A>)));


<P> --F1L32 is datapath:u_datapath|FIFO_ID[21]~26
<P><A NAME="F1L32">F1L32</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L109">A1L109</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L54">A1L54</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --F1L21 is datapath:u_datapath|FIFO_ID[13]~27
<P><A NAME="F1L21">F1L21</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L109">A1L109</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L38">A1L38</A> & <A HREF="#F1_bDIEL">F1_bDIEL</A>))));


<P> --Z1_UD_LATCH[13] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[13]
<P><A NAME="Z1_UD_LATCH[13]">Z1_UD_LATCH[13]</A> = DFFEAS(<A HREF="#A1L70">A1L70</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --F1L22 is datapath:u_datapath|FIFO_ID[13]~28
<P><A NAME="F1L22">F1L22</A> = (<A HREF="#F1L21">F1L21</A>) # ((<A HREF="#Z1L8">Z1L8</A> & (<A HREF="#Z1_UD_LATCH[13]">Z1_UD_LATCH[13]</A> & !<A HREF="#E1_S2F_o">E1_S2F_o</A>)));


<P> --F1L40 is datapath:u_datapath|FIFO_ID[29]~29
<P><A NAME="F1L40">F1L40</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L109">A1L109</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L70">A1L70</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --Z1_UD_LATCH[6] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[6]
<P><A NAME="Z1_UD_LATCH[6]">Z1_UD_LATCH[6]</A> = DFFEAS(<A HREF="#A1L56">A1L56</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --Z1L7 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[6]~7
<P><A NAME="Z1L7">Z1L7</A> = (<A HREF="#F1_bDIEL">F1_bDIEL</A> & (<A HREF="#A1L24">A1L24</A>)) # (!<A HREF="#F1_bDIEL">F1_bDIEL</A> & (((<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & <A HREF="#Z1_UD_LATCH[6]">Z1_UD_LATCH[6]</A>))));


<P> --F1L9 is datapath:u_datapath|FIFO_ID[6]~30
<P><A NAME="F1L9">F1L9</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L111">A1L111</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & ((<A HREF="#Z1L7">Z1L7</A>)));


<P> --F1L33 is datapath:u_datapath|FIFO_ID[22]~31
<P><A NAME="F1L33">F1L33</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L111">A1L111</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L56">A1L56</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --F1L23 is datapath:u_datapath|FIFO_ID[14]~32
<P><A NAME="F1L23">F1L23</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L111">A1L111</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L40">A1L40</A> & <A HREF="#F1_bDIEL">F1_bDIEL</A>))));


<P> --Z1_UD_LATCH[14] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[14]
<P><A NAME="Z1_UD_LATCH[14]">Z1_UD_LATCH[14]</A> = DFFEAS(<A HREF="#A1L72">A1L72</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --F1L24 is datapath:u_datapath|FIFO_ID[14]~33
<P><A NAME="F1L24">F1L24</A> = (<A HREF="#F1L23">F1L23</A>) # ((<A HREF="#Z1L8">Z1L8</A> & (<A HREF="#Z1_UD_LATCH[14]">Z1_UD_LATCH[14]</A> & !<A HREF="#E1_S2F_o">E1_S2F_o</A>)));


<P> --F1L41 is datapath:u_datapath|FIFO_ID[30]~34
<P><A NAME="F1L41">F1L41</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L111">A1L111</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L72">A1L72</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --Z1_UD_LATCH[7] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[7]
<P><A NAME="Z1_UD_LATCH[7]">Z1_UD_LATCH[7]</A> = DFFEAS(<A HREF="#A1L58">A1L58</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --Z1L9 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[7]~8
<P><A NAME="Z1L9">Z1L9</A> = (<A HREF="#F1_bDIEL">F1_bDIEL</A> & (<A HREF="#A1L26">A1L26</A>)) # (!<A HREF="#F1_bDIEL">F1_bDIEL</A> & (((<A HREF="#C1_BRIDGEIN">C1_BRIDGEIN</A> & <A HREF="#Z1_UD_LATCH[7]">Z1_UD_LATCH[7]</A>))));


<P> --F1L10 is datapath:u_datapath|FIFO_ID[7]~35
<P><A NAME="F1L10">F1L10</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L113">A1L113</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & ((<A HREF="#Z1L9">Z1L9</A>)));


<P> --F1L34 is datapath:u_datapath|FIFO_ID[23]~36
<P><A NAME="F1L34">F1L34</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L113">A1L113</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L58">A1L58</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --F1L25 is datapath:u_datapath|FIFO_ID[15]~37
<P><A NAME="F1L25">F1L25</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L113">A1L113</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L42">A1L42</A> & <A HREF="#F1_bDIEL">F1_bDIEL</A>))));


<P> --Z1_UD_LATCH[15] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[15]
<P><A NAME="Z1_UD_LATCH[15]">Z1_UD_LATCH[15]</A> = DFFEAS(<A HREF="#A1L74">A1L74</A>, !<A HREF="#X1__clk1">X1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --F1L26 is datapath:u_datapath|FIFO_ID[15]~38
<P><A NAME="F1L26">F1L26</A> = (<A HREF="#F1L25">F1L25</A>) # ((<A HREF="#Z1L8">Z1L8</A> & (<A HREF="#Z1_UD_LATCH[15]">Z1_UD_LATCH[15]</A> & !<A HREF="#E1_S2F_o">E1_S2F_o</A>)));


<P> --F1L42 is datapath:u_datapath|FIFO_ID[31]~39
<P><A NAME="F1L42">F1L42</A> = (<A HREF="#E1_S2F_o">E1_S2F_o</A> & (<A HREF="#A1L113">A1L113</A>)) # (!<A HREF="#E1_S2F_o">E1_S2F_o</A> & (((<A HREF="#A1L74">A1L74</A> & <A HREF="#C1_DIEH">C1_DIEH</A>))));


<P> --Q1L40 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~2
<P><A NAME="Q1L40">Q1L40</A> = (<A HREF="#T1L11">T1L11</A> & (!<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & (!<A HREF="#C1_DSACK_LATCHED_[0]">C1_DSACK_LATCHED_[0]</A> & !<A HREF="#C1_DSACK_LATCHED_[1]">C1_DSACK_LATCHED_[1]</A>)));


<P> --Q1L41 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~3
<P><A NAME="Q1L41">Q1L41</A> = (<A HREF="#P1L20">P1L20</A>) # ((<A HREF="#C1_nDSACK">C1_nDSACK</A> & ((<A HREF="#P1L17">P1L17</A>) # (<A HREF="#P1L11">P1L11</A>))));


<P> --Q1L42 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~4
<P><A NAME="Q1L42">Q1L42</A> = (<A HREF="#_STERM">_STERM</A> & ((<A HREF="#Q1L40">Q1L40</A>) # ((<A HREF="#Q1L41">Q1L41</A>) # (!<A HREF="#R1L7">R1L7</A>))));


<P> --Q1L44 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_d~1
<P><A NAME="Q1L44">Q1L44</A> = ((<A HREF="#Q1L42">Q1L42</A>) # ((<A HREF="#C1_nDSACK">C1_nDSACK</A> & <A HREF="#P1L15">P1L15</A>))) # (!<A HREF="#Q1L51">Q1L51</A>);


<P> --Q1L45 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_d~2
<P><A NAME="Q1L45">Q1L45</A> = (<A HREF="#Q1L19">Q1L19</A>) # ((<A HREF="#Q1L44">Q1L44</A>) # (!<A HREF="#Q1L43">Q1L43</A>));


<P> --GB1L2 is registers:u_registers|registers_istr:u_registers_istr|FE~0
<P><A NAME="GB1L2">GB1L2</A> = (<A HREF="#A1L123">A1L123</A> & (<A HREF="#K1_FIFOEMPTY">K1_FIFOEMPTY</A> & (<A HREF="#EB1L8">EB1L8</A> & <A HREF="#EB1L5">EB1L5</A>)));


<P> --GB1L7 is registers:u_registers|registers_istr:u_registers_istr|INT_F~0
<P><A NAME="GB1L7">GB1L7</A> = (<A HREF="#EB1L8">EB1L8</A> & (<A HREF="#ADDR[4]">ADDR[4]</A> & ((<A HREF="#A1L123">A1L123</A>) # (!<A HREF="#ADDR[2]">ADDR[2]</A>))));


<P> --GB1L4 is registers:u_registers|registers_istr:u_registers_istr|FF~0
<P><A NAME="GB1L4">GB1L4</A> = (<A HREF="#A1L123">A1L123</A> & (<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A> & (<A HREF="#EB1L8">EB1L8</A> & <A HREF="#EB1L5">EB1L5</A>)));


<P> --GB1L12 is registers:u_registers|registers_istr:u_registers_istr|INT_P~0
<P><A NAME="GB1L12">GB1L12</A> = (<A HREF="#A1L123">A1L123</A> & (!<A HREF="#GB1_INT">GB1_INT</A> & (<A HREF="#EB1L8">EB1L8</A> & <A HREF="#EB1L5">EB1L5</A>)));


<P> --GB1L8 is registers:u_registers|registers_istr:u_registers_istr|INT_F~1
<P><A NAME="GB1L8">GB1L8</A> = (<A HREF="#A1L123">A1L123</A> & (<A HREF="#INTA">INTA</A> & (<A HREF="#EB1L8">EB1L8</A> & <A HREF="#EB1L5">EB1L5</A>)));


<P> --Q1L4 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BRIDGEOUT_Y~0
<P><A NAME="Q1L4">Q1L4</A> = (<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (!<A HREF="#C1_STATE[2]">C1_STATE[2]</A> & (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> $ (<A HREF="#C1_STATE[4]">C1_STATE[4]</A>))));


<P> --Q1L5 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BRIDGEOUT_d~0
<P><A NAME="Q1L5">Q1L5</A> = (<A HREF="#_STERM">_STERM</A> & (<A HREF="#Q1L17">Q1L17</A>)) # (!<A HREF="#_STERM">_STERM</A> & (((<A HREF="#Q1L4">Q1L4</A> & !<A HREF="#C1_STATE[3]">C1_STATE[3]</A>))));


<P> --Q1L6 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BRIDGEOUT_d~1
<P><A NAME="Q1L6">Q1L6</A> = (<A HREF="#Q1L19">Q1L19</A>) # ((<A HREF="#Q1L5">Q1L5</A>) # ((<A HREF="#Q1L18">Q1L18</A> & <A HREF="#Q1L25">Q1L25</A>)));


<P> --C1_PLLW is CPU_SM:u_CPU_SM|PLLW
<P><A NAME="C1_PLLW">C1_PLLW</A> = DFFEAS(<A HREF="#Q1L54">Q1L54</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Q1_nBRIDGEIN_d is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBRIDGEIN_d
<P><A NAME="Q1_nBRIDGEIN_d">Q1_nBRIDGEIN_d</A> = (<A HREF="#P1L9">P1L9</A>) # ((<A HREF="#P1L18">P1L18</A>) # (!<A HREF="#Q1L71">Q1L71</A>));


<P> --Q1L11 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEL_d~0
<P><A NAME="Q1L11">Q1L11</A> = (<A HREF="#P1L25">P1L25</A>) # ((<A HREF="#Q1L35">Q1L35</A>) # ((!<A HREF="#Q1L9">Q1L9</A>) # (!<A HREF="#Q1L46">Q1L46</A>)));


<P> --Y1L23 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector27~0
<P><A NAME="Y1L23">Y1L23</A> = (<A HREF="#Y1_state_reg.s12">Y1_state_reg.s12</A>) # (!<A HREF="#Y1L6">Y1L6</A>);


<P> --C1_INCNI is CPU_SM:u_CPU_SM|INCNI
<P><A NAME="C1_INCNI">C1_INCNI</A> = DFFEAS(<A HREF="#Q1L23">Q1L23</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_INCNI_o is SCSI_SM:u_SCSI_SM|INCNI_o
<P><A NAME="E1_INCNI_o">E1_INCNI_o</A> = DFFEAS(<A HREF="#Y1L25">Y1L25</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --L1L3 is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[0]~0
<P><A NAME="L1L3">L1L3</A> = <A HREF="#L1_COUNT[0]">L1_COUNT[0]</A> $ (((<A HREF="#C1_INCNI">C1_INCNI</A>) # (<A HREF="#E1_INCNI_o">E1_INCNI_o</A>)));


<P> --L1L5 is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[1]~1
<P><A NAME="L1L5">L1L5</A> = <A HREF="#L1_COUNT[1]">L1_COUNT[1]</A> $ (((<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A> & ((<A HREF="#C1_INCNI">C1_INCNI</A>) # (<A HREF="#E1_INCNI_o">E1_INCNI_o</A>)))));


<P> --L1L7 is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[2]~2
<P><A NAME="L1L7">L1L7</A> = (!<A HREF="#L1_COUNT[1]">L1_COUNT[1]</A>) # (!<A HREF="#L1_COUNT[0]">L1_COUNT[0]</A>);


<P> --L1L8 is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[2]~3
<P><A NAME="L1L8">L1L8</A> = <A HREF="#L1_COUNT[2]">L1_COUNT[2]</A> $ (((!<A HREF="#L1L7">L1L7</A> & ((<A HREF="#C1_INCNI">C1_INCNI</A>) # (<A HREF="#E1_INCNI_o">E1_INCNI_o</A>)))));


<P> --C1_INCNO is CPU_SM:u_CPU_SM|INCNO
<P><A NAME="C1_INCNO">C1_INCNO</A> = DFFEAS(<A HREF="#Q1L34">Q1L34</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_INCNO_o is SCSI_SM:u_SCSI_SM|INCNO_o
<P><A NAME="E1_INCNO_o">E1_INCNO_o</A> = DFFEAS(<A HREF="#Y1L17">Y1L17</A>, <A HREF="#X1__clk1">X1__clk1</A>,  ,  ,  ,  ,  ,  ,  );


<P> --L2L3 is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[0]~0
<P><A NAME="L2L3">L2L3</A> = <A HREF="#L2_COUNT[0]">L2_COUNT[0]</A> $ (((<A HREF="#C1_INCNO">C1_INCNO</A>) # (<A HREF="#E1_INCNO_o">E1_INCNO_o</A>)));


<P> --L2L5 is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[1]~1
<P><A NAME="L2L5">L2L5</A> = <A HREF="#L2_COUNT[1]">L2_COUNT[1]</A> $ (((<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A> & ((<A HREF="#C1_INCNO">C1_INCNO</A>) # (<A HREF="#E1_INCNO_o">E1_INCNO_o</A>)))));


<P> --L2L7 is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[2]~2
<P><A NAME="L2L7">L2L7</A> = (!<A HREF="#L2_COUNT[1]">L2_COUNT[1]</A>) # (!<A HREF="#L2_COUNT[0]">L2_COUNT[0]</A>);


<P> --L2L8 is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[2]~3
<P><A NAME="L2L8">L2L8</A> = <A HREF="#L2_COUNT[2]">L2_COUNT[2]</A> $ (((!<A HREF="#L2L7">L2L7</A> & ((<A HREF="#C1_INCNO">C1_INCNO</A>) # (<A HREF="#E1_INCNO_o">E1_INCNO_o</A>)))));


<P> --C1_PLHW is CPU_SM:u_CPU_SM|PLHW
<P><A NAME="C1_PLHW">C1_PLHW</A> = DFFEAS(<A HREF="#Q1L47">Q1L47</A>, <A HREF="#X1__clk1">X1__clk1</A>, <A HREF="#E1_CRESET_">E1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --Q1L52 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~2
<P><A NAME="Q1L52">Q1L52</A> = (<A HREF="#_STERM">_STERM</A> & ((<A HREF="#P1L20">P1L20</A>) # ((<A HREF="#Q1L12">Q1L12</A> & <A HREF="#P1L14">P1L14</A>))));


<P> --Q1L53 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~3
<P><A NAME="Q1L53">Q1L53</A> = (<A HREF="#Q1L52">Q1L52</A>) # (((<A HREF="#_STERM">_STERM</A> & <A HREF="#Q1L49">Q1L49</A>)) # (!<A HREF="#Q1L50">Q1L50</A>));


<P> --Q1L54 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~4
<P><A NAME="Q1L54">Q1L54</A> = (<A HREF="#Q1L53">Q1L53</A>) # (((<A HREF="#_STERM">_STERM</A> & <A HREF="#V1L2">V1L2</A>)) # (!<A HREF="#Q1L51">Q1L51</A>));


<P> --Y1L25 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector29~0
<P><A NAME="Y1L25">Y1L25</A> = (<A HREF="#DB1L1">DB1L1</A> & ((<A HREF="#Y1_state_reg.s12">Y1_state_reg.s12</A>) # ((<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A> & <A HREF="#Y1_state_reg.s24">Y1_state_reg.s24</A>)))) # (!<A HREF="#DB1L1">DB1L1</A> & (<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A> & (<A HREF="#Y1_state_reg.s24">Y1_state_reg.s24</A>)));


<P> --Y1L17 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector23~0
<P><A NAME="Y1L17">Y1L17</A> = (<A HREF="#DB1L1">DB1L1</A> & ((<A HREF="#Y1_state_reg.s1">Y1_state_reg.s1</A>) # ((<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A> & <A HREF="#Y1_state_reg.s24">Y1_state_reg.s24</A>)))) # (!<A HREF="#DB1L1">DB1L1</A> & (<A HREF="#K1_FIFOFULL">K1_FIFOFULL</A> & (<A HREF="#Y1_state_reg.s24">Y1_state_reg.s24</A>)));


<P> --Q1L47 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLHW_d~1
<P><A NAME="Q1L47">Q1L47</A> = ((<A HREF="#_STERM">_STERM</A> & ((<A HREF="#P1L20">P1L20</A>) # (<A HREF="#Q1L39">Q1L39</A>)))) # (!<A HREF="#Q1L46">Q1L46</A>);


<P> --Q1L69 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBREQ_d~6
<P><A NAME="Q1L69">Q1L69</A> = (!<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & (!<A HREF="#C1_STATE[4]">C1_STATE[4]</A> & <A HREF="#Q1L22">Q1L22</A>));


<P> --P1L18 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[55]~27
<P><A NAME="P1L18">P1L18</A> = (!<A HREF="#C1_STATE[0]">C1_STATE[0]</A> & (<A HREF="#C1_STATE[1]">C1_STATE[1]</A> & <A HREF="#C1_STATE[2]">C1_STATE[2]</A>));


<P> --C1L4 is CPU_SM:u_CPU_SM|BGRANT_~0
<P><A NAME="C1L4">C1L4</A> = !<A HREF="#_BG">_BG</A>;


<P> --A1L8 is AS_O_~0
<P><A NAME="A1L8">A1L8</A> = !<A HREF="#C1_PAS">C1_PAS</A>;


<P> --A1L88 is DS_O_~0
<P><A NAME="A1L88">A1L88</A> = !<A HREF="#C1_PDS">C1_PDS</A>;


<P> --GB1L15 is registers:u_registers|registers_istr:u_registers_istr|ISTR_O[0]~0
<P><A NAME="GB1L15">GB1L15</A> = !<A HREF="#GB1_FE">GB1_FE</A>;


<P> --A1L123 is R_W_IO~0
<P> --operation mode is bidir

<P><A NAME="A1L123">A1L123</A> = <A HREF="#R_W_IO">R_W_IO</A>;

<P> --R_W_IO is R_W_IO
<P> --operation mode is bidir

<P><A NAME="R_W_IO_tri_out">R_W_IO_tri_out</A> = TRI(!<A HREF="#FB1_CNTR_O[1]">FB1_CNTR_O[1]</A>, <A HREF="#C1_BGACK">C1_BGACK</A>);
<P><A NAME="R_W_IO">R_W_IO</A> = BIDIR(<A HREF="#R_W_IO_tri_out">R_W_IO_tri_out</A>);


<P> --A1L126 is _AS_IO~0
<P> --operation mode is bidir

<P><A NAME="A1L126">A1L126</A> = <A HREF="#_AS_IO">_AS_IO</A>;

<P> --_AS_IO is _AS_IO
<P> --operation mode is bidir

<P><A NAME="_AS_IO_tri_out">_AS_IO_tri_out</A> = TRI(<A HREF="#AS_O_">AS_O_</A>, <A HREF="#C1_BGACK">C1_BGACK</A>);
<P><A NAME="_AS_IO">_AS_IO</A> = BIDIR(<A HREF="#_AS_IO_tri_out">_AS_IO_tri_out</A>);


<P> --A1L137 is _DS_IO~0
<P> --operation mode is bidir

<P><A NAME="A1L137">A1L137</A> = <A HREF="#_DS_IO">_DS_IO</A>;

<P> --_DS_IO is _DS_IO
<P> --operation mode is bidir

<P><A NAME="_DS_IO_tri_out">_DS_IO_tri_out</A> = TRI(<A HREF="#DS_O_">DS_O_</A>, <A HREF="#C1_BGACK">C1_BGACK</A>);
<P><A NAME="_DS_IO">_DS_IO</A> = BIDIR(<A HREF="#_DS_IO_tri_out">_DS_IO_tri_out</A>);


<P> --A1L12 is DATA_IO[0]~0
<P> --operation mode is bidir

<P><A NAME="A1L12">A1L12</A> = <A HREF="#DATA_IO[0]">DATA_IO[0]</A>;

<P> --DATA_IO[0] is DATA_IO[0]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[0]_tri_out">DATA_IO[0]_tri_out</A> = TRI(<A HREF="#AB1L3">AB1L3</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[0]">DATA_IO[0]</A> = BIDIR(<A HREF="#DATA_IO[0]_tri_out">DATA_IO[0]_tri_out</A>);


<P> --A1L14 is DATA_IO[1]~1
<P> --operation mode is bidir

<P><A NAME="A1L14">A1L14</A> = <A HREF="#DATA_IO[1]">DATA_IO[1]</A>;

<P> --DATA_IO[1] is DATA_IO[1]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[1]_tri_out">DATA_IO[1]_tri_out</A> = TRI(<A HREF="#AB1L6">AB1L6</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[1]">DATA_IO[1]</A> = BIDIR(<A HREF="#DATA_IO[1]_tri_out">DATA_IO[1]_tri_out</A>);


<P> --A1L16 is DATA_IO[2]~2
<P> --operation mode is bidir

<P><A NAME="A1L16">A1L16</A> = <A HREF="#DATA_IO[2]">DATA_IO[2]</A>;

<P> --DATA_IO[2] is DATA_IO[2]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[2]_tri_out">DATA_IO[2]_tri_out</A> = TRI(<A HREF="#AB1L9">AB1L9</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[2]">DATA_IO[2]</A> = BIDIR(<A HREF="#DATA_IO[2]_tri_out">DATA_IO[2]_tri_out</A>);


<P> --A1L18 is DATA_IO[3]~3
<P> --operation mode is bidir

<P><A NAME="A1L18">A1L18</A> = <A HREF="#DATA_IO[3]">DATA_IO[3]</A>;

<P> --DATA_IO[3] is DATA_IO[3]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[3]_tri_out">DATA_IO[3]_tri_out</A> = TRI(<A HREF="#AB1L11">AB1L11</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[3]">DATA_IO[3]</A> = BIDIR(<A HREF="#DATA_IO[3]_tri_out">DATA_IO[3]_tri_out</A>);


<P> --A1L20 is DATA_IO[4]~4
<P> --operation mode is bidir

<P><A NAME="A1L20">A1L20</A> = <A HREF="#DATA_IO[4]">DATA_IO[4]</A>;

<P> --DATA_IO[4] is DATA_IO[4]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[4]_tri_out">DATA_IO[4]_tri_out</A> = TRI(<A HREF="#AB1L13">AB1L13</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[4]">DATA_IO[4]</A> = BIDIR(<A HREF="#DATA_IO[4]_tri_out">DATA_IO[4]_tri_out</A>);


<P> --A1L22 is DATA_IO[5]~5
<P> --operation mode is bidir

<P><A NAME="A1L22">A1L22</A> = <A HREF="#DATA_IO[5]">DATA_IO[5]</A>;

<P> --DATA_IO[5] is DATA_IO[5]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[5]_tri_out">DATA_IO[5]_tri_out</A> = TRI(<A HREF="#AB1L14">AB1L14</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[5]">DATA_IO[5]</A> = BIDIR(<A HREF="#DATA_IO[5]_tri_out">DATA_IO[5]_tri_out</A>);


<P> --A1L24 is DATA_IO[6]~6
<P> --operation mode is bidir

<P><A NAME="A1L24">A1L24</A> = <A HREF="#DATA_IO[6]">DATA_IO[6]</A>;

<P> --DATA_IO[6] is DATA_IO[6]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[6]_tri_out">DATA_IO[6]_tri_out</A> = TRI(<A HREF="#AB1L15">AB1L15</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[6]">DATA_IO[6]</A> = BIDIR(<A HREF="#DATA_IO[6]_tri_out">DATA_IO[6]_tri_out</A>);


<P> --A1L26 is DATA_IO[7]~7
<P> --operation mode is bidir

<P><A NAME="A1L26">A1L26</A> = <A HREF="#DATA_IO[7]">DATA_IO[7]</A>;

<P> --DATA_IO[7] is DATA_IO[7]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[7]_tri_out">DATA_IO[7]_tri_out</A> = TRI(<A HREF="#AB1L16">AB1L16</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[7]">DATA_IO[7]</A> = BIDIR(<A HREF="#DATA_IO[7]_tri_out">DATA_IO[7]_tri_out</A>);


<P> --A1L28 is DATA_IO[8]~8
<P> --operation mode is bidir

<P><A NAME="A1L28">A1L28</A> = <A HREF="#DATA_IO[8]">DATA_IO[8]</A>;

<P> --DATA_IO[8] is DATA_IO[8]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[8]_tri_out">DATA_IO[8]_tri_out</A> = TRI(<A HREF="#AB1L18">AB1L18</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[8]">DATA_IO[8]</A> = BIDIR(<A HREF="#DATA_IO[8]_tri_out">DATA_IO[8]_tri_out</A>);


<P> --A1L30 is DATA_IO[9]~9
<P> --operation mode is bidir

<P><A NAME="A1L30">A1L30</A> = <A HREF="#DATA_IO[9]">DATA_IO[9]</A>;

<P> --DATA_IO[9] is DATA_IO[9]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[9]_tri_out">DATA_IO[9]_tri_out</A> = TRI(<A HREF="#AB1L19">AB1L19</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[9]">DATA_IO[9]</A> = BIDIR(<A HREF="#DATA_IO[9]_tri_out">DATA_IO[9]_tri_out</A>);


<P> --A1L32 is DATA_IO[10]~10
<P> --operation mode is bidir

<P><A NAME="A1L32">A1L32</A> = <A HREF="#DATA_IO[10]">DATA_IO[10]</A>;

<P> --DATA_IO[10] is DATA_IO[10]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[10]_tri_out">DATA_IO[10]_tri_out</A> = TRI(<A HREF="#AB1L20">AB1L20</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[10]">DATA_IO[10]</A> = BIDIR(<A HREF="#DATA_IO[10]_tri_out">DATA_IO[10]_tri_out</A>);


<P> --A1L34 is DATA_IO[11]~11
<P> --operation mode is bidir

<P><A NAME="A1L34">A1L34</A> = <A HREF="#DATA_IO[11]">DATA_IO[11]</A>;

<P> --DATA_IO[11] is DATA_IO[11]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[11]_tri_out">DATA_IO[11]_tri_out</A> = TRI(<A HREF="#AB1L21">AB1L21</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[11]">DATA_IO[11]</A> = BIDIR(<A HREF="#DATA_IO[11]_tri_out">DATA_IO[11]_tri_out</A>);


<P> --A1L36 is DATA_IO[12]~12
<P> --operation mode is bidir

<P><A NAME="A1L36">A1L36</A> = <A HREF="#DATA_IO[12]">DATA_IO[12]</A>;

<P> --DATA_IO[12] is DATA_IO[12]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[12]_tri_out">DATA_IO[12]_tri_out</A> = TRI(<A HREF="#AB1L22">AB1L22</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[12]">DATA_IO[12]</A> = BIDIR(<A HREF="#DATA_IO[12]_tri_out">DATA_IO[12]_tri_out</A>);


<P> --A1L38 is DATA_IO[13]~13
<P> --operation mode is bidir

<P><A NAME="A1L38">A1L38</A> = <A HREF="#DATA_IO[13]">DATA_IO[13]</A>;

<P> --DATA_IO[13] is DATA_IO[13]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[13]_tri_out">DATA_IO[13]_tri_out</A> = TRI(<A HREF="#AB1L23">AB1L23</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[13]">DATA_IO[13]</A> = BIDIR(<A HREF="#DATA_IO[13]_tri_out">DATA_IO[13]_tri_out</A>);


<P> --A1L40 is DATA_IO[14]~14
<P> --operation mode is bidir

<P><A NAME="A1L40">A1L40</A> = <A HREF="#DATA_IO[14]">DATA_IO[14]</A>;

<P> --DATA_IO[14] is DATA_IO[14]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[14]_tri_out">DATA_IO[14]_tri_out</A> = TRI(<A HREF="#AB1L24">AB1L24</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[14]">DATA_IO[14]</A> = BIDIR(<A HREF="#DATA_IO[14]_tri_out">DATA_IO[14]_tri_out</A>);


<P> --A1L42 is DATA_IO[15]~15
<P> --operation mode is bidir

<P><A NAME="A1L42">A1L42</A> = <A HREF="#DATA_IO[15]">DATA_IO[15]</A>;

<P> --DATA_IO[15] is DATA_IO[15]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[15]_tri_out">DATA_IO[15]_tri_out</A> = TRI(<A HREF="#AB1L25">AB1L25</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[15]">DATA_IO[15]</A> = BIDIR(<A HREF="#DATA_IO[15]_tri_out">DATA_IO[15]_tri_out</A>);


<P> --A1L44 is DATA_IO[16]~16
<P> --operation mode is bidir

<P><A NAME="A1L44">A1L44</A> = <A HREF="#DATA_IO[16]">DATA_IO[16]</A>;

<P> --DATA_IO[16] is DATA_IO[16]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[16]_tri_out">DATA_IO[16]_tri_out</A> = TRI(<A HREF="#AB1L26">AB1L26</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[16]">DATA_IO[16]</A> = BIDIR(<A HREF="#DATA_IO[16]_tri_out">DATA_IO[16]_tri_out</A>);


<P> --A1L46 is DATA_IO[17]~17
<P> --operation mode is bidir

<P><A NAME="A1L46">A1L46</A> = <A HREF="#DATA_IO[17]">DATA_IO[17]</A>;

<P> --DATA_IO[17] is DATA_IO[17]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[17]_tri_out">DATA_IO[17]_tri_out</A> = TRI(<A HREF="#AB1L27">AB1L27</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[17]">DATA_IO[17]</A> = BIDIR(<A HREF="#DATA_IO[17]_tri_out">DATA_IO[17]_tri_out</A>);


<P> --A1L48 is DATA_IO[18]~18
<P> --operation mode is bidir

<P><A NAME="A1L48">A1L48</A> = <A HREF="#DATA_IO[18]">DATA_IO[18]</A>;

<P> --DATA_IO[18] is DATA_IO[18]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[18]_tri_out">DATA_IO[18]_tri_out</A> = TRI(<A HREF="#AB1L28">AB1L28</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[18]">DATA_IO[18]</A> = BIDIR(<A HREF="#DATA_IO[18]_tri_out">DATA_IO[18]_tri_out</A>);


<P> --A1L50 is DATA_IO[19]~19
<P> --operation mode is bidir

<P><A NAME="A1L50">A1L50</A> = <A HREF="#DATA_IO[19]">DATA_IO[19]</A>;

<P> --DATA_IO[19] is DATA_IO[19]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[19]_tri_out">DATA_IO[19]_tri_out</A> = TRI(<A HREF="#AB1L29">AB1L29</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[19]">DATA_IO[19]</A> = BIDIR(<A HREF="#DATA_IO[19]_tri_out">DATA_IO[19]_tri_out</A>);


<P> --A1L52 is DATA_IO[20]~20
<P> --operation mode is bidir

<P><A NAME="A1L52">A1L52</A> = <A HREF="#DATA_IO[20]">DATA_IO[20]</A>;

<P> --DATA_IO[20] is DATA_IO[20]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[20]_tri_out">DATA_IO[20]_tri_out</A> = TRI(<A HREF="#AB1L30">AB1L30</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[20]">DATA_IO[20]</A> = BIDIR(<A HREF="#DATA_IO[20]_tri_out">DATA_IO[20]_tri_out</A>);


<P> --A1L54 is DATA_IO[21]~21
<P> --operation mode is bidir

<P><A NAME="A1L54">A1L54</A> = <A HREF="#DATA_IO[21]">DATA_IO[21]</A>;

<P> --DATA_IO[21] is DATA_IO[21]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[21]_tri_out">DATA_IO[21]_tri_out</A> = TRI(<A HREF="#AB1L31">AB1L31</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[21]">DATA_IO[21]</A> = BIDIR(<A HREF="#DATA_IO[21]_tri_out">DATA_IO[21]_tri_out</A>);


<P> --A1L56 is DATA_IO[22]~22
<P> --operation mode is bidir

<P><A NAME="A1L56">A1L56</A> = <A HREF="#DATA_IO[22]">DATA_IO[22]</A>;

<P> --DATA_IO[22] is DATA_IO[22]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[22]_tri_out">DATA_IO[22]_tri_out</A> = TRI(<A HREF="#AB1L32">AB1L32</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[22]">DATA_IO[22]</A> = BIDIR(<A HREF="#DATA_IO[22]_tri_out">DATA_IO[22]_tri_out</A>);


<P> --A1L58 is DATA_IO[23]~23
<P> --operation mode is bidir

<P><A NAME="A1L58">A1L58</A> = <A HREF="#DATA_IO[23]">DATA_IO[23]</A>;

<P> --DATA_IO[23] is DATA_IO[23]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[23]_tri_out">DATA_IO[23]_tri_out</A> = TRI(<A HREF="#AB1L33">AB1L33</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[23]">DATA_IO[23]</A> = BIDIR(<A HREF="#DATA_IO[23]_tri_out">DATA_IO[23]_tri_out</A>);


<P> --A1L60 is DATA_IO[24]~24
<P> --operation mode is bidir

<P><A NAME="A1L60">A1L60</A> = <A HREF="#DATA_IO[24]">DATA_IO[24]</A>;

<P> --DATA_IO[24] is DATA_IO[24]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[24]_tri_out">DATA_IO[24]_tri_out</A> = TRI(<A HREF="#AB1L34">AB1L34</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[24]">DATA_IO[24]</A> = BIDIR(<A HREF="#DATA_IO[24]_tri_out">DATA_IO[24]_tri_out</A>);


<P> --A1L62 is DATA_IO[25]~25
<P> --operation mode is bidir

<P><A NAME="A1L62">A1L62</A> = <A HREF="#DATA_IO[25]">DATA_IO[25]</A>;

<P> --DATA_IO[25] is DATA_IO[25]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[25]_tri_out">DATA_IO[25]_tri_out</A> = TRI(<A HREF="#AB1L35">AB1L35</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[25]">DATA_IO[25]</A> = BIDIR(<A HREF="#DATA_IO[25]_tri_out">DATA_IO[25]_tri_out</A>);


<P> --A1L64 is DATA_IO[26]~26
<P> --operation mode is bidir

<P><A NAME="A1L64">A1L64</A> = <A HREF="#DATA_IO[26]">DATA_IO[26]</A>;

<P> --DATA_IO[26] is DATA_IO[26]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[26]_tri_out">DATA_IO[26]_tri_out</A> = TRI(<A HREF="#AB1L36">AB1L36</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[26]">DATA_IO[26]</A> = BIDIR(<A HREF="#DATA_IO[26]_tri_out">DATA_IO[26]_tri_out</A>);


<P> --A1L66 is DATA_IO[27]~27
<P> --operation mode is bidir

<P><A NAME="A1L66">A1L66</A> = <A HREF="#DATA_IO[27]">DATA_IO[27]</A>;

<P> --DATA_IO[27] is DATA_IO[27]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[27]_tri_out">DATA_IO[27]_tri_out</A> = TRI(<A HREF="#AB1L37">AB1L37</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[27]">DATA_IO[27]</A> = BIDIR(<A HREF="#DATA_IO[27]_tri_out">DATA_IO[27]_tri_out</A>);


<P> --A1L68 is DATA_IO[28]~28
<P> --operation mode is bidir

<P><A NAME="A1L68">A1L68</A> = <A HREF="#DATA_IO[28]">DATA_IO[28]</A>;

<P> --DATA_IO[28] is DATA_IO[28]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[28]_tri_out">DATA_IO[28]_tri_out</A> = TRI(<A HREF="#AB1L38">AB1L38</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[28]">DATA_IO[28]</A> = BIDIR(<A HREF="#DATA_IO[28]_tri_out">DATA_IO[28]_tri_out</A>);


<P> --A1L70 is DATA_IO[29]~29
<P> --operation mode is bidir

<P><A NAME="A1L70">A1L70</A> = <A HREF="#DATA_IO[29]">DATA_IO[29]</A>;

<P> --DATA_IO[29] is DATA_IO[29]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[29]_tri_out">DATA_IO[29]_tri_out</A> = TRI(<A HREF="#AB1L39">AB1L39</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[29]">DATA_IO[29]</A> = BIDIR(<A HREF="#DATA_IO[29]_tri_out">DATA_IO[29]_tri_out</A>);


<P> --A1L72 is DATA_IO[30]~30
<P> --operation mode is bidir

<P><A NAME="A1L72">A1L72</A> = <A HREF="#DATA_IO[30]">DATA_IO[30]</A>;

<P> --DATA_IO[30] is DATA_IO[30]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[30]_tri_out">DATA_IO[30]_tri_out</A> = TRI(<A HREF="#AB1L40">AB1L40</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[30]">DATA_IO[30]</A> = BIDIR(<A HREF="#DATA_IO[30]_tri_out">DATA_IO[30]_tri_out</A>);


<P> --A1L74 is DATA_IO[31]~31
<P> --operation mode is bidir

<P><A NAME="A1L74">A1L74</A> = <A HREF="#DATA_IO[31]">DATA_IO[31]</A>;

<P> --DATA_IO[31] is DATA_IO[31]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[31]_tri_out">DATA_IO[31]_tri_out</A> = TRI(<A HREF="#AB1L41">AB1L41</A>, <A HREF="#F1_DATA_OE_">F1_DATA_OE_</A>);
<P><A NAME="DATA_IO[31]">DATA_IO[31]</A> = BIDIR(<A HREF="#DATA_IO[31]_tri_out">DATA_IO[31]_tri_out</A>);


<P> --A1L130 is _BGACK_IO~0
<P> --operation mode is bidir

<P><A NAME="A1L130">A1L130</A> = <A HREF="#_BGACK_IO">_BGACK_IO</A>;

<P> --_BGACK_IO is _BGACK_IO
<P> --operation mode is bidir

<P><A NAME="_BGACK_IO">_BGACK_IO</A> = BIDIR(OPNDRN(!<A HREF="#C1_BGACK">C1_BGACK</A>));


<P> --A1L99 is PD_PORT[0]~0
<P> --operation mode is bidir

<P><A NAME="A1L99">A1L99</A> = <A HREF="#PD_PORT[0]">PD_PORT[0]</A>;

<P> --PD_PORT[0] is PD_PORT[0]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[0]_tri_out">PD_PORT[0]_tri_out</A> = TRI(<A HREF="#BB1L13">BB1L13</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[0]">PD_PORT[0]</A> = BIDIR(<A HREF="#PD_PORT[0]_tri_out">PD_PORT[0]_tri_out</A>);


<P> --A1L101 is PD_PORT[1]~1
<P> --operation mode is bidir

<P><A NAME="A1L101">A1L101</A> = <A HREF="#PD_PORT[1]">PD_PORT[1]</A>;

<P> --PD_PORT[1] is PD_PORT[1]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[1]_tri_out">PD_PORT[1]_tri_out</A> = TRI(<A HREF="#BB1L17">BB1L17</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[1]">PD_PORT[1]</A> = BIDIR(<A HREF="#PD_PORT[1]_tri_out">PD_PORT[1]_tri_out</A>);


<P> --A1L103 is PD_PORT[2]~2
<P> --operation mode is bidir

<P><A NAME="A1L103">A1L103</A> = <A HREF="#PD_PORT[2]">PD_PORT[2]</A>;

<P> --PD_PORT[2] is PD_PORT[2]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[2]_tri_out">PD_PORT[2]_tri_out</A> = TRI(<A HREF="#BB1L21">BB1L21</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[2]">PD_PORT[2]</A> = BIDIR(<A HREF="#PD_PORT[2]_tri_out">PD_PORT[2]_tri_out</A>);


<P> --A1L105 is PD_PORT[3]~3
<P> --operation mode is bidir

<P><A NAME="A1L105">A1L105</A> = <A HREF="#PD_PORT[3]">PD_PORT[3]</A>;

<P> --PD_PORT[3] is PD_PORT[3]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[3]_tri_out">PD_PORT[3]_tri_out</A> = TRI(<A HREF="#BB1L25">BB1L25</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[3]">PD_PORT[3]</A> = BIDIR(<A HREF="#PD_PORT[3]_tri_out">PD_PORT[3]_tri_out</A>);


<P> --A1L107 is PD_PORT[4]~4
<P> --operation mode is bidir

<P><A NAME="A1L107">A1L107</A> = <A HREF="#PD_PORT[4]">PD_PORT[4]</A>;

<P> --PD_PORT[4] is PD_PORT[4]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[4]_tri_out">PD_PORT[4]_tri_out</A> = TRI(<A HREF="#BB1L29">BB1L29</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[4]">PD_PORT[4]</A> = BIDIR(<A HREF="#PD_PORT[4]_tri_out">PD_PORT[4]_tri_out</A>);


<P> --A1L109 is PD_PORT[5]~5
<P> --operation mode is bidir

<P><A NAME="A1L109">A1L109</A> = <A HREF="#PD_PORT[5]">PD_PORT[5]</A>;

<P> --PD_PORT[5] is PD_PORT[5]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[5]_tri_out">PD_PORT[5]_tri_out</A> = TRI(<A HREF="#BB1L33">BB1L33</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[5]">PD_PORT[5]</A> = BIDIR(<A HREF="#PD_PORT[5]_tri_out">PD_PORT[5]_tri_out</A>);


<P> --A1L111 is PD_PORT[6]~6
<P> --operation mode is bidir

<P><A NAME="A1L111">A1L111</A> = <A HREF="#PD_PORT[6]">PD_PORT[6]</A>;

<P> --PD_PORT[6] is PD_PORT[6]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[6]_tri_out">PD_PORT[6]_tri_out</A> = TRI(<A HREF="#BB1L37">BB1L37</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[6]">PD_PORT[6]</A> = BIDIR(<A HREF="#PD_PORT[6]_tri_out">PD_PORT[6]_tri_out</A>);


<P> --A1L113 is PD_PORT[7]~7
<P> --operation mode is bidir

<P><A NAME="A1L113">A1L113</A> = <A HREF="#PD_PORT[7]">PD_PORT[7]</A>;

<P> --PD_PORT[7] is PD_PORT[7]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[7]_tri_out">PD_PORT[7]_tri_out</A> = TRI(<A HREF="#BB1L41">BB1L41</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[7]">PD_PORT[7]</A> = BIDIR(<A HREF="#PD_PORT[7]_tri_out">PD_PORT[7]_tri_out</A>);


<P> --PD_PORT[8] is PD_PORT[8]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[8]_tri_out">PD_PORT[8]_tri_out</A> = TRI(<A HREF="#BB1L13">BB1L13</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[8]">PD_PORT[8]</A> = BIDIR(<A HREF="#PD_PORT[8]_tri_out">PD_PORT[8]_tri_out</A>);


<P> --PD_PORT[9] is PD_PORT[9]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[9]_tri_out">PD_PORT[9]_tri_out</A> = TRI(<A HREF="#BB1L17">BB1L17</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[9]">PD_PORT[9]</A> = BIDIR(<A HREF="#PD_PORT[9]_tri_out">PD_PORT[9]_tri_out</A>);


<P> --PD_PORT[10] is PD_PORT[10]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[10]_tri_out">PD_PORT[10]_tri_out</A> = TRI(<A HREF="#BB1L21">BB1L21</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[10]">PD_PORT[10]</A> = BIDIR(<A HREF="#PD_PORT[10]_tri_out">PD_PORT[10]_tri_out</A>);


<P> --PD_PORT[11] is PD_PORT[11]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[11]_tri_out">PD_PORT[11]_tri_out</A> = TRI(<A HREF="#BB1L25">BB1L25</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[11]">PD_PORT[11]</A> = BIDIR(<A HREF="#PD_PORT[11]_tri_out">PD_PORT[11]_tri_out</A>);


<P> --PD_PORT[12] is PD_PORT[12]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[12]_tri_out">PD_PORT[12]_tri_out</A> = TRI(<A HREF="#BB1L29">BB1L29</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[12]">PD_PORT[12]</A> = BIDIR(<A HREF="#PD_PORT[12]_tri_out">PD_PORT[12]_tri_out</A>);


<P> --PD_PORT[13] is PD_PORT[13]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[13]_tri_out">PD_PORT[13]_tri_out</A> = TRI(<A HREF="#BB1L33">BB1L33</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[13]">PD_PORT[13]</A> = BIDIR(<A HREF="#PD_PORT[13]_tri_out">PD_PORT[13]_tri_out</A>);


<P> --PD_PORT[14] is PD_PORT[14]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[14]_tri_out">PD_PORT[14]_tri_out</A> = TRI(<A HREF="#BB1L37">BB1L37</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[14]">PD_PORT[14]</A> = BIDIR(<A HREF="#PD_PORT[14]_tri_out">PD_PORT[14]_tri_out</A>);


<P> --PD_PORT[15] is PD_PORT[15]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[15]_tri_out">PD_PORT[15]_tri_out</A> = TRI(<A HREF="#BB1L41">BB1L41</A>, <A HREF="#A1L142">A1L142</A>);
<P><A NAME="PD_PORT[15]">PD_PORT[15]</A> = BIDIR(<A HREF="#PD_PORT[15]_tri_out">PD_PORT[15]_tri_out</A>);


<P> --C1L2 is CPU_SM:u_CPU_SM|BGACK~_wirecell
<P><A NAME="C1L2">C1L2</A> = !<A HREF="#C1_BGACK">C1_BGACK</A>;


<P> --A1L84 is DSACK_O~0_wirecell
<P><A NAME="A1L84">A1L84</A> = !<A HREF="#A1L83">A1L83</A>;


<P> --A1L96 is PDATA_OE_~0_wirecell
<P><A NAME="A1L96">A1L96</A> = !<A HREF="#A1L95">A1L95</A>;


<P> --E1L7 is SCSI_SM:u_SCSI_SM|DACK_o~_wirecell
<P><A NAME="E1L7">E1L7</A> = !<A HREF="#E1_DACK_o">E1_DACK_o</A>;


<P> --E1L23 is SCSI_SM:u_SCSI_SM|SCSI_CS_o~_wirecell
<P><A NAME="E1L23">E1L23</A> = !<A HREF="#E1_SCSI_CS_o">E1_SCSI_CS_o</A>;


<P> --A1L140 is _IOR~0_wirecell
<P><A NAME="A1L140">A1L140</A> = !<A HREF="#A1L139">A1L139</A>;


<P> --A1L143 is _IOW~0_wirecell
<P><A NAME="A1L143">A1L143</A> = !<A HREF="#A1L142">A1L142</A>;


<P> --GB1L10 is registers:u_registers|registers_istr:u_registers_istr|INT_O_~_wirecell
<P><A NAME="GB1L10">GB1L10</A> = !<A HREF="#GB1_INT_O_">GB1_INT_O_</A>;


</body></html>
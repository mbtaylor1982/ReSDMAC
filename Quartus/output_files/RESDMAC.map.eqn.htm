<html>
<head>
<TITLE>HTML file for equations </TITLE>
</head>
<body>
<p>
-- Copyright (C) 1991-2013 Altera Corporation<br>
-- Your use of Altera Corporation's design tools, logic functions <br>
-- and other software and tools, and its AMPP partner logic <br>
-- functions, and any output files from any of the foregoing <br>
-- (including device programming or simulation files), and any <br>
-- associated documentation or information are expressly subject <br>
-- to the terms and conditions of the Altera Program License <br>
-- Subscription Agreement, Altera MegaCore Function License <br>
-- Agreement, or other applicable license agreement, including, <br>
-- without limitation, that your use is for the sole purpose of <br>
-- programming logic devices manufactured by Altera and sold by <br>
-- Altera or its authorized distributors.  Please refer to the <br>
-- applicable agreement for further details.<br>
<P> --GC1__clk0 is PLL:u_PLL|atpll:APLL_inst1|altpll:altpll_component|_clk0
<P><A NAME="GC1__clk0">GC1__clk0</A> = PLL.CLK0(.ENA(), .CLKSWITCH(), .ARESET(!<A HREF="#_RST">_RST</A>), .PFDENA(), .INCLK(<A HREF="#SCLK">SCLK</A>), .INCLK());

<P> --GC1__clk1 is PLL:u_PLL|atpll:APLL_inst1|altpll:altpll_component|_clk1
<P><A NAME="GC1__clk1">GC1__clk1</A> = PLL.CLK1(.ENA(), .CLKSWITCH(), .ARESET(!<A HREF="#_RST">_RST</A>), .PFDENA(), .INCLK(<A HREF="#SCLK">SCLK</A>), .INCLK());

<P> --GC1__clk2 is PLL:u_PLL|atpll:APLL_inst1|altpll:altpll_component|_clk2
<P><A NAME="GC1__clk2">GC1__clk2</A> = PLL.CLK2(.ENA(), .CLKSWITCH(), .ARESET(!<A HREF="#_RST">_RST</A>), .PFDENA(), .INCLK(<A HREF="#SCLK">SCLK</A>), .INCLK());


<P> --WB1_ram_block1a0 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a0
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a0_PORT_A_data_in">WB1_ram_block1a0_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a0_PORT_A_data_in_reg">WB1_ram_block1a0_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a0_PORT_A_data_in">WB1_ram_block1a0_PORT_A_data_in</A>, WB1_ram_block1a0_clock_0, , , );
<P><A NAME="WB1_ram_block1a0_PORT_A_address">WB1_ram_block1a0_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a0_PORT_A_address_reg">WB1_ram_block1a0_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a0_PORT_A_address">WB1_ram_block1a0_PORT_A_address</A>, WB1_ram_block1a0_clock_0, , , );
<P><A NAME="WB1_ram_block1a0_PORT_B_address">WB1_ram_block1a0_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a0_PORT_B_address_reg">WB1_ram_block1a0_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a0_PORT_B_address">WB1_ram_block1a0_PORT_B_address</A>, WB1_ram_block1a0_clock_0, , , );
<P><A NAME="WB1_ram_block1a0_PORT_A_write_enable">WB1_ram_block1a0_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a0_PORT_A_write_enable_reg">WB1_ram_block1a0_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a0_PORT_A_write_enable">WB1_ram_block1a0_PORT_A_write_enable</A>, WB1_ram_block1a0_clock_0, , , );
<P><A NAME="WB1_ram_block1a0_PORT_B_read_enable">WB1_ram_block1a0_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a0_PORT_B_read_enable_reg">WB1_ram_block1a0_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a0_PORT_B_read_enable">WB1_ram_block1a0_PORT_B_read_enable</A>, WB1_ram_block1a0_clock_0, , , );
<P><A NAME="WB1_ram_block1a0_PORT_A_byte_mask">WB1_ram_block1a0_PORT_A_byte_mask</A> = <A HREF="#VB1_UUWS">VB1_UUWS</A>;
<P><A NAME="WB1_ram_block1a0_PORT_A_byte_mask_reg">WB1_ram_block1a0_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a0_PORT_A_byte_mask">WB1_ram_block1a0_PORT_A_byte_mask</A>, WB1_ram_block1a0_clock_0, , , );
<P><A NAME="WB1_ram_block1a0_clock_0">WB1_ram_block1a0_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a0_PORT_B_data_out">WB1_ram_block1a0_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a0_PORT_A_data_in_reg">WB1_ram_block1a0_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a0_PORT_A_address_reg">WB1_ram_block1a0_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a0_PORT_B_address_reg">WB1_ram_block1a0_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a0_PORT_A_write_enable_reg">WB1_ram_block1a0_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a0_PORT_B_read_enable_reg">WB1_ram_block1a0_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a0_PORT_A_byte_mask_reg">WB1_ram_block1a0_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a0_clock_0">WB1_ram_block1a0_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a0">WB1_ram_block1a0</A> = <A HREF="#WB1_ram_block1a0_PORT_B_data_out">WB1_ram_block1a0_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a16 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a16
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a16_PORT_A_data_in">WB1_ram_block1a16_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a16_PORT_A_data_in_reg">WB1_ram_block1a16_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a16_PORT_A_data_in">WB1_ram_block1a16_PORT_A_data_in</A>, WB1_ram_block1a16_clock_0, , , );
<P><A NAME="WB1_ram_block1a16_PORT_A_address">WB1_ram_block1a16_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a16_PORT_A_address_reg">WB1_ram_block1a16_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a16_PORT_A_address">WB1_ram_block1a16_PORT_A_address</A>, WB1_ram_block1a16_clock_0, , , );
<P><A NAME="WB1_ram_block1a16_PORT_B_address">WB1_ram_block1a16_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a16_PORT_B_address_reg">WB1_ram_block1a16_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a16_PORT_B_address">WB1_ram_block1a16_PORT_B_address</A>, WB1_ram_block1a16_clock_0, , , );
<P><A NAME="WB1_ram_block1a16_PORT_A_write_enable">WB1_ram_block1a16_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a16_PORT_A_write_enable_reg">WB1_ram_block1a16_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a16_PORT_A_write_enable">WB1_ram_block1a16_PORT_A_write_enable</A>, WB1_ram_block1a16_clock_0, , , );
<P><A NAME="WB1_ram_block1a16_PORT_B_read_enable">WB1_ram_block1a16_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a16_PORT_B_read_enable_reg">WB1_ram_block1a16_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a16_PORT_B_read_enable">WB1_ram_block1a16_PORT_B_read_enable</A>, WB1_ram_block1a16_clock_0, , , );
<P><A NAME="WB1_ram_block1a16_PORT_A_byte_mask">WB1_ram_block1a16_PORT_A_byte_mask</A> = <A HREF="#VB1_LMWS">VB1_LMWS</A>;
<P><A NAME="WB1_ram_block1a16_PORT_A_byte_mask_reg">WB1_ram_block1a16_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a16_PORT_A_byte_mask">WB1_ram_block1a16_PORT_A_byte_mask</A>, WB1_ram_block1a16_clock_0, , , );
<P><A NAME="WB1_ram_block1a16_clock_0">WB1_ram_block1a16_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a16_PORT_B_data_out">WB1_ram_block1a16_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a16_PORT_A_data_in_reg">WB1_ram_block1a16_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a16_PORT_A_address_reg">WB1_ram_block1a16_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a16_PORT_B_address_reg">WB1_ram_block1a16_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a16_PORT_A_write_enable_reg">WB1_ram_block1a16_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a16_PORT_B_read_enable_reg">WB1_ram_block1a16_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a16_PORT_A_byte_mask_reg">WB1_ram_block1a16_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a16_clock_0">WB1_ram_block1a16_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a16">WB1_ram_block1a16</A> = <A HREF="#WB1_ram_block1a16_PORT_B_data_out">WB1_ram_block1a16_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a8 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a8
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a8_PORT_A_data_in">WB1_ram_block1a8_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a8_PORT_A_data_in_reg">WB1_ram_block1a8_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a8_PORT_A_data_in">WB1_ram_block1a8_PORT_A_data_in</A>, WB1_ram_block1a8_clock_0, , , );
<P><A NAME="WB1_ram_block1a8_PORT_A_address">WB1_ram_block1a8_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a8_PORT_A_address_reg">WB1_ram_block1a8_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a8_PORT_A_address">WB1_ram_block1a8_PORT_A_address</A>, WB1_ram_block1a8_clock_0, , , );
<P><A NAME="WB1_ram_block1a8_PORT_B_address">WB1_ram_block1a8_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a8_PORT_B_address_reg">WB1_ram_block1a8_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a8_PORT_B_address">WB1_ram_block1a8_PORT_B_address</A>, WB1_ram_block1a8_clock_0, , , );
<P><A NAME="WB1_ram_block1a8_PORT_A_write_enable">WB1_ram_block1a8_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a8_PORT_A_write_enable_reg">WB1_ram_block1a8_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a8_PORT_A_write_enable">WB1_ram_block1a8_PORT_A_write_enable</A>, WB1_ram_block1a8_clock_0, , , );
<P><A NAME="WB1_ram_block1a8_PORT_B_read_enable">WB1_ram_block1a8_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a8_PORT_B_read_enable_reg">WB1_ram_block1a8_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a8_PORT_B_read_enable">WB1_ram_block1a8_PORT_B_read_enable</A>, WB1_ram_block1a8_clock_0, , , );
<P><A NAME="WB1_ram_block1a8_PORT_A_byte_mask">WB1_ram_block1a8_PORT_A_byte_mask</A> = <A HREF="#VB1_UMWS">VB1_UMWS</A>;
<P><A NAME="WB1_ram_block1a8_PORT_A_byte_mask_reg">WB1_ram_block1a8_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a8_PORT_A_byte_mask">WB1_ram_block1a8_PORT_A_byte_mask</A>, WB1_ram_block1a8_clock_0, , , );
<P><A NAME="WB1_ram_block1a8_clock_0">WB1_ram_block1a8_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a8_PORT_B_data_out">WB1_ram_block1a8_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a8_PORT_A_data_in_reg">WB1_ram_block1a8_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a8_PORT_A_address_reg">WB1_ram_block1a8_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a8_PORT_B_address_reg">WB1_ram_block1a8_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a8_PORT_A_write_enable_reg">WB1_ram_block1a8_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a8_PORT_B_read_enable_reg">WB1_ram_block1a8_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a8_PORT_A_byte_mask_reg">WB1_ram_block1a8_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a8_clock_0">WB1_ram_block1a8_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a8">WB1_ram_block1a8</A> = <A HREF="#WB1_ram_block1a8_PORT_B_data_out">WB1_ram_block1a8_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a24 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a24
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a24_PORT_A_data_in">WB1_ram_block1a24_PORT_A_data_in</A> = <A HREF="#H1L1">H1L1</A>;
<P><A NAME="WB1_ram_block1a24_PORT_A_data_in_reg">WB1_ram_block1a24_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a24_PORT_A_data_in">WB1_ram_block1a24_PORT_A_data_in</A>, WB1_ram_block1a24_clock_0, , , );
<P><A NAME="WB1_ram_block1a24_PORT_A_address">WB1_ram_block1a24_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a24_PORT_A_address_reg">WB1_ram_block1a24_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a24_PORT_A_address">WB1_ram_block1a24_PORT_A_address</A>, WB1_ram_block1a24_clock_0, , , );
<P><A NAME="WB1_ram_block1a24_PORT_B_address">WB1_ram_block1a24_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a24_PORT_B_address_reg">WB1_ram_block1a24_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a24_PORT_B_address">WB1_ram_block1a24_PORT_B_address</A>, WB1_ram_block1a24_clock_0, , , );
<P><A NAME="WB1_ram_block1a24_PORT_A_write_enable">WB1_ram_block1a24_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a24_PORT_A_write_enable_reg">WB1_ram_block1a24_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a24_PORT_A_write_enable">WB1_ram_block1a24_PORT_A_write_enable</A>, WB1_ram_block1a24_clock_0, , , );
<P><A NAME="WB1_ram_block1a24_PORT_B_read_enable">WB1_ram_block1a24_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a24_PORT_B_read_enable_reg">WB1_ram_block1a24_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a24_PORT_B_read_enable">WB1_ram_block1a24_PORT_B_read_enable</A>, WB1_ram_block1a24_clock_0, , , );
<P><A NAME="WB1_ram_block1a24_PORT_A_byte_mask">WB1_ram_block1a24_PORT_A_byte_mask</A> = <A HREF="#VB1_LLWS">VB1_LLWS</A>;
<P><A NAME="WB1_ram_block1a24_PORT_A_byte_mask_reg">WB1_ram_block1a24_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a24_PORT_A_byte_mask">WB1_ram_block1a24_PORT_A_byte_mask</A>, WB1_ram_block1a24_clock_0, , , );
<P><A NAME="WB1_ram_block1a24_clock_0">WB1_ram_block1a24_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a24_PORT_B_data_out">WB1_ram_block1a24_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a24_PORT_A_data_in_reg">WB1_ram_block1a24_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a24_PORT_A_address_reg">WB1_ram_block1a24_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a24_PORT_B_address_reg">WB1_ram_block1a24_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a24_PORT_A_write_enable_reg">WB1_ram_block1a24_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a24_PORT_B_read_enable_reg">WB1_ram_block1a24_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a24_PORT_A_byte_mask_reg">WB1_ram_block1a24_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a24_clock_0">WB1_ram_block1a24_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a24">WB1_ram_block1a24</A> = <A HREF="#WB1_ram_block1a24_PORT_B_data_out">WB1_ram_block1a24_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a1 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a1
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a1_PORT_A_data_in">WB1_ram_block1a1_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a1_PORT_A_data_in_reg">WB1_ram_block1a1_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a1_PORT_A_data_in">WB1_ram_block1a1_PORT_A_data_in</A>, WB1_ram_block1a1_clock_0, , , );
<P><A NAME="WB1_ram_block1a1_PORT_A_address">WB1_ram_block1a1_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a1_PORT_A_address_reg">WB1_ram_block1a1_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a1_PORT_A_address">WB1_ram_block1a1_PORT_A_address</A>, WB1_ram_block1a1_clock_0, , , );
<P><A NAME="WB1_ram_block1a1_PORT_B_address">WB1_ram_block1a1_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a1_PORT_B_address_reg">WB1_ram_block1a1_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a1_PORT_B_address">WB1_ram_block1a1_PORT_B_address</A>, WB1_ram_block1a1_clock_0, , , );
<P><A NAME="WB1_ram_block1a1_PORT_A_write_enable">WB1_ram_block1a1_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a1_PORT_A_write_enable_reg">WB1_ram_block1a1_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a1_PORT_A_write_enable">WB1_ram_block1a1_PORT_A_write_enable</A>, WB1_ram_block1a1_clock_0, , , );
<P><A NAME="WB1_ram_block1a1_PORT_B_read_enable">WB1_ram_block1a1_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a1_PORT_B_read_enable_reg">WB1_ram_block1a1_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a1_PORT_B_read_enable">WB1_ram_block1a1_PORT_B_read_enable</A>, WB1_ram_block1a1_clock_0, , , );
<P><A NAME="WB1_ram_block1a1_PORT_A_byte_mask">WB1_ram_block1a1_PORT_A_byte_mask</A> = <A HREF="#VB1_UUWS">VB1_UUWS</A>;
<P><A NAME="WB1_ram_block1a1_PORT_A_byte_mask_reg">WB1_ram_block1a1_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a1_PORT_A_byte_mask">WB1_ram_block1a1_PORT_A_byte_mask</A>, WB1_ram_block1a1_clock_0, , , );
<P><A NAME="WB1_ram_block1a1_clock_0">WB1_ram_block1a1_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a1_PORT_B_data_out">WB1_ram_block1a1_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a1_PORT_A_data_in_reg">WB1_ram_block1a1_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a1_PORT_A_address_reg">WB1_ram_block1a1_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a1_PORT_B_address_reg">WB1_ram_block1a1_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a1_PORT_A_write_enable_reg">WB1_ram_block1a1_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a1_PORT_B_read_enable_reg">WB1_ram_block1a1_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a1_PORT_A_byte_mask_reg">WB1_ram_block1a1_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a1_clock_0">WB1_ram_block1a1_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a1">WB1_ram_block1a1</A> = <A HREF="#WB1_ram_block1a1_PORT_B_data_out">WB1_ram_block1a1_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a17 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a17
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a17_PORT_A_data_in">WB1_ram_block1a17_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a17_PORT_A_data_in_reg">WB1_ram_block1a17_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a17_PORT_A_data_in">WB1_ram_block1a17_PORT_A_data_in</A>, WB1_ram_block1a17_clock_0, , , );
<P><A NAME="WB1_ram_block1a17_PORT_A_address">WB1_ram_block1a17_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a17_PORT_A_address_reg">WB1_ram_block1a17_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a17_PORT_A_address">WB1_ram_block1a17_PORT_A_address</A>, WB1_ram_block1a17_clock_0, , , );
<P><A NAME="WB1_ram_block1a17_PORT_B_address">WB1_ram_block1a17_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a17_PORT_B_address_reg">WB1_ram_block1a17_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a17_PORT_B_address">WB1_ram_block1a17_PORT_B_address</A>, WB1_ram_block1a17_clock_0, , , );
<P><A NAME="WB1_ram_block1a17_PORT_A_write_enable">WB1_ram_block1a17_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a17_PORT_A_write_enable_reg">WB1_ram_block1a17_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a17_PORT_A_write_enable">WB1_ram_block1a17_PORT_A_write_enable</A>, WB1_ram_block1a17_clock_0, , , );
<P><A NAME="WB1_ram_block1a17_PORT_B_read_enable">WB1_ram_block1a17_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a17_PORT_B_read_enable_reg">WB1_ram_block1a17_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a17_PORT_B_read_enable">WB1_ram_block1a17_PORT_B_read_enable</A>, WB1_ram_block1a17_clock_0, , , );
<P><A NAME="WB1_ram_block1a17_PORT_A_byte_mask">WB1_ram_block1a17_PORT_A_byte_mask</A> = <A HREF="#VB1_LMWS">VB1_LMWS</A>;
<P><A NAME="WB1_ram_block1a17_PORT_A_byte_mask_reg">WB1_ram_block1a17_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a17_PORT_A_byte_mask">WB1_ram_block1a17_PORT_A_byte_mask</A>, WB1_ram_block1a17_clock_0, , , );
<P><A NAME="WB1_ram_block1a17_clock_0">WB1_ram_block1a17_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a17_PORT_B_data_out">WB1_ram_block1a17_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a17_PORT_A_data_in_reg">WB1_ram_block1a17_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a17_PORT_A_address_reg">WB1_ram_block1a17_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a17_PORT_B_address_reg">WB1_ram_block1a17_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a17_PORT_A_write_enable_reg">WB1_ram_block1a17_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a17_PORT_B_read_enable_reg">WB1_ram_block1a17_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a17_PORT_A_byte_mask_reg">WB1_ram_block1a17_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a17_clock_0">WB1_ram_block1a17_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a17">WB1_ram_block1a17</A> = <A HREF="#WB1_ram_block1a17_PORT_B_data_out">WB1_ram_block1a17_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a9 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a9
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a9_PORT_A_data_in">WB1_ram_block1a9_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a9_PORT_A_data_in_reg">WB1_ram_block1a9_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a9_PORT_A_data_in">WB1_ram_block1a9_PORT_A_data_in</A>, WB1_ram_block1a9_clock_0, , , );
<P><A NAME="WB1_ram_block1a9_PORT_A_address">WB1_ram_block1a9_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a9_PORT_A_address_reg">WB1_ram_block1a9_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a9_PORT_A_address">WB1_ram_block1a9_PORT_A_address</A>, WB1_ram_block1a9_clock_0, , , );
<P><A NAME="WB1_ram_block1a9_PORT_B_address">WB1_ram_block1a9_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a9_PORT_B_address_reg">WB1_ram_block1a9_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a9_PORT_B_address">WB1_ram_block1a9_PORT_B_address</A>, WB1_ram_block1a9_clock_0, , , );
<P><A NAME="WB1_ram_block1a9_PORT_A_write_enable">WB1_ram_block1a9_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a9_PORT_A_write_enable_reg">WB1_ram_block1a9_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a9_PORT_A_write_enable">WB1_ram_block1a9_PORT_A_write_enable</A>, WB1_ram_block1a9_clock_0, , , );
<P><A NAME="WB1_ram_block1a9_PORT_B_read_enable">WB1_ram_block1a9_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a9_PORT_B_read_enable_reg">WB1_ram_block1a9_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a9_PORT_B_read_enable">WB1_ram_block1a9_PORT_B_read_enable</A>, WB1_ram_block1a9_clock_0, , , );
<P><A NAME="WB1_ram_block1a9_PORT_A_byte_mask">WB1_ram_block1a9_PORT_A_byte_mask</A> = <A HREF="#VB1_UMWS">VB1_UMWS</A>;
<P><A NAME="WB1_ram_block1a9_PORT_A_byte_mask_reg">WB1_ram_block1a9_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a9_PORT_A_byte_mask">WB1_ram_block1a9_PORT_A_byte_mask</A>, WB1_ram_block1a9_clock_0, , , );
<P><A NAME="WB1_ram_block1a9_clock_0">WB1_ram_block1a9_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a9_PORT_B_data_out">WB1_ram_block1a9_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a9_PORT_A_data_in_reg">WB1_ram_block1a9_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a9_PORT_A_address_reg">WB1_ram_block1a9_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a9_PORT_B_address_reg">WB1_ram_block1a9_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a9_PORT_A_write_enable_reg">WB1_ram_block1a9_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a9_PORT_B_read_enable_reg">WB1_ram_block1a9_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a9_PORT_A_byte_mask_reg">WB1_ram_block1a9_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a9_clock_0">WB1_ram_block1a9_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a9">WB1_ram_block1a9</A> = <A HREF="#WB1_ram_block1a9_PORT_B_data_out">WB1_ram_block1a9_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a25 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a25
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a25_PORT_A_data_in">WB1_ram_block1a25_PORT_A_data_in</A> = <A HREF="#H1L2">H1L2</A>;
<P><A NAME="WB1_ram_block1a25_PORT_A_data_in_reg">WB1_ram_block1a25_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a25_PORT_A_data_in">WB1_ram_block1a25_PORT_A_data_in</A>, WB1_ram_block1a25_clock_0, , , );
<P><A NAME="WB1_ram_block1a25_PORT_A_address">WB1_ram_block1a25_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a25_PORT_A_address_reg">WB1_ram_block1a25_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a25_PORT_A_address">WB1_ram_block1a25_PORT_A_address</A>, WB1_ram_block1a25_clock_0, , , );
<P><A NAME="WB1_ram_block1a25_PORT_B_address">WB1_ram_block1a25_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a25_PORT_B_address_reg">WB1_ram_block1a25_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a25_PORT_B_address">WB1_ram_block1a25_PORT_B_address</A>, WB1_ram_block1a25_clock_0, , , );
<P><A NAME="WB1_ram_block1a25_PORT_A_write_enable">WB1_ram_block1a25_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a25_PORT_A_write_enable_reg">WB1_ram_block1a25_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a25_PORT_A_write_enable">WB1_ram_block1a25_PORT_A_write_enable</A>, WB1_ram_block1a25_clock_0, , , );
<P><A NAME="WB1_ram_block1a25_PORT_B_read_enable">WB1_ram_block1a25_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a25_PORT_B_read_enable_reg">WB1_ram_block1a25_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a25_PORT_B_read_enable">WB1_ram_block1a25_PORT_B_read_enable</A>, WB1_ram_block1a25_clock_0, , , );
<P><A NAME="WB1_ram_block1a25_PORT_A_byte_mask">WB1_ram_block1a25_PORT_A_byte_mask</A> = <A HREF="#VB1_LLWS">VB1_LLWS</A>;
<P><A NAME="WB1_ram_block1a25_PORT_A_byte_mask_reg">WB1_ram_block1a25_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a25_PORT_A_byte_mask">WB1_ram_block1a25_PORT_A_byte_mask</A>, WB1_ram_block1a25_clock_0, , , );
<P><A NAME="WB1_ram_block1a25_clock_0">WB1_ram_block1a25_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a25_PORT_B_data_out">WB1_ram_block1a25_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a25_PORT_A_data_in_reg">WB1_ram_block1a25_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a25_PORT_A_address_reg">WB1_ram_block1a25_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a25_PORT_B_address_reg">WB1_ram_block1a25_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a25_PORT_A_write_enable_reg">WB1_ram_block1a25_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a25_PORT_B_read_enable_reg">WB1_ram_block1a25_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a25_PORT_A_byte_mask_reg">WB1_ram_block1a25_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a25_clock_0">WB1_ram_block1a25_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a25">WB1_ram_block1a25</A> = <A HREF="#WB1_ram_block1a25_PORT_B_data_out">WB1_ram_block1a25_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a2 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a2
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a2_PORT_A_data_in">WB1_ram_block1a2_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a2_PORT_A_data_in_reg">WB1_ram_block1a2_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a2_PORT_A_data_in">WB1_ram_block1a2_PORT_A_data_in</A>, WB1_ram_block1a2_clock_0, , , );
<P><A NAME="WB1_ram_block1a2_PORT_A_address">WB1_ram_block1a2_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a2_PORT_A_address_reg">WB1_ram_block1a2_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a2_PORT_A_address">WB1_ram_block1a2_PORT_A_address</A>, WB1_ram_block1a2_clock_0, , , );
<P><A NAME="WB1_ram_block1a2_PORT_B_address">WB1_ram_block1a2_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a2_PORT_B_address_reg">WB1_ram_block1a2_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a2_PORT_B_address">WB1_ram_block1a2_PORT_B_address</A>, WB1_ram_block1a2_clock_0, , , );
<P><A NAME="WB1_ram_block1a2_PORT_A_write_enable">WB1_ram_block1a2_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a2_PORT_A_write_enable_reg">WB1_ram_block1a2_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a2_PORT_A_write_enable">WB1_ram_block1a2_PORT_A_write_enable</A>, WB1_ram_block1a2_clock_0, , , );
<P><A NAME="WB1_ram_block1a2_PORT_B_read_enable">WB1_ram_block1a2_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a2_PORT_B_read_enable_reg">WB1_ram_block1a2_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a2_PORT_B_read_enable">WB1_ram_block1a2_PORT_B_read_enable</A>, WB1_ram_block1a2_clock_0, , , );
<P><A NAME="WB1_ram_block1a2_PORT_A_byte_mask">WB1_ram_block1a2_PORT_A_byte_mask</A> = <A HREF="#VB1_UUWS">VB1_UUWS</A>;
<P><A NAME="WB1_ram_block1a2_PORT_A_byte_mask_reg">WB1_ram_block1a2_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a2_PORT_A_byte_mask">WB1_ram_block1a2_PORT_A_byte_mask</A>, WB1_ram_block1a2_clock_0, , , );
<P><A NAME="WB1_ram_block1a2_clock_0">WB1_ram_block1a2_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a2_PORT_B_data_out">WB1_ram_block1a2_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a2_PORT_A_data_in_reg">WB1_ram_block1a2_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a2_PORT_A_address_reg">WB1_ram_block1a2_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a2_PORT_B_address_reg">WB1_ram_block1a2_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a2_PORT_A_write_enable_reg">WB1_ram_block1a2_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a2_PORT_B_read_enable_reg">WB1_ram_block1a2_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a2_PORT_A_byte_mask_reg">WB1_ram_block1a2_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a2_clock_0">WB1_ram_block1a2_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a2">WB1_ram_block1a2</A> = <A HREF="#WB1_ram_block1a2_PORT_B_data_out">WB1_ram_block1a2_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a18 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a18
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a18_PORT_A_data_in">WB1_ram_block1a18_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a18_PORT_A_data_in_reg">WB1_ram_block1a18_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a18_PORT_A_data_in">WB1_ram_block1a18_PORT_A_data_in</A>, WB1_ram_block1a18_clock_0, , , );
<P><A NAME="WB1_ram_block1a18_PORT_A_address">WB1_ram_block1a18_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a18_PORT_A_address_reg">WB1_ram_block1a18_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a18_PORT_A_address">WB1_ram_block1a18_PORT_A_address</A>, WB1_ram_block1a18_clock_0, , , );
<P><A NAME="WB1_ram_block1a18_PORT_B_address">WB1_ram_block1a18_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a18_PORT_B_address_reg">WB1_ram_block1a18_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a18_PORT_B_address">WB1_ram_block1a18_PORT_B_address</A>, WB1_ram_block1a18_clock_0, , , );
<P><A NAME="WB1_ram_block1a18_PORT_A_write_enable">WB1_ram_block1a18_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a18_PORT_A_write_enable_reg">WB1_ram_block1a18_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a18_PORT_A_write_enable">WB1_ram_block1a18_PORT_A_write_enable</A>, WB1_ram_block1a18_clock_0, , , );
<P><A NAME="WB1_ram_block1a18_PORT_B_read_enable">WB1_ram_block1a18_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a18_PORT_B_read_enable_reg">WB1_ram_block1a18_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a18_PORT_B_read_enable">WB1_ram_block1a18_PORT_B_read_enable</A>, WB1_ram_block1a18_clock_0, , , );
<P><A NAME="WB1_ram_block1a18_PORT_A_byte_mask">WB1_ram_block1a18_PORT_A_byte_mask</A> = <A HREF="#VB1_LMWS">VB1_LMWS</A>;
<P><A NAME="WB1_ram_block1a18_PORT_A_byte_mask_reg">WB1_ram_block1a18_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a18_PORT_A_byte_mask">WB1_ram_block1a18_PORT_A_byte_mask</A>, WB1_ram_block1a18_clock_0, , , );
<P><A NAME="WB1_ram_block1a18_clock_0">WB1_ram_block1a18_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a18_PORT_B_data_out">WB1_ram_block1a18_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a18_PORT_A_data_in_reg">WB1_ram_block1a18_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a18_PORT_A_address_reg">WB1_ram_block1a18_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a18_PORT_B_address_reg">WB1_ram_block1a18_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a18_PORT_A_write_enable_reg">WB1_ram_block1a18_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a18_PORT_B_read_enable_reg">WB1_ram_block1a18_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a18_PORT_A_byte_mask_reg">WB1_ram_block1a18_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a18_clock_0">WB1_ram_block1a18_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a18">WB1_ram_block1a18</A> = <A HREF="#WB1_ram_block1a18_PORT_B_data_out">WB1_ram_block1a18_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a10 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a10
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a10_PORT_A_data_in">WB1_ram_block1a10_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a10_PORT_A_data_in_reg">WB1_ram_block1a10_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a10_PORT_A_data_in">WB1_ram_block1a10_PORT_A_data_in</A>, WB1_ram_block1a10_clock_0, , , );
<P><A NAME="WB1_ram_block1a10_PORT_A_address">WB1_ram_block1a10_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a10_PORT_A_address_reg">WB1_ram_block1a10_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a10_PORT_A_address">WB1_ram_block1a10_PORT_A_address</A>, WB1_ram_block1a10_clock_0, , , );
<P><A NAME="WB1_ram_block1a10_PORT_B_address">WB1_ram_block1a10_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a10_PORT_B_address_reg">WB1_ram_block1a10_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a10_PORT_B_address">WB1_ram_block1a10_PORT_B_address</A>, WB1_ram_block1a10_clock_0, , , );
<P><A NAME="WB1_ram_block1a10_PORT_A_write_enable">WB1_ram_block1a10_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a10_PORT_A_write_enable_reg">WB1_ram_block1a10_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a10_PORT_A_write_enable">WB1_ram_block1a10_PORT_A_write_enable</A>, WB1_ram_block1a10_clock_0, , , );
<P><A NAME="WB1_ram_block1a10_PORT_B_read_enable">WB1_ram_block1a10_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a10_PORT_B_read_enable_reg">WB1_ram_block1a10_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a10_PORT_B_read_enable">WB1_ram_block1a10_PORT_B_read_enable</A>, WB1_ram_block1a10_clock_0, , , );
<P><A NAME="WB1_ram_block1a10_PORT_A_byte_mask">WB1_ram_block1a10_PORT_A_byte_mask</A> = <A HREF="#VB1_UMWS">VB1_UMWS</A>;
<P><A NAME="WB1_ram_block1a10_PORT_A_byte_mask_reg">WB1_ram_block1a10_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a10_PORT_A_byte_mask">WB1_ram_block1a10_PORT_A_byte_mask</A>, WB1_ram_block1a10_clock_0, , , );
<P><A NAME="WB1_ram_block1a10_clock_0">WB1_ram_block1a10_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a10_PORT_B_data_out">WB1_ram_block1a10_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a10_PORT_A_data_in_reg">WB1_ram_block1a10_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a10_PORT_A_address_reg">WB1_ram_block1a10_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a10_PORT_B_address_reg">WB1_ram_block1a10_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a10_PORT_A_write_enable_reg">WB1_ram_block1a10_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a10_PORT_B_read_enable_reg">WB1_ram_block1a10_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a10_PORT_A_byte_mask_reg">WB1_ram_block1a10_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a10_clock_0">WB1_ram_block1a10_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a10">WB1_ram_block1a10</A> = <A HREF="#WB1_ram_block1a10_PORT_B_data_out">WB1_ram_block1a10_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a26 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a26
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a26_PORT_A_data_in">WB1_ram_block1a26_PORT_A_data_in</A> = <A HREF="#H1L3">H1L3</A>;
<P><A NAME="WB1_ram_block1a26_PORT_A_data_in_reg">WB1_ram_block1a26_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a26_PORT_A_data_in">WB1_ram_block1a26_PORT_A_data_in</A>, WB1_ram_block1a26_clock_0, , , );
<P><A NAME="WB1_ram_block1a26_PORT_A_address">WB1_ram_block1a26_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a26_PORT_A_address_reg">WB1_ram_block1a26_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a26_PORT_A_address">WB1_ram_block1a26_PORT_A_address</A>, WB1_ram_block1a26_clock_0, , , );
<P><A NAME="WB1_ram_block1a26_PORT_B_address">WB1_ram_block1a26_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a26_PORT_B_address_reg">WB1_ram_block1a26_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a26_PORT_B_address">WB1_ram_block1a26_PORT_B_address</A>, WB1_ram_block1a26_clock_0, , , );
<P><A NAME="WB1_ram_block1a26_PORT_A_write_enable">WB1_ram_block1a26_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a26_PORT_A_write_enable_reg">WB1_ram_block1a26_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a26_PORT_A_write_enable">WB1_ram_block1a26_PORT_A_write_enable</A>, WB1_ram_block1a26_clock_0, , , );
<P><A NAME="WB1_ram_block1a26_PORT_B_read_enable">WB1_ram_block1a26_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a26_PORT_B_read_enable_reg">WB1_ram_block1a26_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a26_PORT_B_read_enable">WB1_ram_block1a26_PORT_B_read_enable</A>, WB1_ram_block1a26_clock_0, , , );
<P><A NAME="WB1_ram_block1a26_PORT_A_byte_mask">WB1_ram_block1a26_PORT_A_byte_mask</A> = <A HREF="#VB1_LLWS">VB1_LLWS</A>;
<P><A NAME="WB1_ram_block1a26_PORT_A_byte_mask_reg">WB1_ram_block1a26_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a26_PORT_A_byte_mask">WB1_ram_block1a26_PORT_A_byte_mask</A>, WB1_ram_block1a26_clock_0, , , );
<P><A NAME="WB1_ram_block1a26_clock_0">WB1_ram_block1a26_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a26_PORT_B_data_out">WB1_ram_block1a26_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a26_PORT_A_data_in_reg">WB1_ram_block1a26_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a26_PORT_A_address_reg">WB1_ram_block1a26_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a26_PORT_B_address_reg">WB1_ram_block1a26_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a26_PORT_A_write_enable_reg">WB1_ram_block1a26_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a26_PORT_B_read_enable_reg">WB1_ram_block1a26_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a26_PORT_A_byte_mask_reg">WB1_ram_block1a26_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a26_clock_0">WB1_ram_block1a26_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a26">WB1_ram_block1a26</A> = <A HREF="#WB1_ram_block1a26_PORT_B_data_out">WB1_ram_block1a26_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a3 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a3
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a3_PORT_A_data_in">WB1_ram_block1a3_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a3_PORT_A_data_in_reg">WB1_ram_block1a3_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a3_PORT_A_data_in">WB1_ram_block1a3_PORT_A_data_in</A>, WB1_ram_block1a3_clock_0, , , );
<P><A NAME="WB1_ram_block1a3_PORT_A_address">WB1_ram_block1a3_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a3_PORT_A_address_reg">WB1_ram_block1a3_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a3_PORT_A_address">WB1_ram_block1a3_PORT_A_address</A>, WB1_ram_block1a3_clock_0, , , );
<P><A NAME="WB1_ram_block1a3_PORT_B_address">WB1_ram_block1a3_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a3_PORT_B_address_reg">WB1_ram_block1a3_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a3_PORT_B_address">WB1_ram_block1a3_PORT_B_address</A>, WB1_ram_block1a3_clock_0, , , );
<P><A NAME="WB1_ram_block1a3_PORT_A_write_enable">WB1_ram_block1a3_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a3_PORT_A_write_enable_reg">WB1_ram_block1a3_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a3_PORT_A_write_enable">WB1_ram_block1a3_PORT_A_write_enable</A>, WB1_ram_block1a3_clock_0, , , );
<P><A NAME="WB1_ram_block1a3_PORT_B_read_enable">WB1_ram_block1a3_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a3_PORT_B_read_enable_reg">WB1_ram_block1a3_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a3_PORT_B_read_enable">WB1_ram_block1a3_PORT_B_read_enable</A>, WB1_ram_block1a3_clock_0, , , );
<P><A NAME="WB1_ram_block1a3_PORT_A_byte_mask">WB1_ram_block1a3_PORT_A_byte_mask</A> = <A HREF="#VB1_UUWS">VB1_UUWS</A>;
<P><A NAME="WB1_ram_block1a3_PORT_A_byte_mask_reg">WB1_ram_block1a3_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a3_PORT_A_byte_mask">WB1_ram_block1a3_PORT_A_byte_mask</A>, WB1_ram_block1a3_clock_0, , , );
<P><A NAME="WB1_ram_block1a3_clock_0">WB1_ram_block1a3_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a3_PORT_B_data_out">WB1_ram_block1a3_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a3_PORT_A_data_in_reg">WB1_ram_block1a3_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a3_PORT_A_address_reg">WB1_ram_block1a3_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a3_PORT_B_address_reg">WB1_ram_block1a3_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a3_PORT_A_write_enable_reg">WB1_ram_block1a3_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a3_PORT_B_read_enable_reg">WB1_ram_block1a3_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a3_PORT_A_byte_mask_reg">WB1_ram_block1a3_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a3_clock_0">WB1_ram_block1a3_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a3">WB1_ram_block1a3</A> = <A HREF="#WB1_ram_block1a3_PORT_B_data_out">WB1_ram_block1a3_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a19 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a19
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a19_PORT_A_data_in">WB1_ram_block1a19_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a19_PORT_A_data_in_reg">WB1_ram_block1a19_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a19_PORT_A_data_in">WB1_ram_block1a19_PORT_A_data_in</A>, WB1_ram_block1a19_clock_0, , , );
<P><A NAME="WB1_ram_block1a19_PORT_A_address">WB1_ram_block1a19_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a19_PORT_A_address_reg">WB1_ram_block1a19_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a19_PORT_A_address">WB1_ram_block1a19_PORT_A_address</A>, WB1_ram_block1a19_clock_0, , , );
<P><A NAME="WB1_ram_block1a19_PORT_B_address">WB1_ram_block1a19_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a19_PORT_B_address_reg">WB1_ram_block1a19_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a19_PORT_B_address">WB1_ram_block1a19_PORT_B_address</A>, WB1_ram_block1a19_clock_0, , , );
<P><A NAME="WB1_ram_block1a19_PORT_A_write_enable">WB1_ram_block1a19_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a19_PORT_A_write_enable_reg">WB1_ram_block1a19_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a19_PORT_A_write_enable">WB1_ram_block1a19_PORT_A_write_enable</A>, WB1_ram_block1a19_clock_0, , , );
<P><A NAME="WB1_ram_block1a19_PORT_B_read_enable">WB1_ram_block1a19_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a19_PORT_B_read_enable_reg">WB1_ram_block1a19_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a19_PORT_B_read_enable">WB1_ram_block1a19_PORT_B_read_enable</A>, WB1_ram_block1a19_clock_0, , , );
<P><A NAME="WB1_ram_block1a19_PORT_A_byte_mask">WB1_ram_block1a19_PORT_A_byte_mask</A> = <A HREF="#VB1_LMWS">VB1_LMWS</A>;
<P><A NAME="WB1_ram_block1a19_PORT_A_byte_mask_reg">WB1_ram_block1a19_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a19_PORT_A_byte_mask">WB1_ram_block1a19_PORT_A_byte_mask</A>, WB1_ram_block1a19_clock_0, , , );
<P><A NAME="WB1_ram_block1a19_clock_0">WB1_ram_block1a19_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a19_PORT_B_data_out">WB1_ram_block1a19_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a19_PORT_A_data_in_reg">WB1_ram_block1a19_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a19_PORT_A_address_reg">WB1_ram_block1a19_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a19_PORT_B_address_reg">WB1_ram_block1a19_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a19_PORT_A_write_enable_reg">WB1_ram_block1a19_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a19_PORT_B_read_enable_reg">WB1_ram_block1a19_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a19_PORT_A_byte_mask_reg">WB1_ram_block1a19_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a19_clock_0">WB1_ram_block1a19_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a19">WB1_ram_block1a19</A> = <A HREF="#WB1_ram_block1a19_PORT_B_data_out">WB1_ram_block1a19_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a11 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a11
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a11_PORT_A_data_in">WB1_ram_block1a11_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a11_PORT_A_data_in_reg">WB1_ram_block1a11_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a11_PORT_A_data_in">WB1_ram_block1a11_PORT_A_data_in</A>, WB1_ram_block1a11_clock_0, , , );
<P><A NAME="WB1_ram_block1a11_PORT_A_address">WB1_ram_block1a11_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a11_PORT_A_address_reg">WB1_ram_block1a11_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a11_PORT_A_address">WB1_ram_block1a11_PORT_A_address</A>, WB1_ram_block1a11_clock_0, , , );
<P><A NAME="WB1_ram_block1a11_PORT_B_address">WB1_ram_block1a11_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a11_PORT_B_address_reg">WB1_ram_block1a11_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a11_PORT_B_address">WB1_ram_block1a11_PORT_B_address</A>, WB1_ram_block1a11_clock_0, , , );
<P><A NAME="WB1_ram_block1a11_PORT_A_write_enable">WB1_ram_block1a11_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a11_PORT_A_write_enable_reg">WB1_ram_block1a11_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a11_PORT_A_write_enable">WB1_ram_block1a11_PORT_A_write_enable</A>, WB1_ram_block1a11_clock_0, , , );
<P><A NAME="WB1_ram_block1a11_PORT_B_read_enable">WB1_ram_block1a11_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a11_PORT_B_read_enable_reg">WB1_ram_block1a11_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a11_PORT_B_read_enable">WB1_ram_block1a11_PORT_B_read_enable</A>, WB1_ram_block1a11_clock_0, , , );
<P><A NAME="WB1_ram_block1a11_PORT_A_byte_mask">WB1_ram_block1a11_PORT_A_byte_mask</A> = <A HREF="#VB1_UMWS">VB1_UMWS</A>;
<P><A NAME="WB1_ram_block1a11_PORT_A_byte_mask_reg">WB1_ram_block1a11_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a11_PORT_A_byte_mask">WB1_ram_block1a11_PORT_A_byte_mask</A>, WB1_ram_block1a11_clock_0, , , );
<P><A NAME="WB1_ram_block1a11_clock_0">WB1_ram_block1a11_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a11_PORT_B_data_out">WB1_ram_block1a11_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a11_PORT_A_data_in_reg">WB1_ram_block1a11_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a11_PORT_A_address_reg">WB1_ram_block1a11_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a11_PORT_B_address_reg">WB1_ram_block1a11_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a11_PORT_A_write_enable_reg">WB1_ram_block1a11_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a11_PORT_B_read_enable_reg">WB1_ram_block1a11_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a11_PORT_A_byte_mask_reg">WB1_ram_block1a11_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a11_clock_0">WB1_ram_block1a11_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a11">WB1_ram_block1a11</A> = <A HREF="#WB1_ram_block1a11_PORT_B_data_out">WB1_ram_block1a11_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a27 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a27
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a27_PORT_A_data_in">WB1_ram_block1a27_PORT_A_data_in</A> = <A HREF="#H1L4">H1L4</A>;
<P><A NAME="WB1_ram_block1a27_PORT_A_data_in_reg">WB1_ram_block1a27_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a27_PORT_A_data_in">WB1_ram_block1a27_PORT_A_data_in</A>, WB1_ram_block1a27_clock_0, , , );
<P><A NAME="WB1_ram_block1a27_PORT_A_address">WB1_ram_block1a27_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a27_PORT_A_address_reg">WB1_ram_block1a27_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a27_PORT_A_address">WB1_ram_block1a27_PORT_A_address</A>, WB1_ram_block1a27_clock_0, , , );
<P><A NAME="WB1_ram_block1a27_PORT_B_address">WB1_ram_block1a27_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a27_PORT_B_address_reg">WB1_ram_block1a27_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a27_PORT_B_address">WB1_ram_block1a27_PORT_B_address</A>, WB1_ram_block1a27_clock_0, , , );
<P><A NAME="WB1_ram_block1a27_PORT_A_write_enable">WB1_ram_block1a27_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a27_PORT_A_write_enable_reg">WB1_ram_block1a27_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a27_PORT_A_write_enable">WB1_ram_block1a27_PORT_A_write_enable</A>, WB1_ram_block1a27_clock_0, , , );
<P><A NAME="WB1_ram_block1a27_PORT_B_read_enable">WB1_ram_block1a27_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a27_PORT_B_read_enable_reg">WB1_ram_block1a27_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a27_PORT_B_read_enable">WB1_ram_block1a27_PORT_B_read_enable</A>, WB1_ram_block1a27_clock_0, , , );
<P><A NAME="WB1_ram_block1a27_PORT_A_byte_mask">WB1_ram_block1a27_PORT_A_byte_mask</A> = <A HREF="#VB1_LLWS">VB1_LLWS</A>;
<P><A NAME="WB1_ram_block1a27_PORT_A_byte_mask_reg">WB1_ram_block1a27_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a27_PORT_A_byte_mask">WB1_ram_block1a27_PORT_A_byte_mask</A>, WB1_ram_block1a27_clock_0, , , );
<P><A NAME="WB1_ram_block1a27_clock_0">WB1_ram_block1a27_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a27_PORT_B_data_out">WB1_ram_block1a27_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a27_PORT_A_data_in_reg">WB1_ram_block1a27_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a27_PORT_A_address_reg">WB1_ram_block1a27_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a27_PORT_B_address_reg">WB1_ram_block1a27_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a27_PORT_A_write_enable_reg">WB1_ram_block1a27_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a27_PORT_B_read_enable_reg">WB1_ram_block1a27_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a27_PORT_A_byte_mask_reg">WB1_ram_block1a27_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a27_clock_0">WB1_ram_block1a27_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a27">WB1_ram_block1a27</A> = <A HREF="#WB1_ram_block1a27_PORT_B_data_out">WB1_ram_block1a27_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a4 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a4
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a4_PORT_A_data_in">WB1_ram_block1a4_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a4_PORT_A_data_in_reg">WB1_ram_block1a4_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a4_PORT_A_data_in">WB1_ram_block1a4_PORT_A_data_in</A>, WB1_ram_block1a4_clock_0, , , );
<P><A NAME="WB1_ram_block1a4_PORT_A_address">WB1_ram_block1a4_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a4_PORT_A_address_reg">WB1_ram_block1a4_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a4_PORT_A_address">WB1_ram_block1a4_PORT_A_address</A>, WB1_ram_block1a4_clock_0, , , );
<P><A NAME="WB1_ram_block1a4_PORT_B_address">WB1_ram_block1a4_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a4_PORT_B_address_reg">WB1_ram_block1a4_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a4_PORT_B_address">WB1_ram_block1a4_PORT_B_address</A>, WB1_ram_block1a4_clock_0, , , );
<P><A NAME="WB1_ram_block1a4_PORT_A_write_enable">WB1_ram_block1a4_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a4_PORT_A_write_enable_reg">WB1_ram_block1a4_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a4_PORT_A_write_enable">WB1_ram_block1a4_PORT_A_write_enable</A>, WB1_ram_block1a4_clock_0, , , );
<P><A NAME="WB1_ram_block1a4_PORT_B_read_enable">WB1_ram_block1a4_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a4_PORT_B_read_enable_reg">WB1_ram_block1a4_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a4_PORT_B_read_enable">WB1_ram_block1a4_PORT_B_read_enable</A>, WB1_ram_block1a4_clock_0, , , );
<P><A NAME="WB1_ram_block1a4_PORT_A_byte_mask">WB1_ram_block1a4_PORT_A_byte_mask</A> = <A HREF="#VB1_UUWS">VB1_UUWS</A>;
<P><A NAME="WB1_ram_block1a4_PORT_A_byte_mask_reg">WB1_ram_block1a4_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a4_PORT_A_byte_mask">WB1_ram_block1a4_PORT_A_byte_mask</A>, WB1_ram_block1a4_clock_0, , , );
<P><A NAME="WB1_ram_block1a4_clock_0">WB1_ram_block1a4_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a4_PORT_B_data_out">WB1_ram_block1a4_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a4_PORT_A_data_in_reg">WB1_ram_block1a4_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a4_PORT_A_address_reg">WB1_ram_block1a4_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a4_PORT_B_address_reg">WB1_ram_block1a4_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a4_PORT_A_write_enable_reg">WB1_ram_block1a4_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a4_PORT_B_read_enable_reg">WB1_ram_block1a4_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a4_PORT_A_byte_mask_reg">WB1_ram_block1a4_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a4_clock_0">WB1_ram_block1a4_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a4">WB1_ram_block1a4</A> = <A HREF="#WB1_ram_block1a4_PORT_B_data_out">WB1_ram_block1a4_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a20 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a20
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a20_PORT_A_data_in">WB1_ram_block1a20_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a20_PORT_A_data_in_reg">WB1_ram_block1a20_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a20_PORT_A_data_in">WB1_ram_block1a20_PORT_A_data_in</A>, WB1_ram_block1a20_clock_0, , , );
<P><A NAME="WB1_ram_block1a20_PORT_A_address">WB1_ram_block1a20_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a20_PORT_A_address_reg">WB1_ram_block1a20_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a20_PORT_A_address">WB1_ram_block1a20_PORT_A_address</A>, WB1_ram_block1a20_clock_0, , , );
<P><A NAME="WB1_ram_block1a20_PORT_B_address">WB1_ram_block1a20_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a20_PORT_B_address_reg">WB1_ram_block1a20_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a20_PORT_B_address">WB1_ram_block1a20_PORT_B_address</A>, WB1_ram_block1a20_clock_0, , , );
<P><A NAME="WB1_ram_block1a20_PORT_A_write_enable">WB1_ram_block1a20_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a20_PORT_A_write_enable_reg">WB1_ram_block1a20_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a20_PORT_A_write_enable">WB1_ram_block1a20_PORT_A_write_enable</A>, WB1_ram_block1a20_clock_0, , , );
<P><A NAME="WB1_ram_block1a20_PORT_B_read_enable">WB1_ram_block1a20_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a20_PORT_B_read_enable_reg">WB1_ram_block1a20_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a20_PORT_B_read_enable">WB1_ram_block1a20_PORT_B_read_enable</A>, WB1_ram_block1a20_clock_0, , , );
<P><A NAME="WB1_ram_block1a20_PORT_A_byte_mask">WB1_ram_block1a20_PORT_A_byte_mask</A> = <A HREF="#VB1_LMWS">VB1_LMWS</A>;
<P><A NAME="WB1_ram_block1a20_PORT_A_byte_mask_reg">WB1_ram_block1a20_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a20_PORT_A_byte_mask">WB1_ram_block1a20_PORT_A_byte_mask</A>, WB1_ram_block1a20_clock_0, , , );
<P><A NAME="WB1_ram_block1a20_clock_0">WB1_ram_block1a20_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a20_PORT_B_data_out">WB1_ram_block1a20_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a20_PORT_A_data_in_reg">WB1_ram_block1a20_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a20_PORT_A_address_reg">WB1_ram_block1a20_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a20_PORT_B_address_reg">WB1_ram_block1a20_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a20_PORT_A_write_enable_reg">WB1_ram_block1a20_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a20_PORT_B_read_enable_reg">WB1_ram_block1a20_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a20_PORT_A_byte_mask_reg">WB1_ram_block1a20_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a20_clock_0">WB1_ram_block1a20_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a20">WB1_ram_block1a20</A> = <A HREF="#WB1_ram_block1a20_PORT_B_data_out">WB1_ram_block1a20_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a12 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a12
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a12_PORT_A_data_in">WB1_ram_block1a12_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a12_PORT_A_data_in_reg">WB1_ram_block1a12_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a12_PORT_A_data_in">WB1_ram_block1a12_PORT_A_data_in</A>, WB1_ram_block1a12_clock_0, , , );
<P><A NAME="WB1_ram_block1a12_PORT_A_address">WB1_ram_block1a12_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a12_PORT_A_address_reg">WB1_ram_block1a12_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a12_PORT_A_address">WB1_ram_block1a12_PORT_A_address</A>, WB1_ram_block1a12_clock_0, , , );
<P><A NAME="WB1_ram_block1a12_PORT_B_address">WB1_ram_block1a12_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a12_PORT_B_address_reg">WB1_ram_block1a12_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a12_PORT_B_address">WB1_ram_block1a12_PORT_B_address</A>, WB1_ram_block1a12_clock_0, , , );
<P><A NAME="WB1_ram_block1a12_PORT_A_write_enable">WB1_ram_block1a12_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a12_PORT_A_write_enable_reg">WB1_ram_block1a12_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a12_PORT_A_write_enable">WB1_ram_block1a12_PORT_A_write_enable</A>, WB1_ram_block1a12_clock_0, , , );
<P><A NAME="WB1_ram_block1a12_PORT_B_read_enable">WB1_ram_block1a12_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a12_PORT_B_read_enable_reg">WB1_ram_block1a12_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a12_PORT_B_read_enable">WB1_ram_block1a12_PORT_B_read_enable</A>, WB1_ram_block1a12_clock_0, , , );
<P><A NAME="WB1_ram_block1a12_PORT_A_byte_mask">WB1_ram_block1a12_PORT_A_byte_mask</A> = <A HREF="#VB1_UMWS">VB1_UMWS</A>;
<P><A NAME="WB1_ram_block1a12_PORT_A_byte_mask_reg">WB1_ram_block1a12_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a12_PORT_A_byte_mask">WB1_ram_block1a12_PORT_A_byte_mask</A>, WB1_ram_block1a12_clock_0, , , );
<P><A NAME="WB1_ram_block1a12_clock_0">WB1_ram_block1a12_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a12_PORT_B_data_out">WB1_ram_block1a12_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a12_PORT_A_data_in_reg">WB1_ram_block1a12_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a12_PORT_A_address_reg">WB1_ram_block1a12_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a12_PORT_B_address_reg">WB1_ram_block1a12_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a12_PORT_A_write_enable_reg">WB1_ram_block1a12_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a12_PORT_B_read_enable_reg">WB1_ram_block1a12_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a12_PORT_A_byte_mask_reg">WB1_ram_block1a12_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a12_clock_0">WB1_ram_block1a12_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a12">WB1_ram_block1a12</A> = <A HREF="#WB1_ram_block1a12_PORT_B_data_out">WB1_ram_block1a12_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a28 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a28
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a28_PORT_A_data_in">WB1_ram_block1a28_PORT_A_data_in</A> = <A HREF="#H1L5">H1L5</A>;
<P><A NAME="WB1_ram_block1a28_PORT_A_data_in_reg">WB1_ram_block1a28_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a28_PORT_A_data_in">WB1_ram_block1a28_PORT_A_data_in</A>, WB1_ram_block1a28_clock_0, , , );
<P><A NAME="WB1_ram_block1a28_PORT_A_address">WB1_ram_block1a28_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a28_PORT_A_address_reg">WB1_ram_block1a28_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a28_PORT_A_address">WB1_ram_block1a28_PORT_A_address</A>, WB1_ram_block1a28_clock_0, , , );
<P><A NAME="WB1_ram_block1a28_PORT_B_address">WB1_ram_block1a28_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a28_PORT_B_address_reg">WB1_ram_block1a28_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a28_PORT_B_address">WB1_ram_block1a28_PORT_B_address</A>, WB1_ram_block1a28_clock_0, , , );
<P><A NAME="WB1_ram_block1a28_PORT_A_write_enable">WB1_ram_block1a28_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a28_PORT_A_write_enable_reg">WB1_ram_block1a28_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a28_PORT_A_write_enable">WB1_ram_block1a28_PORT_A_write_enable</A>, WB1_ram_block1a28_clock_0, , , );
<P><A NAME="WB1_ram_block1a28_PORT_B_read_enable">WB1_ram_block1a28_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a28_PORT_B_read_enable_reg">WB1_ram_block1a28_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a28_PORT_B_read_enable">WB1_ram_block1a28_PORT_B_read_enable</A>, WB1_ram_block1a28_clock_0, , , );
<P><A NAME="WB1_ram_block1a28_PORT_A_byte_mask">WB1_ram_block1a28_PORT_A_byte_mask</A> = <A HREF="#VB1_LLWS">VB1_LLWS</A>;
<P><A NAME="WB1_ram_block1a28_PORT_A_byte_mask_reg">WB1_ram_block1a28_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a28_PORT_A_byte_mask">WB1_ram_block1a28_PORT_A_byte_mask</A>, WB1_ram_block1a28_clock_0, , , );
<P><A NAME="WB1_ram_block1a28_clock_0">WB1_ram_block1a28_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a28_PORT_B_data_out">WB1_ram_block1a28_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a28_PORT_A_data_in_reg">WB1_ram_block1a28_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a28_PORT_A_address_reg">WB1_ram_block1a28_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a28_PORT_B_address_reg">WB1_ram_block1a28_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a28_PORT_A_write_enable_reg">WB1_ram_block1a28_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a28_PORT_B_read_enable_reg">WB1_ram_block1a28_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a28_PORT_A_byte_mask_reg">WB1_ram_block1a28_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a28_clock_0">WB1_ram_block1a28_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a28">WB1_ram_block1a28</A> = <A HREF="#WB1_ram_block1a28_PORT_B_data_out">WB1_ram_block1a28_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a5 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a5
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a5_PORT_A_data_in">WB1_ram_block1a5_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a5_PORT_A_data_in_reg">WB1_ram_block1a5_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a5_PORT_A_data_in">WB1_ram_block1a5_PORT_A_data_in</A>, WB1_ram_block1a5_clock_0, , , );
<P><A NAME="WB1_ram_block1a5_PORT_A_address">WB1_ram_block1a5_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a5_PORT_A_address_reg">WB1_ram_block1a5_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a5_PORT_A_address">WB1_ram_block1a5_PORT_A_address</A>, WB1_ram_block1a5_clock_0, , , );
<P><A NAME="WB1_ram_block1a5_PORT_B_address">WB1_ram_block1a5_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a5_PORT_B_address_reg">WB1_ram_block1a5_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a5_PORT_B_address">WB1_ram_block1a5_PORT_B_address</A>, WB1_ram_block1a5_clock_0, , , );
<P><A NAME="WB1_ram_block1a5_PORT_A_write_enable">WB1_ram_block1a5_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a5_PORT_A_write_enable_reg">WB1_ram_block1a5_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a5_PORT_A_write_enable">WB1_ram_block1a5_PORT_A_write_enable</A>, WB1_ram_block1a5_clock_0, , , );
<P><A NAME="WB1_ram_block1a5_PORT_B_read_enable">WB1_ram_block1a5_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a5_PORT_B_read_enable_reg">WB1_ram_block1a5_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a5_PORT_B_read_enable">WB1_ram_block1a5_PORT_B_read_enable</A>, WB1_ram_block1a5_clock_0, , , );
<P><A NAME="WB1_ram_block1a5_PORT_A_byte_mask">WB1_ram_block1a5_PORT_A_byte_mask</A> = <A HREF="#VB1_UUWS">VB1_UUWS</A>;
<P><A NAME="WB1_ram_block1a5_PORT_A_byte_mask_reg">WB1_ram_block1a5_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a5_PORT_A_byte_mask">WB1_ram_block1a5_PORT_A_byte_mask</A>, WB1_ram_block1a5_clock_0, , , );
<P><A NAME="WB1_ram_block1a5_clock_0">WB1_ram_block1a5_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a5_PORT_B_data_out">WB1_ram_block1a5_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a5_PORT_A_data_in_reg">WB1_ram_block1a5_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a5_PORT_A_address_reg">WB1_ram_block1a5_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a5_PORT_B_address_reg">WB1_ram_block1a5_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a5_PORT_A_write_enable_reg">WB1_ram_block1a5_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a5_PORT_B_read_enable_reg">WB1_ram_block1a5_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a5_PORT_A_byte_mask_reg">WB1_ram_block1a5_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a5_clock_0">WB1_ram_block1a5_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a5">WB1_ram_block1a5</A> = <A HREF="#WB1_ram_block1a5_PORT_B_data_out">WB1_ram_block1a5_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a21 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a21
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a21_PORT_A_data_in">WB1_ram_block1a21_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a21_PORT_A_data_in_reg">WB1_ram_block1a21_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a21_PORT_A_data_in">WB1_ram_block1a21_PORT_A_data_in</A>, WB1_ram_block1a21_clock_0, , , );
<P><A NAME="WB1_ram_block1a21_PORT_A_address">WB1_ram_block1a21_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a21_PORT_A_address_reg">WB1_ram_block1a21_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a21_PORT_A_address">WB1_ram_block1a21_PORT_A_address</A>, WB1_ram_block1a21_clock_0, , , );
<P><A NAME="WB1_ram_block1a21_PORT_B_address">WB1_ram_block1a21_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a21_PORT_B_address_reg">WB1_ram_block1a21_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a21_PORT_B_address">WB1_ram_block1a21_PORT_B_address</A>, WB1_ram_block1a21_clock_0, , , );
<P><A NAME="WB1_ram_block1a21_PORT_A_write_enable">WB1_ram_block1a21_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a21_PORT_A_write_enable_reg">WB1_ram_block1a21_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a21_PORT_A_write_enable">WB1_ram_block1a21_PORT_A_write_enable</A>, WB1_ram_block1a21_clock_0, , , );
<P><A NAME="WB1_ram_block1a21_PORT_B_read_enable">WB1_ram_block1a21_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a21_PORT_B_read_enable_reg">WB1_ram_block1a21_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a21_PORT_B_read_enable">WB1_ram_block1a21_PORT_B_read_enable</A>, WB1_ram_block1a21_clock_0, , , );
<P><A NAME="WB1_ram_block1a21_PORT_A_byte_mask">WB1_ram_block1a21_PORT_A_byte_mask</A> = <A HREF="#VB1_LMWS">VB1_LMWS</A>;
<P><A NAME="WB1_ram_block1a21_PORT_A_byte_mask_reg">WB1_ram_block1a21_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a21_PORT_A_byte_mask">WB1_ram_block1a21_PORT_A_byte_mask</A>, WB1_ram_block1a21_clock_0, , , );
<P><A NAME="WB1_ram_block1a21_clock_0">WB1_ram_block1a21_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a21_PORT_B_data_out">WB1_ram_block1a21_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a21_PORT_A_data_in_reg">WB1_ram_block1a21_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a21_PORT_A_address_reg">WB1_ram_block1a21_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a21_PORT_B_address_reg">WB1_ram_block1a21_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a21_PORT_A_write_enable_reg">WB1_ram_block1a21_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a21_PORT_B_read_enable_reg">WB1_ram_block1a21_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a21_PORT_A_byte_mask_reg">WB1_ram_block1a21_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a21_clock_0">WB1_ram_block1a21_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a21">WB1_ram_block1a21</A> = <A HREF="#WB1_ram_block1a21_PORT_B_data_out">WB1_ram_block1a21_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a13 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a13
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a13_PORT_A_data_in">WB1_ram_block1a13_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a13_PORT_A_data_in_reg">WB1_ram_block1a13_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a13_PORT_A_data_in">WB1_ram_block1a13_PORT_A_data_in</A>, WB1_ram_block1a13_clock_0, , , );
<P><A NAME="WB1_ram_block1a13_PORT_A_address">WB1_ram_block1a13_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a13_PORT_A_address_reg">WB1_ram_block1a13_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a13_PORT_A_address">WB1_ram_block1a13_PORT_A_address</A>, WB1_ram_block1a13_clock_0, , , );
<P><A NAME="WB1_ram_block1a13_PORT_B_address">WB1_ram_block1a13_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a13_PORT_B_address_reg">WB1_ram_block1a13_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a13_PORT_B_address">WB1_ram_block1a13_PORT_B_address</A>, WB1_ram_block1a13_clock_0, , , );
<P><A NAME="WB1_ram_block1a13_PORT_A_write_enable">WB1_ram_block1a13_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a13_PORT_A_write_enable_reg">WB1_ram_block1a13_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a13_PORT_A_write_enable">WB1_ram_block1a13_PORT_A_write_enable</A>, WB1_ram_block1a13_clock_0, , , );
<P><A NAME="WB1_ram_block1a13_PORT_B_read_enable">WB1_ram_block1a13_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a13_PORT_B_read_enable_reg">WB1_ram_block1a13_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a13_PORT_B_read_enable">WB1_ram_block1a13_PORT_B_read_enable</A>, WB1_ram_block1a13_clock_0, , , );
<P><A NAME="WB1_ram_block1a13_PORT_A_byte_mask">WB1_ram_block1a13_PORT_A_byte_mask</A> = <A HREF="#VB1_UMWS">VB1_UMWS</A>;
<P><A NAME="WB1_ram_block1a13_PORT_A_byte_mask_reg">WB1_ram_block1a13_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a13_PORT_A_byte_mask">WB1_ram_block1a13_PORT_A_byte_mask</A>, WB1_ram_block1a13_clock_0, , , );
<P><A NAME="WB1_ram_block1a13_clock_0">WB1_ram_block1a13_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a13_PORT_B_data_out">WB1_ram_block1a13_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a13_PORT_A_data_in_reg">WB1_ram_block1a13_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a13_PORT_A_address_reg">WB1_ram_block1a13_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a13_PORT_B_address_reg">WB1_ram_block1a13_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a13_PORT_A_write_enable_reg">WB1_ram_block1a13_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a13_PORT_B_read_enable_reg">WB1_ram_block1a13_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a13_PORT_A_byte_mask_reg">WB1_ram_block1a13_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a13_clock_0">WB1_ram_block1a13_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a13">WB1_ram_block1a13</A> = <A HREF="#WB1_ram_block1a13_PORT_B_data_out">WB1_ram_block1a13_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a29 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a29
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a29_PORT_A_data_in">WB1_ram_block1a29_PORT_A_data_in</A> = <A HREF="#H1L6">H1L6</A>;
<P><A NAME="WB1_ram_block1a29_PORT_A_data_in_reg">WB1_ram_block1a29_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a29_PORT_A_data_in">WB1_ram_block1a29_PORT_A_data_in</A>, WB1_ram_block1a29_clock_0, , , );
<P><A NAME="WB1_ram_block1a29_PORT_A_address">WB1_ram_block1a29_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a29_PORT_A_address_reg">WB1_ram_block1a29_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a29_PORT_A_address">WB1_ram_block1a29_PORT_A_address</A>, WB1_ram_block1a29_clock_0, , , );
<P><A NAME="WB1_ram_block1a29_PORT_B_address">WB1_ram_block1a29_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a29_PORT_B_address_reg">WB1_ram_block1a29_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a29_PORT_B_address">WB1_ram_block1a29_PORT_B_address</A>, WB1_ram_block1a29_clock_0, , , );
<P><A NAME="WB1_ram_block1a29_PORT_A_write_enable">WB1_ram_block1a29_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a29_PORT_A_write_enable_reg">WB1_ram_block1a29_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a29_PORT_A_write_enable">WB1_ram_block1a29_PORT_A_write_enable</A>, WB1_ram_block1a29_clock_0, , , );
<P><A NAME="WB1_ram_block1a29_PORT_B_read_enable">WB1_ram_block1a29_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a29_PORT_B_read_enable_reg">WB1_ram_block1a29_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a29_PORT_B_read_enable">WB1_ram_block1a29_PORT_B_read_enable</A>, WB1_ram_block1a29_clock_0, , , );
<P><A NAME="WB1_ram_block1a29_PORT_A_byte_mask">WB1_ram_block1a29_PORT_A_byte_mask</A> = <A HREF="#VB1_LLWS">VB1_LLWS</A>;
<P><A NAME="WB1_ram_block1a29_PORT_A_byte_mask_reg">WB1_ram_block1a29_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a29_PORT_A_byte_mask">WB1_ram_block1a29_PORT_A_byte_mask</A>, WB1_ram_block1a29_clock_0, , , );
<P><A NAME="WB1_ram_block1a29_clock_0">WB1_ram_block1a29_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a29_PORT_B_data_out">WB1_ram_block1a29_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a29_PORT_A_data_in_reg">WB1_ram_block1a29_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a29_PORT_A_address_reg">WB1_ram_block1a29_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a29_PORT_B_address_reg">WB1_ram_block1a29_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a29_PORT_A_write_enable_reg">WB1_ram_block1a29_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a29_PORT_B_read_enable_reg">WB1_ram_block1a29_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a29_PORT_A_byte_mask_reg">WB1_ram_block1a29_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a29_clock_0">WB1_ram_block1a29_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a29">WB1_ram_block1a29</A> = <A HREF="#WB1_ram_block1a29_PORT_B_data_out">WB1_ram_block1a29_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a6 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a6
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a6_PORT_A_data_in">WB1_ram_block1a6_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a6_PORT_A_data_in_reg">WB1_ram_block1a6_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a6_PORT_A_data_in">WB1_ram_block1a6_PORT_A_data_in</A>, WB1_ram_block1a6_clock_0, , , );
<P><A NAME="WB1_ram_block1a6_PORT_A_address">WB1_ram_block1a6_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a6_PORT_A_address_reg">WB1_ram_block1a6_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a6_PORT_A_address">WB1_ram_block1a6_PORT_A_address</A>, WB1_ram_block1a6_clock_0, , , );
<P><A NAME="WB1_ram_block1a6_PORT_B_address">WB1_ram_block1a6_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a6_PORT_B_address_reg">WB1_ram_block1a6_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a6_PORT_B_address">WB1_ram_block1a6_PORT_B_address</A>, WB1_ram_block1a6_clock_0, , , );
<P><A NAME="WB1_ram_block1a6_PORT_A_write_enable">WB1_ram_block1a6_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a6_PORT_A_write_enable_reg">WB1_ram_block1a6_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a6_PORT_A_write_enable">WB1_ram_block1a6_PORT_A_write_enable</A>, WB1_ram_block1a6_clock_0, , , );
<P><A NAME="WB1_ram_block1a6_PORT_B_read_enable">WB1_ram_block1a6_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a6_PORT_B_read_enable_reg">WB1_ram_block1a6_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a6_PORT_B_read_enable">WB1_ram_block1a6_PORT_B_read_enable</A>, WB1_ram_block1a6_clock_0, , , );
<P><A NAME="WB1_ram_block1a6_PORT_A_byte_mask">WB1_ram_block1a6_PORT_A_byte_mask</A> = <A HREF="#VB1_UUWS">VB1_UUWS</A>;
<P><A NAME="WB1_ram_block1a6_PORT_A_byte_mask_reg">WB1_ram_block1a6_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a6_PORT_A_byte_mask">WB1_ram_block1a6_PORT_A_byte_mask</A>, WB1_ram_block1a6_clock_0, , , );
<P><A NAME="WB1_ram_block1a6_clock_0">WB1_ram_block1a6_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a6_PORT_B_data_out">WB1_ram_block1a6_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a6_PORT_A_data_in_reg">WB1_ram_block1a6_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a6_PORT_A_address_reg">WB1_ram_block1a6_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a6_PORT_B_address_reg">WB1_ram_block1a6_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a6_PORT_A_write_enable_reg">WB1_ram_block1a6_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a6_PORT_B_read_enable_reg">WB1_ram_block1a6_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a6_PORT_A_byte_mask_reg">WB1_ram_block1a6_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a6_clock_0">WB1_ram_block1a6_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a6">WB1_ram_block1a6</A> = <A HREF="#WB1_ram_block1a6_PORT_B_data_out">WB1_ram_block1a6_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a22 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a22
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a22_PORT_A_data_in">WB1_ram_block1a22_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a22_PORT_A_data_in_reg">WB1_ram_block1a22_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a22_PORT_A_data_in">WB1_ram_block1a22_PORT_A_data_in</A>, WB1_ram_block1a22_clock_0, , , );
<P><A NAME="WB1_ram_block1a22_PORT_A_address">WB1_ram_block1a22_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a22_PORT_A_address_reg">WB1_ram_block1a22_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a22_PORT_A_address">WB1_ram_block1a22_PORT_A_address</A>, WB1_ram_block1a22_clock_0, , , );
<P><A NAME="WB1_ram_block1a22_PORT_B_address">WB1_ram_block1a22_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a22_PORT_B_address_reg">WB1_ram_block1a22_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a22_PORT_B_address">WB1_ram_block1a22_PORT_B_address</A>, WB1_ram_block1a22_clock_0, , , );
<P><A NAME="WB1_ram_block1a22_PORT_A_write_enable">WB1_ram_block1a22_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a22_PORT_A_write_enable_reg">WB1_ram_block1a22_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a22_PORT_A_write_enable">WB1_ram_block1a22_PORT_A_write_enable</A>, WB1_ram_block1a22_clock_0, , , );
<P><A NAME="WB1_ram_block1a22_PORT_B_read_enable">WB1_ram_block1a22_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a22_PORT_B_read_enable_reg">WB1_ram_block1a22_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a22_PORT_B_read_enable">WB1_ram_block1a22_PORT_B_read_enable</A>, WB1_ram_block1a22_clock_0, , , );
<P><A NAME="WB1_ram_block1a22_PORT_A_byte_mask">WB1_ram_block1a22_PORT_A_byte_mask</A> = <A HREF="#VB1_LMWS">VB1_LMWS</A>;
<P><A NAME="WB1_ram_block1a22_PORT_A_byte_mask_reg">WB1_ram_block1a22_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a22_PORT_A_byte_mask">WB1_ram_block1a22_PORT_A_byte_mask</A>, WB1_ram_block1a22_clock_0, , , );
<P><A NAME="WB1_ram_block1a22_clock_0">WB1_ram_block1a22_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a22_PORT_B_data_out">WB1_ram_block1a22_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a22_PORT_A_data_in_reg">WB1_ram_block1a22_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a22_PORT_A_address_reg">WB1_ram_block1a22_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a22_PORT_B_address_reg">WB1_ram_block1a22_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a22_PORT_A_write_enable_reg">WB1_ram_block1a22_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a22_PORT_B_read_enable_reg">WB1_ram_block1a22_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a22_PORT_A_byte_mask_reg">WB1_ram_block1a22_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a22_clock_0">WB1_ram_block1a22_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a22">WB1_ram_block1a22</A> = <A HREF="#WB1_ram_block1a22_PORT_B_data_out">WB1_ram_block1a22_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a14 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a14
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a14_PORT_A_data_in">WB1_ram_block1a14_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a14_PORT_A_data_in_reg">WB1_ram_block1a14_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a14_PORT_A_data_in">WB1_ram_block1a14_PORT_A_data_in</A>, WB1_ram_block1a14_clock_0, , , );
<P><A NAME="WB1_ram_block1a14_PORT_A_address">WB1_ram_block1a14_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a14_PORT_A_address_reg">WB1_ram_block1a14_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a14_PORT_A_address">WB1_ram_block1a14_PORT_A_address</A>, WB1_ram_block1a14_clock_0, , , );
<P><A NAME="WB1_ram_block1a14_PORT_B_address">WB1_ram_block1a14_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a14_PORT_B_address_reg">WB1_ram_block1a14_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a14_PORT_B_address">WB1_ram_block1a14_PORT_B_address</A>, WB1_ram_block1a14_clock_0, , , );
<P><A NAME="WB1_ram_block1a14_PORT_A_write_enable">WB1_ram_block1a14_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a14_PORT_A_write_enable_reg">WB1_ram_block1a14_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a14_PORT_A_write_enable">WB1_ram_block1a14_PORT_A_write_enable</A>, WB1_ram_block1a14_clock_0, , , );
<P><A NAME="WB1_ram_block1a14_PORT_B_read_enable">WB1_ram_block1a14_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a14_PORT_B_read_enable_reg">WB1_ram_block1a14_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a14_PORT_B_read_enable">WB1_ram_block1a14_PORT_B_read_enable</A>, WB1_ram_block1a14_clock_0, , , );
<P><A NAME="WB1_ram_block1a14_PORT_A_byte_mask">WB1_ram_block1a14_PORT_A_byte_mask</A> = <A HREF="#VB1_UMWS">VB1_UMWS</A>;
<P><A NAME="WB1_ram_block1a14_PORT_A_byte_mask_reg">WB1_ram_block1a14_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a14_PORT_A_byte_mask">WB1_ram_block1a14_PORT_A_byte_mask</A>, WB1_ram_block1a14_clock_0, , , );
<P><A NAME="WB1_ram_block1a14_clock_0">WB1_ram_block1a14_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a14_PORT_B_data_out">WB1_ram_block1a14_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a14_PORT_A_data_in_reg">WB1_ram_block1a14_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a14_PORT_A_address_reg">WB1_ram_block1a14_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a14_PORT_B_address_reg">WB1_ram_block1a14_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a14_PORT_A_write_enable_reg">WB1_ram_block1a14_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a14_PORT_B_read_enable_reg">WB1_ram_block1a14_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a14_PORT_A_byte_mask_reg">WB1_ram_block1a14_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a14_clock_0">WB1_ram_block1a14_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a14">WB1_ram_block1a14</A> = <A HREF="#WB1_ram_block1a14_PORT_B_data_out">WB1_ram_block1a14_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a30 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a30
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a30_PORT_A_data_in">WB1_ram_block1a30_PORT_A_data_in</A> = <A HREF="#H1L7">H1L7</A>;
<P><A NAME="WB1_ram_block1a30_PORT_A_data_in_reg">WB1_ram_block1a30_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a30_PORT_A_data_in">WB1_ram_block1a30_PORT_A_data_in</A>, WB1_ram_block1a30_clock_0, , , );
<P><A NAME="WB1_ram_block1a30_PORT_A_address">WB1_ram_block1a30_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a30_PORT_A_address_reg">WB1_ram_block1a30_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a30_PORT_A_address">WB1_ram_block1a30_PORT_A_address</A>, WB1_ram_block1a30_clock_0, , , );
<P><A NAME="WB1_ram_block1a30_PORT_B_address">WB1_ram_block1a30_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a30_PORT_B_address_reg">WB1_ram_block1a30_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a30_PORT_B_address">WB1_ram_block1a30_PORT_B_address</A>, WB1_ram_block1a30_clock_0, , , );
<P><A NAME="WB1_ram_block1a30_PORT_A_write_enable">WB1_ram_block1a30_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a30_PORT_A_write_enable_reg">WB1_ram_block1a30_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a30_PORT_A_write_enable">WB1_ram_block1a30_PORT_A_write_enable</A>, WB1_ram_block1a30_clock_0, , , );
<P><A NAME="WB1_ram_block1a30_PORT_B_read_enable">WB1_ram_block1a30_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a30_PORT_B_read_enable_reg">WB1_ram_block1a30_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a30_PORT_B_read_enable">WB1_ram_block1a30_PORT_B_read_enable</A>, WB1_ram_block1a30_clock_0, , , );
<P><A NAME="WB1_ram_block1a30_PORT_A_byte_mask">WB1_ram_block1a30_PORT_A_byte_mask</A> = <A HREF="#VB1_LLWS">VB1_LLWS</A>;
<P><A NAME="WB1_ram_block1a30_PORT_A_byte_mask_reg">WB1_ram_block1a30_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a30_PORT_A_byte_mask">WB1_ram_block1a30_PORT_A_byte_mask</A>, WB1_ram_block1a30_clock_0, , , );
<P><A NAME="WB1_ram_block1a30_clock_0">WB1_ram_block1a30_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a30_PORT_B_data_out">WB1_ram_block1a30_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a30_PORT_A_data_in_reg">WB1_ram_block1a30_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a30_PORT_A_address_reg">WB1_ram_block1a30_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a30_PORT_B_address_reg">WB1_ram_block1a30_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a30_PORT_A_write_enable_reg">WB1_ram_block1a30_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a30_PORT_B_read_enable_reg">WB1_ram_block1a30_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a30_PORT_A_byte_mask_reg">WB1_ram_block1a30_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a30_clock_0">WB1_ram_block1a30_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a30">WB1_ram_block1a30</A> = <A HREF="#WB1_ram_block1a30_PORT_B_data_out">WB1_ram_block1a30_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a7 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a7
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a7_PORT_A_data_in">WB1_ram_block1a7_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a7_PORT_A_data_in_reg">WB1_ram_block1a7_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a7_PORT_A_data_in">WB1_ram_block1a7_PORT_A_data_in</A>, WB1_ram_block1a7_clock_0, , , );
<P><A NAME="WB1_ram_block1a7_PORT_A_address">WB1_ram_block1a7_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a7_PORT_A_address_reg">WB1_ram_block1a7_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a7_PORT_A_address">WB1_ram_block1a7_PORT_A_address</A>, WB1_ram_block1a7_clock_0, , , );
<P><A NAME="WB1_ram_block1a7_PORT_B_address">WB1_ram_block1a7_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a7_PORT_B_address_reg">WB1_ram_block1a7_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a7_PORT_B_address">WB1_ram_block1a7_PORT_B_address</A>, WB1_ram_block1a7_clock_0, , , );
<P><A NAME="WB1_ram_block1a7_PORT_A_write_enable">WB1_ram_block1a7_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a7_PORT_A_write_enable_reg">WB1_ram_block1a7_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a7_PORT_A_write_enable">WB1_ram_block1a7_PORT_A_write_enable</A>, WB1_ram_block1a7_clock_0, , , );
<P><A NAME="WB1_ram_block1a7_PORT_B_read_enable">WB1_ram_block1a7_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a7_PORT_B_read_enable_reg">WB1_ram_block1a7_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a7_PORT_B_read_enable">WB1_ram_block1a7_PORT_B_read_enable</A>, WB1_ram_block1a7_clock_0, , , );
<P><A NAME="WB1_ram_block1a7_PORT_A_byte_mask">WB1_ram_block1a7_PORT_A_byte_mask</A> = <A HREF="#VB1_UUWS">VB1_UUWS</A>;
<P><A NAME="WB1_ram_block1a7_PORT_A_byte_mask_reg">WB1_ram_block1a7_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a7_PORT_A_byte_mask">WB1_ram_block1a7_PORT_A_byte_mask</A>, WB1_ram_block1a7_clock_0, , , );
<P><A NAME="WB1_ram_block1a7_clock_0">WB1_ram_block1a7_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a7_PORT_B_data_out">WB1_ram_block1a7_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a7_PORT_A_data_in_reg">WB1_ram_block1a7_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a7_PORT_A_address_reg">WB1_ram_block1a7_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a7_PORT_B_address_reg">WB1_ram_block1a7_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a7_PORT_A_write_enable_reg">WB1_ram_block1a7_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a7_PORT_B_read_enable_reg">WB1_ram_block1a7_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a7_PORT_A_byte_mask_reg">WB1_ram_block1a7_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a7_clock_0">WB1_ram_block1a7_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a7">WB1_ram_block1a7</A> = <A HREF="#WB1_ram_block1a7_PORT_B_data_out">WB1_ram_block1a7_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a23 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a23
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a23_PORT_A_data_in">WB1_ram_block1a23_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a23_PORT_A_data_in_reg">WB1_ram_block1a23_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a23_PORT_A_data_in">WB1_ram_block1a23_PORT_A_data_in</A>, WB1_ram_block1a23_clock_0, , , );
<P><A NAME="WB1_ram_block1a23_PORT_A_address">WB1_ram_block1a23_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a23_PORT_A_address_reg">WB1_ram_block1a23_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a23_PORT_A_address">WB1_ram_block1a23_PORT_A_address</A>, WB1_ram_block1a23_clock_0, , , );
<P><A NAME="WB1_ram_block1a23_PORT_B_address">WB1_ram_block1a23_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a23_PORT_B_address_reg">WB1_ram_block1a23_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a23_PORT_B_address">WB1_ram_block1a23_PORT_B_address</A>, WB1_ram_block1a23_clock_0, , , );
<P><A NAME="WB1_ram_block1a23_PORT_A_write_enable">WB1_ram_block1a23_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a23_PORT_A_write_enable_reg">WB1_ram_block1a23_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a23_PORT_A_write_enable">WB1_ram_block1a23_PORT_A_write_enable</A>, WB1_ram_block1a23_clock_0, , , );
<P><A NAME="WB1_ram_block1a23_PORT_B_read_enable">WB1_ram_block1a23_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a23_PORT_B_read_enable_reg">WB1_ram_block1a23_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a23_PORT_B_read_enable">WB1_ram_block1a23_PORT_B_read_enable</A>, WB1_ram_block1a23_clock_0, , , );
<P><A NAME="WB1_ram_block1a23_PORT_A_byte_mask">WB1_ram_block1a23_PORT_A_byte_mask</A> = <A HREF="#VB1_LMWS">VB1_LMWS</A>;
<P><A NAME="WB1_ram_block1a23_PORT_A_byte_mask_reg">WB1_ram_block1a23_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a23_PORT_A_byte_mask">WB1_ram_block1a23_PORT_A_byte_mask</A>, WB1_ram_block1a23_clock_0, , , );
<P><A NAME="WB1_ram_block1a23_clock_0">WB1_ram_block1a23_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a23_PORT_B_data_out">WB1_ram_block1a23_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a23_PORT_A_data_in_reg">WB1_ram_block1a23_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a23_PORT_A_address_reg">WB1_ram_block1a23_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a23_PORT_B_address_reg">WB1_ram_block1a23_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a23_PORT_A_write_enable_reg">WB1_ram_block1a23_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a23_PORT_B_read_enable_reg">WB1_ram_block1a23_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a23_PORT_A_byte_mask_reg">WB1_ram_block1a23_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a23_clock_0">WB1_ram_block1a23_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a23">WB1_ram_block1a23</A> = <A HREF="#WB1_ram_block1a23_PORT_B_data_out">WB1_ram_block1a23_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a15 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a15
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a15_PORT_A_data_in">WB1_ram_block1a15_PORT_A_data_in</A> = <A HREF="#A1L140">A1L140</A>;
<P><A NAME="WB1_ram_block1a15_PORT_A_data_in_reg">WB1_ram_block1a15_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a15_PORT_A_data_in">WB1_ram_block1a15_PORT_A_data_in</A>, WB1_ram_block1a15_clock_0, , , );
<P><A NAME="WB1_ram_block1a15_PORT_A_address">WB1_ram_block1a15_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a15_PORT_A_address_reg">WB1_ram_block1a15_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a15_PORT_A_address">WB1_ram_block1a15_PORT_A_address</A>, WB1_ram_block1a15_clock_0, , , );
<P><A NAME="WB1_ram_block1a15_PORT_B_address">WB1_ram_block1a15_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a15_PORT_B_address_reg">WB1_ram_block1a15_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a15_PORT_B_address">WB1_ram_block1a15_PORT_B_address</A>, WB1_ram_block1a15_clock_0, , , );
<P><A NAME="WB1_ram_block1a15_PORT_A_write_enable">WB1_ram_block1a15_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a15_PORT_A_write_enable_reg">WB1_ram_block1a15_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a15_PORT_A_write_enable">WB1_ram_block1a15_PORT_A_write_enable</A>, WB1_ram_block1a15_clock_0, , , );
<P><A NAME="WB1_ram_block1a15_PORT_B_read_enable">WB1_ram_block1a15_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a15_PORT_B_read_enable_reg">WB1_ram_block1a15_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a15_PORT_B_read_enable">WB1_ram_block1a15_PORT_B_read_enable</A>, WB1_ram_block1a15_clock_0, , , );
<P><A NAME="WB1_ram_block1a15_PORT_A_byte_mask">WB1_ram_block1a15_PORT_A_byte_mask</A> = <A HREF="#VB1_UMWS">VB1_UMWS</A>;
<P><A NAME="WB1_ram_block1a15_PORT_A_byte_mask_reg">WB1_ram_block1a15_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a15_PORT_A_byte_mask">WB1_ram_block1a15_PORT_A_byte_mask</A>, WB1_ram_block1a15_clock_0, , , );
<P><A NAME="WB1_ram_block1a15_clock_0">WB1_ram_block1a15_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a15_PORT_B_data_out">WB1_ram_block1a15_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a15_PORT_A_data_in_reg">WB1_ram_block1a15_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a15_PORT_A_address_reg">WB1_ram_block1a15_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a15_PORT_B_address_reg">WB1_ram_block1a15_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a15_PORT_A_write_enable_reg">WB1_ram_block1a15_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a15_PORT_B_read_enable_reg">WB1_ram_block1a15_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a15_PORT_A_byte_mask_reg">WB1_ram_block1a15_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a15_clock_0">WB1_ram_block1a15_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a15">WB1_ram_block1a15</A> = <A HREF="#WB1_ram_block1a15_PORT_B_data_out">WB1_ram_block1a15_PORT_B_data_out</A>[0];


<P> --WB1_ram_block1a31 is fifo:int_fifo|altsyncram:BUFFER_rtl_0|altsyncram_faj1:auto_generated|ram_block1a31
<P> --RAM Block Operation Mode: Simple Dual-Port
<P> --Port A Depth: 8, Port A Width: 1, Port B Depth: 8, Port B Width: 1
<P> --Port A Logical Depth: 8, Port A Logical Width: 32, Port B Logical Depth: 8, Port B Logical Width: 32
<P> --Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
<P><A NAME="WB1_ram_block1a31_PORT_A_data_in">WB1_ram_block1a31_PORT_A_data_in</A> = <A HREF="#H1L8">H1L8</A>;
<P><A NAME="WB1_ram_block1a31_PORT_A_data_in_reg">WB1_ram_block1a31_PORT_A_data_in_reg</A> = DFFE(<A HREF="#WB1_ram_block1a31_PORT_A_data_in">WB1_ram_block1a31_PORT_A_data_in</A>, WB1_ram_block1a31_clock_0, , , );
<P><A NAME="WB1_ram_block1a31_PORT_A_address">WB1_ram_block1a31_PORT_A_address</A> = BUS(<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A>, <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A>, <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a31_PORT_A_address_reg">WB1_ram_block1a31_PORT_A_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a31_PORT_A_address">WB1_ram_block1a31_PORT_A_address</A>, WB1_ram_block1a31_clock_0, , , );
<P><A NAME="WB1_ram_block1a31_PORT_B_address">WB1_ram_block1a31_PORT_B_address</A> = BUS(<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A>, <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A>, <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A>);
<P><A NAME="WB1_ram_block1a31_PORT_B_address_reg">WB1_ram_block1a31_PORT_B_address_reg</A> = DFFE(<A HREF="#WB1_ram_block1a31_PORT_B_address">WB1_ram_block1a31_PORT_B_address</A>, WB1_ram_block1a31_clock_0, , , );
<P><A NAME="WB1_ram_block1a31_PORT_A_write_enable">WB1_ram_block1a31_PORT_A_write_enable</A> = <A HREF="#D1L1">D1L1</A>;
<P><A NAME="WB1_ram_block1a31_PORT_A_write_enable_reg">WB1_ram_block1a31_PORT_A_write_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a31_PORT_A_write_enable">WB1_ram_block1a31_PORT_A_write_enable</A>, WB1_ram_block1a31_clock_0, , , );
<P><A NAME="WB1_ram_block1a31_PORT_B_read_enable">WB1_ram_block1a31_PORT_B_read_enable</A> = VCC;
<P><A NAME="WB1_ram_block1a31_PORT_B_read_enable_reg">WB1_ram_block1a31_PORT_B_read_enable_reg</A> = DFFE(<A HREF="#WB1_ram_block1a31_PORT_B_read_enable">WB1_ram_block1a31_PORT_B_read_enable</A>, WB1_ram_block1a31_clock_0, , , );
<P><A NAME="WB1_ram_block1a31_PORT_A_byte_mask">WB1_ram_block1a31_PORT_A_byte_mask</A> = <A HREF="#VB1_LLWS">VB1_LLWS</A>;
<P><A NAME="WB1_ram_block1a31_PORT_A_byte_mask_reg">WB1_ram_block1a31_PORT_A_byte_mask_reg</A> = DFFE(<A HREF="#WB1_ram_block1a31_PORT_A_byte_mask">WB1_ram_block1a31_PORT_A_byte_mask</A>, WB1_ram_block1a31_clock_0, , , );
<P><A NAME="WB1_ram_block1a31_clock_0">WB1_ram_block1a31_clock_0</A> = <A HREF="#SCLK">SCLK</A>;
<P><A NAME="WB1_ram_block1a31_PORT_B_data_out">WB1_ram_block1a31_PORT_B_data_out</A> = MEMORY(<A HREF="#WB1_ram_block1a31_PORT_A_data_in_reg">WB1_ram_block1a31_PORT_A_data_in_reg</A>, , <A HREF="#WB1_ram_block1a31_PORT_A_address_reg">WB1_ram_block1a31_PORT_A_address_reg</A>, <A HREF="#WB1_ram_block1a31_PORT_B_address_reg">WB1_ram_block1a31_PORT_B_address_reg</A>, <A HREF="#WB1_ram_block1a31_PORT_A_write_enable_reg">WB1_ram_block1a31_PORT_A_write_enable_reg</A>, <A HREF="#WB1_ram_block1a31_PORT_B_read_enable_reg">WB1_ram_block1a31_PORT_B_read_enable_reg</A>, <A HREF="#WB1_ram_block1a31_PORT_A_byte_mask_reg">WB1_ram_block1a31_PORT_A_byte_mask_reg</A>, , <A HREF="#WB1_ram_block1a31_clock_0">WB1_ram_block1a31_clock_0</A>, , , , , );
<P><A NAME="WB1_ram_block1a31">WB1_ram_block1a31</A> = <A HREF="#WB1_ram_block1a31_PORT_B_data_out">WB1_ram_block1a31_PORT_B_data_out</A>[0];


<P> --INT is INT
<P><A NAME="INT">INT</A> = OUTPUT(<A HREF="#RC1_INT">RC1_INT</A>);


<P> --_SIZ1 is _SIZ1
<P><A NAME="_SIZ1">_SIZ1</A> = OUTPUT(<A HREF="#A1L138">A1L138</A>);


<P> --DSACK_O[0] is DSACK_O[0]
<P><A NAME="DSACK_O[0]">DSACK_O[0]</A> = OUTPUT(<A HREF="#A1L70">A1L70</A>);


<P> --DSACK_O[1] is DSACK_O[1]
<P><A NAME="DSACK_O[1]">DSACK_O[1]</A> = OUTPUT(<A HREF="#A1L70">A1L70</A>);


<P> --BR is BR
<P><A NAME="BR">BR</A> = OUTPUT(<A HREF="#E1_BREQ">E1_BREQ</A>);


<P> --_DMAEN is _DMAEN
<P><A NAME="_DMAEN">_DMAEN</A> = OUTPUT(<A HREF="#E1L2">E1L2</A>);


<P> --_DACK is _DACK
<P><A NAME="_DACK">_DACK</A> = OUTPUT(<A HREF="#G1L7">G1L7</A>);


<P> --_CSS is _CSS
<P><A NAME="_CSS">_CSS</A> = OUTPUT(<A HREF="#G1L23">G1L23</A>);


<P> --_IOR is _IOR
<P><A NAME="_IOR">_IOR</A> = OUTPUT(<A HREF="#A1L127">A1L127</A>);


<P> --_IOW is _IOW
<P><A NAME="_IOW">_IOW</A> = OUTPUT(<A HREF="#A1L130">A1L130</A>);


<P> --_LED_RD is _LED_RD
<P><A NAME="_LED_RD">_LED_RD</A> = OUTPUT(<A HREF="#A1L133">A1L133</A>);


<P> --_LED_WR is _LED_WR
<P><A NAME="_LED_WR">_LED_WR</A> = OUTPUT(<A HREF="#A1L135">A1L135</A>);


<P> --_LED_DMA is _LED_DMA
<P><A NAME="_LED_DMA">_LED_DMA</A> = OUTPUT(<A HREF="#E1L2">E1L2</A>);


<P> --OWN is OWN
<P><A NAME="OWN">OWN</A> = OUTPUT(<A HREF="#E1L2">E1L2</A>);


<P> --DATA_OE_ is DATA_OE_
<P><A NAME="DATA_OE_">DATA_OE_</A> = OUTPUT(<A HREF="#A1L61">A1L61</A>);


<P> --PDATA_OE_ is PDATA_OE_
<P><A NAME="PDATA_OE_">PDATA_OE_</A> = OUTPUT(<A HREF="#A1L84">A1L84</A>);


<P> --R_W_IO is R_W_IO
<P><A NAME="R_W_IO">R_W_IO</A> = BIDIR(<A HREF="#R_W_IO">R_W_IO</A>);


<P> --_AS_IO is _AS_IO
<P><A NAME="_AS_IO">_AS_IO</A> = BIDIR(<A HREF="#_AS_IO">_AS_IO</A>);


<P> --_DS_IO is _DS_IO
<P><A NAME="_DS_IO">_DS_IO</A> = BIDIR(<A HREF="#_DS_IO">_DS_IO</A>);


<P> --DATA_IO[0] is DATA_IO[0]
<P><A NAME="DATA_IO[0]">DATA_IO[0]</A> = BIDIR(<A HREF="#DATA_IO[0]">DATA_IO[0]</A>);


<P> --DATA_IO[1] is DATA_IO[1]
<P><A NAME="DATA_IO[1]">DATA_IO[1]</A> = BIDIR(<A HREF="#DATA_IO[1]">DATA_IO[1]</A>);


<P> --DATA_IO[2] is DATA_IO[2]
<P><A NAME="DATA_IO[2]">DATA_IO[2]</A> = BIDIR(<A HREF="#DATA_IO[2]">DATA_IO[2]</A>);


<P> --DATA_IO[3] is DATA_IO[3]
<P><A NAME="DATA_IO[3]">DATA_IO[3]</A> = BIDIR(<A HREF="#DATA_IO[3]">DATA_IO[3]</A>);


<P> --DATA_IO[4] is DATA_IO[4]
<P><A NAME="DATA_IO[4]">DATA_IO[4]</A> = BIDIR(<A HREF="#DATA_IO[4]">DATA_IO[4]</A>);


<P> --DATA_IO[5] is DATA_IO[5]
<P><A NAME="DATA_IO[5]">DATA_IO[5]</A> = BIDIR(<A HREF="#DATA_IO[5]">DATA_IO[5]</A>);


<P> --DATA_IO[6] is DATA_IO[6]
<P><A NAME="DATA_IO[6]">DATA_IO[6]</A> = BIDIR(<A HREF="#DATA_IO[6]">DATA_IO[6]</A>);


<P> --DATA_IO[7] is DATA_IO[7]
<P><A NAME="DATA_IO[7]">DATA_IO[7]</A> = BIDIR(<A HREF="#DATA_IO[7]">DATA_IO[7]</A>);


<P> --DATA_IO[8] is DATA_IO[8]
<P><A NAME="DATA_IO[8]">DATA_IO[8]</A> = BIDIR(<A HREF="#DATA_IO[8]">DATA_IO[8]</A>);


<P> --DATA_IO[9] is DATA_IO[9]
<P><A NAME="DATA_IO[9]">DATA_IO[9]</A> = BIDIR(<A HREF="#DATA_IO[9]">DATA_IO[9]</A>);


<P> --DATA_IO[10] is DATA_IO[10]
<P><A NAME="DATA_IO[10]">DATA_IO[10]</A> = BIDIR(<A HREF="#DATA_IO[10]">DATA_IO[10]</A>);


<P> --DATA_IO[11] is DATA_IO[11]
<P><A NAME="DATA_IO[11]">DATA_IO[11]</A> = BIDIR(<A HREF="#DATA_IO[11]">DATA_IO[11]</A>);


<P> --DATA_IO[12] is DATA_IO[12]
<P><A NAME="DATA_IO[12]">DATA_IO[12]</A> = BIDIR(<A HREF="#DATA_IO[12]">DATA_IO[12]</A>);


<P> --DATA_IO[13] is DATA_IO[13]
<P><A NAME="DATA_IO[13]">DATA_IO[13]</A> = BIDIR(<A HREF="#DATA_IO[13]">DATA_IO[13]</A>);


<P> --DATA_IO[14] is DATA_IO[14]
<P><A NAME="DATA_IO[14]">DATA_IO[14]</A> = BIDIR(<A HREF="#DATA_IO[14]">DATA_IO[14]</A>);


<P> --DATA_IO[15] is DATA_IO[15]
<P><A NAME="DATA_IO[15]">DATA_IO[15]</A> = BIDIR(<A HREF="#DATA_IO[15]">DATA_IO[15]</A>);


<P> --DATA_IO[16] is DATA_IO[16]
<P><A NAME="DATA_IO[16]">DATA_IO[16]</A> = BIDIR(<A HREF="#DATA_IO[16]">DATA_IO[16]</A>);


<P> --DATA_IO[17] is DATA_IO[17]
<P><A NAME="DATA_IO[17]">DATA_IO[17]</A> = BIDIR(<A HREF="#DATA_IO[17]">DATA_IO[17]</A>);


<P> --DATA_IO[18] is DATA_IO[18]
<P><A NAME="DATA_IO[18]">DATA_IO[18]</A> = BIDIR(<A HREF="#DATA_IO[18]">DATA_IO[18]</A>);


<P> --DATA_IO[19] is DATA_IO[19]
<P><A NAME="DATA_IO[19]">DATA_IO[19]</A> = BIDIR(<A HREF="#DATA_IO[19]">DATA_IO[19]</A>);


<P> --DATA_IO[20] is DATA_IO[20]
<P><A NAME="DATA_IO[20]">DATA_IO[20]</A> = BIDIR(<A HREF="#DATA_IO[20]">DATA_IO[20]</A>);


<P> --DATA_IO[21] is DATA_IO[21]
<P><A NAME="DATA_IO[21]">DATA_IO[21]</A> = BIDIR(<A HREF="#DATA_IO[21]">DATA_IO[21]</A>);


<P> --DATA_IO[22] is DATA_IO[22]
<P><A NAME="DATA_IO[22]">DATA_IO[22]</A> = BIDIR(<A HREF="#DATA_IO[22]">DATA_IO[22]</A>);


<P> --DATA_IO[23] is DATA_IO[23]
<P><A NAME="DATA_IO[23]">DATA_IO[23]</A> = BIDIR(<A HREF="#DATA_IO[23]">DATA_IO[23]</A>);


<P> --DATA_IO[24] is DATA_IO[24]
<P><A NAME="DATA_IO[24]">DATA_IO[24]</A> = BIDIR(<A HREF="#DATA_IO[24]">DATA_IO[24]</A>);


<P> --DATA_IO[25] is DATA_IO[25]
<P><A NAME="DATA_IO[25]">DATA_IO[25]</A> = BIDIR(<A HREF="#DATA_IO[25]">DATA_IO[25]</A>);


<P> --DATA_IO[26] is DATA_IO[26]
<P><A NAME="DATA_IO[26]">DATA_IO[26]</A> = BIDIR(<A HREF="#DATA_IO[26]">DATA_IO[26]</A>);


<P> --DATA_IO[27] is DATA_IO[27]
<P><A NAME="DATA_IO[27]">DATA_IO[27]</A> = BIDIR(<A HREF="#DATA_IO[27]">DATA_IO[27]</A>);


<P> --DATA_IO[28] is DATA_IO[28]
<P><A NAME="DATA_IO[28]">DATA_IO[28]</A> = BIDIR(<A HREF="#DATA_IO[28]">DATA_IO[28]</A>);


<P> --DATA_IO[29] is DATA_IO[29]
<P><A NAME="DATA_IO[29]">DATA_IO[29]</A> = BIDIR(<A HREF="#DATA_IO[29]">DATA_IO[29]</A>);


<P> --DATA_IO[30] is DATA_IO[30]
<P><A NAME="DATA_IO[30]">DATA_IO[30]</A> = BIDIR(<A HREF="#DATA_IO[30]">DATA_IO[30]</A>);


<P> --DATA_IO[31] is DATA_IO[31]
<P><A NAME="DATA_IO[31]">DATA_IO[31]</A> = BIDIR(<A HREF="#DATA_IO[31]">DATA_IO[31]</A>);


<P> --_BGACK_IO is _BGACK_IO
<P><A NAME="_BGACK_IO">_BGACK_IO</A> = BIDIR(<A HREF="#_BGACK_IO">_BGACK_IO</A>);


<P> --PD_PORT[0] is PD_PORT[0]
<P><A NAME="PD_PORT[0]">PD_PORT[0]</A> = BIDIR(<A HREF="#PD_PORT[0]">PD_PORT[0]</A>);


<P> --PD_PORT[1] is PD_PORT[1]
<P><A NAME="PD_PORT[1]">PD_PORT[1]</A> = BIDIR(<A HREF="#PD_PORT[1]">PD_PORT[1]</A>);


<P> --PD_PORT[2] is PD_PORT[2]
<P><A NAME="PD_PORT[2]">PD_PORT[2]</A> = BIDIR(<A HREF="#PD_PORT[2]">PD_PORT[2]</A>);


<P> --PD_PORT[3] is PD_PORT[3]
<P><A NAME="PD_PORT[3]">PD_PORT[3]</A> = BIDIR(<A HREF="#PD_PORT[3]">PD_PORT[3]</A>);


<P> --PD_PORT[4] is PD_PORT[4]
<P><A NAME="PD_PORT[4]">PD_PORT[4]</A> = BIDIR(<A HREF="#PD_PORT[4]">PD_PORT[4]</A>);


<P> --PD_PORT[5] is PD_PORT[5]
<P><A NAME="PD_PORT[5]">PD_PORT[5]</A> = BIDIR(<A HREF="#PD_PORT[5]">PD_PORT[5]</A>);


<P> --PD_PORT[6] is PD_PORT[6]
<P><A NAME="PD_PORT[6]">PD_PORT[6]</A> = BIDIR(<A HREF="#PD_PORT[6]">PD_PORT[6]</A>);


<P> --PD_PORT[7] is PD_PORT[7]
<P><A NAME="PD_PORT[7]">PD_PORT[7]</A> = BIDIR(<A HREF="#PD_PORT[7]">PD_PORT[7]</A>);


<P> --PD_PORT[8] is PD_PORT[8]
<P><A NAME="PD_PORT[8]">PD_PORT[8]</A> = BIDIR(<A HREF="#PD_PORT[8]">PD_PORT[8]</A>);


<P> --PD_PORT[9] is PD_PORT[9]
<P><A NAME="PD_PORT[9]">PD_PORT[9]</A> = BIDIR(<A HREF="#PD_PORT[9]">PD_PORT[9]</A>);


<P> --PD_PORT[10] is PD_PORT[10]
<P><A NAME="PD_PORT[10]">PD_PORT[10]</A> = BIDIR(<A HREF="#PD_PORT[10]">PD_PORT[10]</A>);


<P> --PD_PORT[11] is PD_PORT[11]
<P><A NAME="PD_PORT[11]">PD_PORT[11]</A> = BIDIR(<A HREF="#PD_PORT[11]">PD_PORT[11]</A>);


<P> --PD_PORT[12] is PD_PORT[12]
<P><A NAME="PD_PORT[12]">PD_PORT[12]</A> = BIDIR(<A HREF="#PD_PORT[12]">PD_PORT[12]</A>);


<P> --PD_PORT[13] is PD_PORT[13]
<P><A NAME="PD_PORT[13]">PD_PORT[13]</A> = BIDIR(<A HREF="#PD_PORT[13]">PD_PORT[13]</A>);


<P> --PD_PORT[14] is PD_PORT[14]
<P><A NAME="PD_PORT[14]">PD_PORT[14]</A> = BIDIR(<A HREF="#PD_PORT[14]">PD_PORT[14]</A>);


<P> --PD_PORT[15] is PD_PORT[15]
<P><A NAME="PD_PORT[15]">PD_PORT[15]</A> = BIDIR(<A HREF="#PD_PORT[15]">PD_PORT[15]</A>);


<P> --INTA is INTA
<P><A NAME="INTA">INTA</A> = INPUT();


<P> --QC1_CNTR_O[2] is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[2]
<P><A NAME="QC1_CNTR_O[2]">QC1_CNTR_O[2]</A> = DFFEAS(<A HREF="#QC1L5">QC1L5</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  ,  ,  ,  ,  ,  );


<P> --RC1_INT is registers:u_registers|registers_istr:u_registers_istr|INT
<P><A NAME="RC1_INT">RC1_INT</A> = (<A HREF="#INTA">INTA</A> & <A HREF="#QC1_CNTR_O[2]">QC1_CNTR_O[2]</A>);


<P> --E1_BGACK is CPU_SM:u_CPU_SM|BGACK
<P><A NAME="E1_BGACK">E1_BGACK</A> = DFFEAS(<A HREF="#ZB1L3">ZB1L3</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_SIZE1 is CPU_SM:u_CPU_SM|SIZE1
<P><A NAME="E1_SIZE1">E1_SIZE1</A> = DFFEAS(<A HREF="#ZB1L73">ZB1L73</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --A1L138 is _SIZ1~0
<P><A NAME="A1L138">A1L138</A> = (<A HREF="#E1_BGACK">E1_BGACK</A> & <A HREF="#E1_SIZE1">E1_SIZE1</A>);


<P> --SC1_REG_DSK_ is registers:u_registers|registers_term:u_registers_term|REG_DSK_
<P><A NAME="SC1_REG_DSK_">SC1_REG_DSK_</A> = DFFEAS(<A HREF="#SC1L4">SC1L4</A>, <A HREF="#GC1__clk0">GC1__clk0</A>, !<A HREF="#A1L114">A1L114</A>,  ,  ,  ,  ,  ,  );


<P> --G1_nLS2CPU is SCSI_SM:u_SCSI_SM|nLS2CPU
<P><A NAME="G1_nLS2CPU">G1_nLS2CPU</A> = DFFEAS(<A HREF="#G1L26">G1L26</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, !<A HREF="#A1L114">A1L114</A>,  ,  ,  ,  ,  ,  );


<P> --A1L69 is DSACK_O~0
<P><A NAME="A1L69">A1L69</A> = (!<A HREF="#SC1_REG_DSK_">SC1_REG_DSK_</A> & !<A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>);


<P> --E1_BREQ is CPU_SM:u_CPU_SM|BREQ
<P><A NAME="E1_BREQ">E1_BREQ</A> = DFFEAS(<A HREF="#ZB1L75">ZB1L75</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_DACK_o is SCSI_SM:u_SCSI_SM|DACK_o
<P><A NAME="G1_DACK_o">G1_DACK_o</A> = DFFEAS(<A HREF="#HC1L5">HC1L5</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_SCSI_CS_o is SCSI_SM:u_SCSI_SM|SCSI_CS_o
<P><A NAME="G1_SCSI_CS_o">G1_SCSI_CS_o</A> = DFFEAS(<A HREF="#HC1_WideOr30">HC1_WideOr30</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --QC1_CNTR_O[4] is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[4]
<P><A NAME="QC1_CNTR_O[4]">QC1_CNTR_O[4]</A> = DFFEAS(<A HREF="#QC1L7">QC1L7</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  ,  ,  ,  ,  ,  );


<P> --G1_RE_o is SCSI_SM:u_SCSI_SM|RE_o
<P><A NAME="G1_RE_o">G1_RE_o</A> = DFFEAS(<A HREF="#HC1L19">HC1L19</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --A1L126 is _IOR~0
<P><A NAME="A1L126">A1L126</A> = (<A HREF="#QC1_CNTR_O[4]">QC1_CNTR_O[4]</A>) # (<A HREF="#G1_RE_o">G1_RE_o</A>);


<P> --G1_WE_o is SCSI_SM:u_SCSI_SM|WE_o
<P><A NAME="G1_WE_o">G1_WE_o</A> = DFFEAS(<A HREF="#HC1L17">HC1L17</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --A1L129 is _IOW~0
<P><A NAME="A1L129">A1L129</A> = (<A HREF="#QC1_CNTR_O[4]">QC1_CNTR_O[4]</A>) # (<A HREF="#G1_WE_o">G1_WE_o</A>);


<P> --_CS is _CS
<P><A NAME="_CS">_CS</A> = INPUT();


<P> --QC1L9 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~0
<P><A NAME="QC1L9">QC1L9</A> = (!<A HREF="#_CS">_CS</A> & !<A HREF="#A1L114">A1L114</A>);


<P> --QC1_CNTR_O[1] is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[1]
<P><A NAME="QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> = DFFEAS(<A HREF="#QC1L3">QC1L3</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  ,  ,  ,  ,  ,  );


<P> --A1L133 is _LED_RD~0
<P><A NAME="A1L133">A1L133</A> = (<A HREF="#E1_BGACK">E1_BGACK</A> & (((!<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A>)))) # (!<A HREF="#E1_BGACK">E1_BGACK</A> & (((!<A HREF="#QC1L9">QC1L9</A>)) # (!<A HREF="#A1L111">A1L111</A>)));


<P> --A1L135 is _LED_WR~0
<P><A NAME="A1L135">A1L135</A> = (<A HREF="#E1_BGACK">E1_BGACK</A> & (<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A>)) # (!<A HREF="#E1_BGACK">E1_BGACK</A> & (((<A HREF="#A1L111">A1L111</A>) # (!<A HREF="#QC1L9">QC1L9</A>))));


<P> --ADDR[3] is ADDR[3]
<P><A NAME="ADDR[3]">ADDR[3]</A> = INPUT();


<P> --ADDR[6] is ADDR[6]
<P><A NAME="ADDR[6]">ADDR[6]</A> = INPUT();


<P> --QC1L10 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~1
<P><A NAME="QC1L10">QC1L10</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (!<A HREF="#_CS">_CS</A> & (!<A HREF="#A1L114">A1L114</A> & !<A HREF="#ADDR[6]">ADDR[6]</A>)));


<P> --ADDR[2] is ADDR[2]
<P><A NAME="ADDR[2]">ADDR[2]</A> = INPUT();


<P> --ADDR[5] is ADDR[5]
<P><A NAME="ADDR[5]">ADDR[5]</A> = INPUT();


<P> --ADDR[4] is ADDR[4]
<P><A NAME="ADDR[4]">ADDR[4]</A> = INPUT();


<P> --PC1_h_0C is registers:u_registers|addr_decoder:u_addr_decoder|h_0C
<P><A NAME="PC1_h_0C">PC1_h_0C</A> = (<A HREF="#QC1L10">QC1L10</A> & (<A HREF="#ADDR[2]">ADDR[2]</A> & (!<A HREF="#ADDR[5]">ADDR[5]</A> & !<A HREF="#ADDR[4]">ADDR[4]</A>)));


<P> --A1L61 is DATA_OE_~0
<P><A NAME="A1L61">A1L61</A> = (<A HREF="#A1L118">A1L118</A> & ((<A HREF="#_CS">_CS</A>) # ((<A HREF="#A1L114">A1L114</A>) # (<A HREF="#PC1_h_0C">PC1_h_0C</A>))));


<P> --A1L83 is PDATA_OE_~0
<P><A NAME="A1L83">A1L83</A> = (<A HREF="#G1_DACK_o">G1_DACK_o</A>) # (<A HREF="#G1_SCSI_CS_o">G1_SCSI_CS_o</A>);


<P> --PC1L2 is registers:u_registers|addr_decoder:u_addr_decoder|CONTR_RD_~0
<P><A NAME="PC1L2">PC1L2</A> = (!<A HREF="#ADDR[2]">ADDR[2]</A> & !<A HREF="#ADDR[4]">ADDR[4]</A>);


<P> --PC1L4 is registers:u_registers|addr_decoder:u_addr_decoder|CONTR_WR~0
<P><A NAME="PC1L4">PC1L4</A> = (<A HREF="#QC1L10">QC1L10</A> & (<A HREF="#PC1L2">PC1L2</A> & (!<A HREF="#A1L111">A1L111</A> & !<A HREF="#ADDR[5]">ADDR[5]</A>)));


<P> --QC1L5 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[2]~2
<P><A NAME="QC1L5">QC1L5</A> = (<A HREF="#PC1L4">PC1L4</A> & (<A HREF="#A1L16">A1L16</A>)) # (!<A HREF="#PC1L4">PC1L4</A> & ((<A HREF="#QC1_CNTR_O[2]">QC1_CNTR_O[2]</A>)));


<P> --_RST is _RST
<P><A NAME="_RST">_RST</A> = INPUT();


<P> --E1_STATE[0] is CPU_SM:u_CPU_SM|STATE[0]
<P><A NAME="E1_STATE[0]">E1_STATE[0]</A> = DFFEAS(<A HREF="#AC1L7">AC1L7</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_STATE[1] is CPU_SM:u_CPU_SM|STATE[1]
<P><A NAME="E1_STATE[1]">E1_STATE[1]</A> = DFFEAS(<A HREF="#BC1L10">BC1L10</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_STATE[3] is CPU_SM:u_CPU_SM|STATE[3]
<P><A NAME="E1_STATE[3]">E1_STATE[3]</A> = DFFEAS(<A HREF="#DC1L13">DC1L13</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_STATE[2] is CPU_SM:u_CPU_SM|STATE[2]
<P><A NAME="E1_STATE[2]">E1_STATE[2]</A> = DFFEAS(<A HREF="#CC1L10">CC1L10</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_BGRANT_ is CPU_SM:u_CPU_SM|BGRANT_
<P><A NAME="E1_BGRANT_">E1_BGRANT_</A> = DFFEAS(<A HREF="#E1L4">E1L4</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_nCYCLEDONE is CPU_SM:u_CPU_SM|nCYCLEDONE
<P><A NAME="E1_nCYCLEDONE">E1_nCYCLEDONE</A> = DFFEAS(<A HREF="#E1L38">E1L38</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_STATE[4] is CPU_SM:u_CPU_SM|STATE[4]
<P><A NAME="E1_STATE[4]">E1_STATE[4]</A> = DFFEAS(<A HREF="#EC1L12">EC1L12</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --ZB1L1 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BGACK_d~0
<P><A NAME="ZB1L1">ZB1L1</A> = (<A HREF="#E1_STATE[4]">E1_STATE[4]</A>) # ((!<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#E1_BGRANT_">E1_BGRANT_</A> & <A HREF="#E1_nCYCLEDONE">E1_nCYCLEDONE</A>)));


<P> --ZB1L2 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BGACK_d~1
<P><A NAME="ZB1L2">ZB1L2</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & ((<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & ((!<A HREF="#ZB1L1">ZB1L1</A>) # (!<A HREF="#E1_STATE[2]">E1_STATE[2]</A>))) # (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & ((<A HREF="#E1_STATE[2]">E1_STATE[2]</A>) # (<A HREF="#ZB1L1">ZB1L1</A>))))) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & ((<A HREF="#E1_STATE[2]">E1_STATE[2]</A>) # ((<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & <A HREF="#ZB1L1">ZB1L1</A>))));


<P> --ZB1L3 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BGACK_d~2
<P><A NAME="ZB1L3">ZB1L3</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A>) # (<A HREF="#ZB1L2">ZB1L2</A>);


<P> --E1_CCRESET_ is CPU_SM:u_CPU_SM|CCRESET_
<P><A NAME="E1_CCRESET_">E1_CCRESET_</A> = DFFEAS(<A HREF="#_RST">_RST</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --ZB1L65 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_Y~0
<P><A NAME="ZB1L65">ZB1L65</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> $ (<A HREF="#E1_STATE[4]">E1_STATE[4]</A>))));


<P> --_STERM is _STERM
<P><A NAME="_STERM">_STERM</A> = INPUT();


<P> --ZB1L13 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~0
<P><A NAME="ZB1L13">ZB1L13</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & !<A HREF="#E1_STATE[3]">E1_STATE[3]</A>);


<P> --ZB1L14 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~1
<P><A NAME="ZB1L14">ZB1L14</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & (<A HREF="#ZB1L13">ZB1L13</A> & !<A HREF="#E1_STATE[2]">E1_STATE[2]</A>)));


<P> --ZB1L66 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~0
<P><A NAME="ZB1L66">ZB1L66</A> = (<A HREF="#_STERM">_STERM</A> & (((!<A HREF="#ZB1L14">ZB1L14</A>)))) # (!<A HREF="#_STERM">_STERM</A> & ((<A HREF="#E1_STATE[3]">E1_STATE[3]</A>) # ((!<A HREF="#ZB1L65">ZB1L65</A>))));


<P> --E1_DSACK_LATCHED_[0] is CPU_SM:u_CPU_SM|DSACK_LATCHED_[0]
<P><A NAME="E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A> = DFFEAS(<A HREF="#A1L71">A1L71</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, !<A HREF="#A1L114">A1L114</A>,  ,  ,  ,  ,  ,  );


<P> --E1_DSACK_LATCHED_[1] is CPU_SM:u_CPU_SM|DSACK_LATCHED_[1]
<P><A NAME="E1_DSACK_LATCHED_[1]">E1_DSACK_LATCHED_[1]</A> = DFFEAS(<A HREF="#A1L72">A1L72</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, !<A HREF="#A1L114">A1L114</A>,  ,  ,  ,  ,  ,  );


<P> --DSACK_I_[1] is DSACK_I_[1]
<P><A NAME="DSACK_I_[1]">DSACK_I_[1]</A> = INPUT();


<P> --_BERR is _BERR
<P><A NAME="_BERR">_BERR</A> = INPUT();


<P> --EC1L1 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~0
<P><A NAME="EC1L1">EC1L1</A> = (<A HREF="#E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A> & (((!<A HREF="#_BERR">_BERR</A>) # (!<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A>)))) # (!<A HREF="#E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A> & (<A HREF="#E1_DSACK_LATCHED_[1]">E1_DSACK_LATCHED_[1]</A> & ((!<A HREF="#_BERR">_BERR</A>) # (!<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A>))));


<P> --DSACK_I_[0] is DSACK_I_[0]
<P><A NAME="DSACK_I_[0]">DSACK_I_[0]</A> = INPUT();


<P> --A1L71 is DSK0_IN_~0
<P><A NAME="A1L71">A1L71</A> = (!<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>) # (!<A HREF="#_BERR">_BERR</A>);


<P> --YB1L13 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[51]~0
<P><A NAME="YB1L13">YB1L13</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --ZB1L67 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~1
<P><A NAME="ZB1L67">ZB1L67</A> = ((<A HREF="#_STERM">_STERM</A> & ((<A HREF="#A1L71">A1L71</A>) # (!<A HREF="#EC1L1">EC1L1</A>)))) # (!<A HREF="#YB1L13">YB1L13</A>);


<P> --E1_nDSACK is CPU_SM:u_CPU_SM|nDSACK
<P><A NAME="E1_nDSACK">E1_nDSACK</A> = (!<A HREF="#E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A> & !<A HREF="#E1_DSACK_LATCHED_[1]">E1_DSACK_LATCHED_[1]</A>);


<P> --ZB1L15 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~2
<P><A NAME="ZB1L15">ZB1L15</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (!<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --ZB1L68 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~2
<P><A NAME="ZB1L68">ZB1L68</A> = (((<A HREF="#_STERM">_STERM</A> & !<A HREF="#E1_nDSACK">E1_nDSACK</A>)) # (!<A HREF="#ZB1L15">ZB1L15</A>)) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A>);


<P> --YB1L14 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[51]~1
<P><A NAME="YB1L14">YB1L14</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>));


<P> --ZB1L69 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~3
<P><A NAME="ZB1L69">ZB1L69</A> = ((!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & !<A HREF="#E1_STATE[3]">E1_STATE[3]</A>)) # (!<A HREF="#_STERM">_STERM</A>);


<P> --ZB1L70 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~4
<P><A NAME="ZB1L70">ZB1L70</A> = ((<A HREF="#E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A>) # ((<A HREF="#E1_DSACK_LATCHED_[1]">E1_DSACK_LATCHED_[1]</A>) # (<A HREF="#ZB1L69">ZB1L69</A>))) # (!<A HREF="#YB1L14">YB1L14</A>);


<P> --ZB1L16 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~3
<P><A NAME="ZB1L16">ZB1L16</A> = (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & !<A HREF="#E1_STATE[1]">E1_STATE[1]</A>);


<P> --ZB1L17 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~4
<P><A NAME="ZB1L17">ZB1L17</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#ZB1L16">ZB1L16</A> & (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & !<A HREF="#E1_STATE[2]">E1_STATE[2]</A>)));


<P> --YB1L9 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[46]~2
<P><A NAME="YB1L9">YB1L9</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & !<A HREF="#E1_STATE[1]">E1_STATE[1]</A>)));


<P> --ZB1L71 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~5
<P><A NAME="ZB1L71">ZB1L71</A> = (<A HREF="#ZB1L70">ZB1L70</A> & (!<A HREF="#ZB1L17">ZB1L17</A> & !<A HREF="#YB1L9">YB1L9</A>));


<P> --ZB1L72 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~6
<P><A NAME="ZB1L72">ZB1L72</A> = (<A HREF="#ZB1L66">ZB1L66</A> & (<A HREF="#ZB1L67">ZB1L67</A> & (<A HREF="#ZB1L68">ZB1L68</A> & <A HREF="#ZB1L71">ZB1L71</A>)));


<P> --YB1L20 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[62]~3
<P><A NAME="YB1L20">YB1L20</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --YB1L18 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[61]~4
<P><A NAME="YB1L18">YB1L18</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --YB1L11 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[50]~5
<P><A NAME="YB1L11">YB1L11</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --YB1L16 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[56]~6
<P><A NAME="YB1L16">YB1L16</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & !<A HREF="#E1_STATE[0]">E1_STATE[0]</A>)));


<P> --ZB1L58 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~2
<P><A NAME="ZB1L58">ZB1L58</A> = (<A HREF="#YB1L20">YB1L20</A>) # ((<A HREF="#YB1L18">YB1L18</A>) # ((<A HREF="#YB1L11">YB1L11</A>) # (<A HREF="#YB1L16">YB1L16</A>)));


<P> --ZB1L59 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~3
<P><A NAME="ZB1L59">ZB1L59</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#YB1L14">YB1L14</A> & ((!<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>) # (!<A HREF="#_BERR">_BERR</A>))));


<P> --ZB1L60 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~4
<P><A NAME="ZB1L60">ZB1L60</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (!<A HREF="#ZB1L15">ZB1L15</A> & ((!<A HREF="#YB1L14">YB1L14</A>) # (!<A HREF="#ZB1L13">ZB1L13</A>)))) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (((!<A HREF="#YB1L14">YB1L14</A>) # (!<A HREF="#ZB1L13">ZB1L13</A>))));


<P> --ZB1L61 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~5
<P><A NAME="ZB1L61">ZB1L61</A> = (<A HREF="#ZB1L58">ZB1L58</A>) # ((<A HREF="#EC1L1">EC1L1</A> & ((<A HREF="#ZB1L59">ZB1L59</A>) # (!<A HREF="#ZB1L60">ZB1L60</A>))));


<P> --YB1L12 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[50]~7
<P><A NAME="YB1L12">YB1L12</A> = (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>);


<P> --ZB1L18 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~5
<P><A NAME="ZB1L18">ZB1L18</A> = (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#YB1L12">YB1L12</A> & (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & !<A HREF="#E1_STATE[3]">E1_STATE[3]</A>)));


<P> --YB1L17 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[60]~8
<P><A NAME="YB1L17">YB1L17</A> = (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & !<A HREF="#E1_STATE[3]">E1_STATE[3]</A>));


<P> --J1_FLUSHFIFO is registers:u_registers|FLUSHFIFO
<P><A NAME="J1_FLUSHFIFO">J1_FLUSHFIFO</A> = DFFEAS(<A HREF="#J1L4">J1L4</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  ,  ,  ,  ,  ,  );


<P> --SB1_PTR[0] is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|PTR[0]
<P><A NAME="SB1_PTR[0]">SB1_PTR[0]</A> = DFFEAS(<A HREF="#SB1L5">SB1L5</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --SB1_PTR[1] is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|PTR[1]
<P><A NAME="SB1_PTR[1]">SB1_PTR[1]</A> = DFFEAS(<A HREF="#SB1L8">SB1L8</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --E1L24 is CPU_SM:u_CPU_SM|LASTWORD~0
<P><A NAME="E1L24">E1L24</A> = (<A HREF="#J1_FLUSHFIFO">J1_FLUSHFIFO</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>) # (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>)));


<P> --NC1L1 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|datapath_24dec:u_datapath_24dec|D1~0
<P><A NAME="NC1L1">NC1L1</A> = (<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & <A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>);


<P> --YB1L22 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|nE~0
<P><A NAME="YB1L22">YB1L22</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & !<A HREF="#E1_STATE[1]">E1_STATE[1]</A>)));


<P> --TB1_FIFOEMPTY is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY
<P><A NAME="TB1_FIFOEMPTY">TB1_FIFOEMPTY</A> = DFFEAS(<A HREF="#TB1L24">TB1L24</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --ZB1L62 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~6
<P><A NAME="ZB1L62">ZB1L62</A> = (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (!<A HREF="#YB1L17">YB1L17</A> & ((<A HREF="#ZB1L64">ZB1L64</A>) # (!<A HREF="#E1L24">E1L24</A>)))) # (!<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (((<A HREF="#ZB1L64">ZB1L64</A>) # (!<A HREF="#E1L24">E1L24</A>))));


<P> --ZB1L73 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_d~7
<P><A NAME="ZB1L73">ZB1L73</A> = ((!<A HREF="#ZB1L61">ZB1L61</A> & (!<A HREF="#ZB1L18">ZB1L18</A> & <A HREF="#ZB1L62">ZB1L62</A>))) # (!<A HREF="#ZB1L72">ZB1L72</A>);


<P> --SC1_TERM_COUNTER[2] is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER[2]
<P><A NAME="SC1_TERM_COUNTER[2]">SC1_TERM_COUNTER[2]</A> = DFFEAS(<A HREF="#SC1L9">SC1L9</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --SC1_TERM_COUNTER[0] is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER[0]
<P><A NAME="SC1_TERM_COUNTER[0]">SC1_TERM_COUNTER[0]</A> = DFFEAS(<A HREF="#SC1L10">SC1L10</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --SC1_TERM_COUNTER[1] is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER[1]
<P><A NAME="SC1_TERM_COUNTER[1]">SC1_TERM_COUNTER[1]</A> = DFFEAS(<A HREF="#SC1L11">SC1L11</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --SC1L4 is registers:u_registers|registers_term:u_registers_term|REG_DSK_~0
<P><A NAME="SC1L4">SC1L4</A> = (<A HREF="#SC1_REG_DSK_">SC1_REG_DSK_</A>) # ((!<A HREF="#SC1_TERM_COUNTER[2]">SC1_TERM_COUNTER[2]</A> & (<A HREF="#SC1_TERM_COUNTER[0]">SC1_TERM_COUNTER[0]</A> & <A HREF="#SC1_TERM_COUNTER[1]">SC1_TERM_COUNTER[1]</A>)));


<P> --HC1_state_reg.s6 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s6
<P><A NAME="HC1_state_reg.s6">HC1_state_reg.s6</A> = DFFEAS(<A HREF="#HC1_state_reg.s26">HC1_state_reg.s26</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s19 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s19
<P><A NAME="HC1_state_reg.s19">HC1_state_reg.s19</A> = DFFEAS(<A HREF="#HC1_state_reg.s3">HC1_state_reg.s3</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1L26 is SCSI_SM:u_SCSI_SM|nLS2CPU~0
<P><A NAME="G1L26">G1L26</A> = (<A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>) # ((<A HREF="#HC1_state_reg.s6">HC1_state_reg.s6</A>) # (<A HREF="#HC1_state_reg.s19">HC1_state_reg.s19</A>));


<P> --ZB1L19 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~6
<P><A NAME="ZB1L19">ZB1L19</A> = (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (!<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --E1_DMAENA is CPU_SM:u_CPU_SM|DMAENA
<P><A NAME="E1_DMAENA">E1_DMAENA</A> = DFFEAS(<A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --YB1L1 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[0]~9
<P><A NAME="YB1L1">YB1L1</A> = (<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & (<A HREF="#ZB1L19">ZB1L19</A> & (<A HREF="#E1_DMAENA">E1_DMAENA</A> & !<A HREF="#E1_STATE[1]">E1_STATE[1]</A>)));


<P> --TB1_FIFOFULL is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOFULL
<P><A NAME="TB1_FIFOFULL">TB1_FIFOFULL</A> = DFFEAS(<A HREF="#TB1L18">TB1L18</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --ZB1L20 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~7
<P><A NAME="ZB1L20">ZB1L20</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & !<A HREF="#E1_STATE[2]">E1_STATE[2]</A>));


<P> --E1_FLUSHFIFO is CPU_SM:u_CPU_SM|FLUSHFIFO
<P><A NAME="E1_FLUSHFIFO">E1_FLUSHFIFO</A> = DFFEAS(<A HREF="#J1_FLUSHFIFO">J1_FLUSHFIFO</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --ZB1L74 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBREQ_d~2
<P><A NAME="ZB1L74">ZB1L74</A> = (<A HREF="#E1_FLUSHFIFO">E1_FLUSHFIFO</A> & ((<A HREF="#E1L24">E1L24</A>) # (<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>)));


<P> --ZB1L75 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBREQ_d~3
<P><A NAME="ZB1L75">ZB1L75</A> = (<A HREF="#ZB1L76">ZB1L76</A>) # ((<A HREF="#YB1L1">YB1L1</A> & ((<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A>) # (<A HREF="#ZB1L74">ZB1L74</A>))));


<P> --HC1_state_reg.s16 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s16
<P><A NAME="HC1_state_reg.s16">HC1_state_reg.s16</A> = DFFEAS(<A HREF="#HC1L12">HC1L12</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_CCPUREQ is SCSI_SM:u_SCSI_SM|CCPUREQ
<P><A NAME="G1_CCPUREQ">G1_CCPUREQ</A> = DFFEAS(<A HREF="#PC1_WDREGREQ">PC1_WDREGREQ</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_RDFIFO_o is SCSI_SM:u_SCSI_SM|RDFIFO_o
<P><A NAME="G1_RDFIFO_o">G1_RDFIFO_o</A> = DFFEAS(<A HREF="#G1L14">G1L14</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#_RST">_RST</A>,  ,  ,  ,  ,  ,  );


<P> --G1_CDREQ_ is SCSI_SM:u_SCSI_SM|CDREQ_
<P><A NAME="G1_CDREQ_">G1_CDREQ_</A> = DFFEAS(<A HREF="#DREQ_">DREQ_</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L30 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|always1~0
<P><A NAME="HC1L30">HC1L30</A> = (<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A>) # ((<A HREF="#G1_CCPUREQ">G1_CCPUREQ</A>) # ((<A HREF="#G1_RDFIFO_o">G1_RDFIFO_o</A>) # (!<A HREF="#G1_CDREQ_">G1_CDREQ_</A>)));


<P> --HC1L2 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector0~0
<P><A NAME="HC1L2">HC1L2</A> = (<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A> & (<A HREF="#HC1_state_reg.s16">HC1_state_reg.s16</A> & !<A HREF="#HC1L30">HC1L30</A>));


<P> --G1_RIFIFO_o is SCSI_SM:u_SCSI_SM|RIFIFO_o
<P><A NAME="G1_RIFIFO_o">G1_RIFIFO_o</A> = DFFEAS(<A HREF="#G1L19">G1L19</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#_RST">_RST</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L31 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|always1~1
<P><A NAME="HC1L31">HC1L31</A> = (<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & (<A HREF="#G1_CDREQ_">G1_CDREQ_</A> & (!<A HREF="#G1_CCPUREQ">G1_CCPUREQ</A> & !<A HREF="#G1_RIFIFO_o">G1_RIFIFO_o</A>)));


<P> --HC1_state_reg.s0 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s0
<P><A NAME="HC1_state_reg.s0">HC1_state_reg.s0</A> = DFFEAS(<A HREF="#HC1L9">HC1L9</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L3 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector0~1
<P><A NAME="HC1L3">HC1L3</A> = (<A HREF="#HC1L31">HC1L31</A> & (!<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & !<A HREF="#HC1_state_reg.s0">HC1_state_reg.s0</A>));


<P> --HC1_state_reg.s24 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s24
<P><A NAME="HC1_state_reg.s24">HC1_state_reg.s24</A> = DFFEAS(<A HREF="#HC1L3">HC1L3</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s4 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s4
<P><A NAME="HC1_state_reg.s4">HC1_state_reg.s4</A> = DFFEAS(<A HREF="#HC1_state_reg.s24">HC1_state_reg.s24</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s20 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s20
<P><A NAME="HC1_state_reg.s20">HC1_state_reg.s20</A> = DFFEAS(<A HREF="#HC1_state_reg.s4">HC1_state_reg.s4</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L4 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector0~2
<P><A NAME="HC1L4">HC1L4</A> = (!<A HREF="#HC1_state_reg.s4">HC1_state_reg.s4</A> & (!<A HREF="#HC1_state_reg.s20">HC1_state_reg.s20</A> & ((<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A>) # (!<A HREF="#HC1_state_reg.s24">HC1_state_reg.s24</A>))));


<P> --HC1_state_reg.s2 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s2
<P><A NAME="HC1_state_reg.s2">HC1_state_reg.s2</A> = DFFEAS(<A HREF="#HC1_state_reg.s28">HC1_state_reg.s28</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s18 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s18
<P><A NAME="HC1_state_reg.s18">HC1_state_reg.s18</A> = DFFEAS(<A HREF="#HC1_state_reg.s2">HC1_state_reg.s2</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s28 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s28
<P><A NAME="HC1_state_reg.s28">HC1_state_reg.s28</A> = DFFEAS(<A HREF="#HC1L2">HC1L2</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L27 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|WideOr22~0
<P><A NAME="HC1L27">HC1L27</A> = (!<A HREF="#HC1_state_reg.s2">HC1_state_reg.s2</A> & (!<A HREF="#HC1_state_reg.s18">HC1_state_reg.s18</A> & !<A HREF="#HC1_state_reg.s28">HC1_state_reg.s28</A>));


<P> --HC1L5 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector0~3
<P><A NAME="HC1L5">HC1L5</A> = (<A HREF="#HC1L2">HC1L2</A>) # ((<A HREF="#HC1L3">HC1L3</A>) # ((!<A HREF="#HC1L27">HC1L27</A>) # (!<A HREF="#HC1L4">HC1L4</A>)));


<P> --G1_CRESET_ is SCSI_SM:u_SCSI_SM|CRESET_
<P><A NAME="G1_CRESET_">G1_CRESET_</A> = DFFEAS(<A HREF="#_RST">_RST</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>,  ,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s3 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s3
<P><A NAME="HC1_state_reg.s3">HC1_state_reg.s3</A> = DFFEAS(<A HREF="#HC1_state_reg.s30">HC1_state_reg.s30</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s10 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s10
<P><A NAME="HC1_state_reg.s10">HC1_state_reg.s10</A> = DFFEAS(<A HREF="#HC1L20">HC1L20</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s30 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s30
<P><A NAME="HC1_state_reg.s30">HC1_state_reg.s30</A> = DFFEAS(<A HREF="#HC1_state_reg.s10">HC1_state_reg.s10</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L29 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|WideOr30~0
<P><A NAME="HC1L29">HC1L29</A> = (<A HREF="#HC1_state_reg.s6">HC1_state_reg.s6</A>) # ((<A HREF="#HC1_state_reg.s3">HC1_state_reg.s3</A>) # ((<A HREF="#HC1_state_reg.s10">HC1_state_reg.s10</A>) # (<A HREF="#HC1_state_reg.s30">HC1_state_reg.s30</A>)));


<P> --HC1_state_reg.s8 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s8
<P><A NAME="HC1_state_reg.s8">HC1_state_reg.s8</A> = DFFEAS(<A HREF="#HC1L10">HC1L10</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s17 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s17
<P><A NAME="HC1_state_reg.s17">HC1_state_reg.s17</A> = DFFEAS(<A HREF="#HC1L13">HC1L13</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s26 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s26
<P><A NAME="HC1_state_reg.s26">HC1_state_reg.s26</A> = DFFEAS(<A HREF="#HC1_state_reg.s17">HC1_state_reg.s17</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_WideOr30 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|WideOr30
<P><A NAME="HC1_WideOr30">HC1_WideOr30</A> = (<A HREF="#HC1L29">HC1L29</A>) # ((<A HREF="#HC1_state_reg.s8">HC1_state_reg.s8</A>) # ((<A HREF="#HC1_state_reg.s17">HC1_state_reg.s17</A>) # (<A HREF="#HC1_state_reg.s26">HC1_state_reg.s26</A>)));


<P> --QC1L7 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[4]~3
<P><A NAME="QC1L7">QC1L7</A> = (<A HREF="#PC1L4">PC1L4</A> & (<A HREF="#A1L20">A1L20</A>)) # (!<A HREF="#PC1L4">PC1L4</A> & ((<A HREF="#QC1_CNTR_O[4]">QC1_CNTR_O[4]</A>)));


<P> --HC1L18 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector25~0
<P><A NAME="HC1L18">HC1L18</A> = (!<A HREF="#HC1_state_reg.s19">HC1_state_reg.s19</A> & (!<A HREF="#HC1_state_reg.s3">HC1_state_reg.s3</A> & (!<A HREF="#HC1_state_reg.s10">HC1_state_reg.s10</A> & !<A HREF="#HC1_state_reg.s30">HC1_state_reg.s30</A>)));


<P> --HC1L19 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector25~1
<P><A NAME="HC1L19">HC1L19</A> = (((<A HREF="#A1L111">A1L111</A> & <A HREF="#HC1_state_reg.s8">HC1_state_reg.s8</A>)) # (!<A HREF="#HC1L18">HC1L18</A>)) # (!<A HREF="#HC1L4">HC1L4</A>);


<P> --HC1L13 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector13~0
<P><A NAME="HC1L13">HC1L13</A> = (<A HREF="#HC1_state_reg.s8">HC1_state_reg.s8</A> & !<A HREF="#A1L111">A1L111</A>);


<P> --HC1L17 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector24~0
<P><A NAME="HC1L17">HC1L17</A> = (<A HREF="#HC1_state_reg.s17">HC1_state_reg.s17</A>) # ((<A HREF="#HC1_state_reg.s26">HC1_state_reg.s26</A>) # ((<A HREF="#HC1L13">HC1L13</A>) # (!<A HREF="#HC1L27">HC1L27</A>)));


<P> --QC1L3 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[1]~4
<P><A NAME="QC1L3">QC1L3</A> = (<A HREF="#PC1L4">PC1L4</A> & (<A HREF="#A1L14">A1L14</A>)) # (!<A HREF="#PC1L4">PC1L4</A> & ((<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A>)));


<P> --SCLK is SCLK
<P><A NAME="SCLK">SCLK</A> = INPUT();


<P> --AC1L1 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~0
<P><A NAME="AC1L1">AC1L1</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#ZB1L16">ZB1L16</A> & !<A HREF="#E1_STATE[0]">E1_STATE[0]</A>)));


<P> --ZB1L37 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|INCFIFO_d~0
<P><A NAME="ZB1L37">ZB1L37</A> = (<A HREF="#EC1L1">EC1L1</A> & (<A HREF="#A1L71">A1L71</A> & ((<A HREF="#YB1L13">YB1L13</A>) # (<A HREF="#AC1L1">AC1L1</A>))));


<P> --YB1L8 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[43]~10
<P><A NAME="YB1L8">YB1L8</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & !<A HREF="#E1_STATE[2]">E1_STATE[2]</A>)));


<P> --ZB1L50 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_Y~0
<P><A NAME="ZB1L50">ZB1L50</A> = (!<A HREF="#YB1L8">YB1L8</A> & ((!<A HREF="#YB1L14">YB1L14</A>) # (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A>)));


<P> --DC1L15 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|p4b~0
<P><A NAME="DC1L15">DC1L15</A> = (<A HREF="#ZB1L60">ZB1L60</A> & (<A HREF="#ZB1L50">ZB1L50</A> & ((<A HREF="#E1_STATE[1]">E1_STATE[1]</A>) # (!<A HREF="#ZB1L15">ZB1L15</A>))));


<P> --YB1L7 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[37]~11
<P><A NAME="YB1L7">YB1L7</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --AC1L8 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|p1c~0
<P><A NAME="AC1L8">AC1L8</A> = (!<A HREF="#ZB1L14">ZB1L14</A> & (!<A HREF="#ZB1L17">ZB1L17</A> & (!<A HREF="#YB1L9">YB1L9</A> & !<A HREF="#YB1L7">YB1L7</A>)));


<P> --ZB1L51 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_Y~1
<P><A NAME="ZB1L51">ZB1L51</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & !<A HREF="#E1_STATE[1]">E1_STATE[1]</A>)));


<P> --BC1L12 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|p2c~0
<P><A NAME="BC1L12">BC1L12</A> = (!<A HREF="#ZB1L51">ZB1L51</A> & (((<A HREF="#A1L71">A1L71</A>) # (!<A HREF="#YB1L13">YB1L13</A>)) # (!<A HREF="#EC1L1">EC1L1</A>)));


<P> --AC1L9 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|p1c~1
<P><A NAME="AC1L9">AC1L9</A> = (((<A HREF="#E1_nDSACK">E1_nDSACK</A> & !<A HREF="#DC1L15">DC1L15</A>)) # (!<A HREF="#BC1L12">BC1L12</A>)) # (!<A HREF="#AC1L8">AC1L8</A>);


<P> --J1_A1 is registers:u_registers|A1
<P><A NAME="J1_A1">J1_A1</A> = DFFEAS(<A HREF="#J1L2">J1L2</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  ,  ,  ,  ,  ,  );


<P> --YB1L4 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[12]~12
<P><A NAME="YB1L4">YB1L4</A> = (<A HREF="#E1_BGRANT_">E1_BGRANT_</A> & (<A HREF="#E1_nCYCLEDONE">E1_nCYCLEDONE</A> & <A HREF="#J1_A1">J1_A1</A>));


<P> --YB1L21 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E~13
<P><A NAME="YB1L21">YB1L21</A> = (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & ((!<A HREF="#E1_STATE[3]">E1_STATE[3]</A>) # (!<A HREF="#E1_STATE[4]">E1_STATE[4]</A>))));


<P> --YB1L15 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[55]~14
<P><A NAME="YB1L15">YB1L15</A> = (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & ((<A HREF="#YB1L16">YB1L16</A>) # (<A HREF="#YB1L21">YB1L21</A>)));


<P> --AC1L2 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~1
<P><A NAME="AC1L2">AC1L2</A> = (!<A HREF="#YB1L15">YB1L15</A> & (((!<A HREF="#YB1L4">YB1L4</A>) # (!<A HREF="#ZB1L19">ZB1L19</A>)) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A>)));


<P> --AC1L3 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~2
<P><A NAME="AC1L3">AC1L3</A> = (<A HREF="#ZB1L37">ZB1L37</A>) # (((<A HREF="#_STERM">_STERM</A> & <A HREF="#AC1L9">AC1L9</A>)) # (!<A HREF="#AC1L2">AC1L2</A>));


<P> --ZB1L8 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEH_Y~0
<P><A NAME="ZB1L8">ZB1L8</A> = (!<A HREF="#_STERM">_STERM</A> & ((<A HREF="#YB1L13">YB1L13</A>) # ((<A HREF="#YB1L9">YB1L9</A>) # (<A HREF="#YB1L8">YB1L8</A>))));


<P> --AC1L4 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~3
<P><A NAME="AC1L4">AC1L4</A> = (<A HREF="#YB1L11">YB1L11</A>) # ((<A HREF="#YB1L16">YB1L16</A>) # (<A HREF="#ZB1L8">ZB1L8</A>));


<P> --YB1L19 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[61]~15
<P><A NAME="YB1L19">YB1L19</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>);


<P> --ZB1L21 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~8
<P><A NAME="ZB1L21">ZB1L21</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#YB1L19">YB1L19</A> & !<A HREF="#E1_STATE[2]">E1_STATE[2]</A>)));


<P> --YB1L10 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[46]~16
<P><A NAME="YB1L10">YB1L10</A> = (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & !<A HREF="#E1_STATE[1]">E1_STATE[1]</A>));


<P> --YB1L5 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[27]~17
<P><A NAME="YB1L5">YB1L5</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#YB1L10">YB1L10</A> & (!<A HREF="#E1L24">E1L24</A> & !<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>)));


<P> --AC1L5 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~4
<P><A NAME="AC1L5">AC1L5</A> = (<A HREF="#ZB1L62">ZB1L62</A> & (!<A HREF="#YB1L5">YB1L5</A> & ((!<A HREF="#ZB1L21">ZB1L21</A>) # (!<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A>))));


<P> --ZB1L48 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLHW_d~0
<P><A NAME="ZB1L48">ZB1L48</A> = (<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & (((!<A HREF="#YB1L17">YB1L17</A>) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A>)))) # (!<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & (!<A HREF="#ZB1L21">ZB1L21</A> & ((!<A HREF="#YB1L17">YB1L17</A>) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A>))));


<P> --AC1L6 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~5
<P><A NAME="AC1L6">AC1L6</A> = (<A HREF="#ZB1L48">ZB1L48</A> & (!<A HREF="#YB1L20">YB1L20</A> & !<A HREF="#ZB1L18">ZB1L18</A>));


<P> --AC1L7 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|cpudff1_d~6
<P><A NAME="AC1L7">AC1L7</A> = (<A HREF="#AC1L3">AC1L3</A>) # ((<A HREF="#AC1L4">AC1L4</A>) # ((!<A HREF="#AC1L6">AC1L6</A>) # (!<A HREF="#AC1L5">AC1L5</A>)));


<P> --YB1L6 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[35]~18
<P><A NAME="YB1L6">YB1L6</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & <A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --BC1L1 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~0
<P><A NAME="BC1L1">BC1L1</A> = (<A HREF="#YB1L8">YB1L8</A>) # ((<A HREF="#YB1L13">YB1L13</A> & (!<A HREF="#E1_nDSACK">E1_nDSACK</A> & <A HREF="#A1L71">A1L71</A>)));


<P> --E1_DREQ_ is CPU_SM:u_CPU_SM|DREQ_
<P><A NAME="E1_DREQ_">E1_DREQ_</A> = DFFEAS(<A HREF="#DREQ_">DREQ_</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --BC1L2 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~1
<P><A NAME="BC1L2">BC1L2</A> = (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_DMAENA">E1_DMAENA</A> & (<A HREF="#E1_DREQ_">E1_DREQ_</A> & !<A HREF="#E1_STATE[1]">E1_STATE[1]</A>)));


<P> --BC1L3 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~2
<P><A NAME="BC1L3">BC1L3</A> = (<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & <A HREF="#BC1L2">BC1L2</A>));


<P> --BC1L4 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~3
<P><A NAME="BC1L4">BC1L4</A> = (<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>) # (((!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & !<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>)) # (!<A HREF="#J1_FLUSHFIFO">J1_FLUSHFIFO</A>));


<P> --BC1L5 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~4
<P><A NAME="BC1L5">BC1L5</A> = (<A HREF="#YB1L22">YB1L22</A> & ((<A HREF="#BC1L4">BC1L4</A>) # ((!<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & <A HREF="#BC1L3">BC1L3</A>)))) # (!<A HREF="#YB1L22">YB1L22</A> & (!<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & (<A HREF="#BC1L3">BC1L3</A>)));


<P> --A1L72 is DSK1_IN_~0
<P><A NAME="A1L72">A1L72</A> = (!<A HREF="#_BERR">_BERR</A>) # (!<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A>);


<P> --BC1L6 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~5
<P><A NAME="BC1L6">BC1L6</A> = (<A HREF="#BC1L1">BC1L1</A> & ((<A HREF="#A1L72">A1L72</A>) # ((<A HREF="#BC1L5">BC1L5</A> & !<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>)))) # (!<A HREF="#BC1L1">BC1L1</A> & (<A HREF="#BC1L5">BC1L5</A> & ((!<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>))));


<P> --BC1L13 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|p2c~1
<P><A NAME="BC1L13">BC1L13</A> = ((<A HREF="#E1_nDSACK">E1_nDSACK</A> & ((!<A HREF="#ZB1L50">ZB1L50</A>) # (!<A HREF="#ZB1L60">ZB1L60</A>)))) # (!<A HREF="#BC1L12">BC1L12</A>);


<P> --AC1L10 is CPU_SM:u_CPU_SM|cpudff1:u_cpudff1|p1c~2
<P><A NAME="AC1L10">AC1L10</A> = (!<A HREF="#ZB1L14">ZB1L14</A> & (!<A HREF="#ZB1L17">ZB1L17</A> & ((!<A HREF="#YB1L10">YB1L10</A>) # (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A>))));


<P> --BC1L7 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~6
<P><A NAME="BC1L7">BC1L7</A> = (<A HREF="#BC1L6">BC1L6</A>) # ((<A HREF="#_STERM">_STERM</A> & ((<A HREF="#BC1L13">BC1L13</A>) # (!<A HREF="#AC1L10">AC1L10</A>))));


<P> --BC1L8 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~7
<P><A NAME="BC1L8">BC1L8</A> = (<A HREF="#YB1L18">YB1L18</A>) # ((<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#ZB1L19">ZB1L19</A> & !<A HREF="#YB1L4">YB1L4</A>)));


<P> --BC1L9 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~8
<P><A NAME="BC1L9">BC1L9</A> = (<A HREF="#BC1L8">BC1L8</A>) # (((<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & <A HREF="#ZB1L21">ZB1L21</A>)) # (!<A HREF="#ZB1L62">ZB1L62</A>));


<P> --ZB1L38 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|INCFIFO_d~1
<P><A NAME="ZB1L38">ZB1L38</A> = (!<A HREF="#YB1L15">YB1L15</A> & (!<A HREF="#ZB1L8">ZB1L8</A> & ((<A HREF="#E1_nDSACK">E1_nDSACK</A>) # (!<A HREF="#YB1L11">YB1L11</A>))));


<P> --BC1L10 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~9
<P><A NAME="BC1L10">BC1L10</A> = (<A HREF="#YB1L6">YB1L6</A>) # ((<A HREF="#BC1L7">BC1L7</A>) # ((<A HREF="#BC1L9">BC1L9</A>) # (!<A HREF="#ZB1L38">ZB1L38</A>)));


<P> --YB1L23 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|nE~1
<P><A NAME="YB1L23">YB1L23</A> = (<A HREF="#E1_BGRANT_">E1_BGRANT_</A> & (<A HREF="#E1_nCYCLEDONE">E1_nCYCLEDONE</A> & !<A HREF="#J1_A1">J1_A1</A>));


<P> --YB1L24 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|nE~2
<P><A NAME="YB1L24">YB1L24</A> = (<A HREF="#YB1L12">YB1L12</A> & (<A HREF="#ZB1L20">ZB1L20</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>) # (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>))));


<P> --YB1L25 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|nE~3
<P><A NAME="YB1L25">YB1L25</A> = (<A HREF="#YB1L23">YB1L23</A> & (<A HREF="#J1_FLUSHFIFO">J1_FLUSHFIFO</A> & (!<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A> & <A HREF="#YB1L24">YB1L24</A>)));


<P> --DC1L1 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~2
<P><A NAME="DC1L1">DC1L1</A> = (<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A>) # ((<A HREF="#E1_FLUSHFIFO">E1_FLUSHFIFO</A> & ((<A HREF="#E1L24">E1L24</A>) # (<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>))));


<P> --DC1L2 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~3
<P><A NAME="DC1L2">DC1L2</A> = (<A HREF="#NC1L1">NC1L1</A> & ((<A HREF="#YB1L25">YB1L25</A>) # ((<A HREF="#YB1L1">YB1L1</A> & <A HREF="#DC1L1">DC1L1</A>)))) # (!<A HREF="#NC1L1">NC1L1</A> & (<A HREF="#YB1L1">YB1L1</A> & ((<A HREF="#DC1L1">DC1L1</A>))));


<P> --DC1L3 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~4
<P><A NAME="DC1L3">DC1L3</A> = (<A HREF="#DC1L2">DC1L2</A>) # ((!<A HREF="#_STERM">_STERM</A> & ((!<A HREF="#AC1L8">AC1L8</A>) # (!<A HREF="#DC1L15">DC1L15</A>))));


<P> --DC1L4 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~5
<P><A NAME="DC1L4">DC1L4</A> = ((<A HREF="#A1L71">A1L71</A> & ((<A HREF="#ZB1L15">ZB1L15</A>) # (<A HREF="#YB1L13">YB1L13</A>)))) # (!<A HREF="#ZB1L60">ZB1L60</A>);


<P> --DC1L5 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~6
<P><A NAME="DC1L5">DC1L5</A> = (!<A HREF="#E1_nDSACK">E1_nDSACK</A> & ((<A HREF="#YB1L11">YB1L11</A>) # ((<A HREF="#DC1L4">DC1L4</A> & <A HREF="#A1L72">A1L72</A>))));


<P> --E1_LASTWORD is CPU_SM:u_CPU_SM|LASTWORD
<P><A NAME="E1_LASTWORD">E1_LASTWORD</A> = (<A HREF="#J1_FLUSHFIFO">J1_FLUSHFIFO</A> & (!<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>) # (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>))));


<P> --YB1L3 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[8]~19
<P><A NAME="YB1L3">YB1L3</A> = (<A HREF="#YB1L12">YB1L12</A> & (<A HREF="#ZB1L20">ZB1L20</A> & (<A HREF="#YB1L23">YB1L23</A> & !<A HREF="#E1_LASTWORD">E1_LASTWORD</A>)));


<P> --DC1L6 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~7
<P><A NAME="DC1L6">DC1L6</A> = (<A HREF="#YB1L9">YB1L9</A>) # ((<A HREF="#E1_nDSACK">E1_nDSACK</A> & ((<A HREF="#YB1L13">YB1L13</A>) # (<A HREF="#YB1L8">YB1L8</A>))));


<P> --DC1L7 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~8
<P><A NAME="DC1L7">DC1L7</A> = (<A HREF="#YB1L3">YB1L3</A>) # ((<A HREF="#_STERM">_STERM</A> & ((<A HREF="#DC1L6">DC1L6</A>) # (!<A HREF="#BC1L12">BC1L12</A>))));


<P> --DC1L8 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~9
<P><A NAME="DC1L8">DC1L8</A> = (<A HREF="#YB1L12">YB1L12</A> & (<A HREF="#ZB1L20">ZB1L20</A> & ((!<A HREF="#E1_nCYCLEDONE">E1_nCYCLEDONE</A>) # (!<A HREF="#E1_BGRANT_">E1_BGRANT_</A>))));


<P> --DC1L9 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~10
<P><A NAME="DC1L9">DC1L9</A> = (<A HREF="#YB1L18">YB1L18</A>) # ((<A HREF="#DC1L8">DC1L8</A>) # ((<A HREF="#YB1L8">YB1L8</A> & <A HREF="#A1L72">A1L72</A>)));


<P> --ZB1L22 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~9
<P><A NAME="ZB1L22">ZB1L22</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#ZB1L16">ZB1L16</A> & (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & !<A HREF="#E1_STATE[2]">E1_STATE[2]</A>)));


<P> --DC1L10 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~11
<P><A NAME="DC1L10">DC1L10</A> = (((!<A HREF="#ZB1L16">ZB1L16</A>) # (!<A HREF="#E1_STATE[2]">E1_STATE[2]</A>)) # (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A>)) # (!<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>);


<P> --DC1L11 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~12
<P><A NAME="DC1L11">DC1L11</A> = (!<A HREF="#ZB1L22">ZB1L22</A> & (<A HREF="#DC1L10">DC1L10</A> & ((<A HREF="#DC1L14">DC1L14</A>) # (!<A HREF="#E1L24">E1L24</A>))));


<P> --DC1L12 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~13
<P><A NAME="DC1L12">DC1L12</A> = (<A HREF="#DC1L9">DC1L9</A>) # (((!<A HREF="#DC1L11">DC1L11</A>) # (!<A HREF="#ZB1L48">ZB1L48</A>)) # (!<A HREF="#AC1L2">AC1L2</A>));


<P> --DC1L13 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~14
<P><A NAME="DC1L13">DC1L13</A> = (<A HREF="#DC1L3">DC1L3</A>) # ((<A HREF="#DC1L5">DC1L5</A>) # ((<A HREF="#DC1L7">DC1L7</A>) # (<A HREF="#DC1L12">DC1L12</A>)));


<P> --EC1L2 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~1
<P><A NAME="EC1L2">EC1L2</A> = (<A HREF="#_BERR">_BERR</A> & (<A HREF="#EC1L1">EC1L1</A> & (<A HREF="#YB1L13">YB1L13</A> & <A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>)));


<P> --CC1L1 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~0
<P><A NAME="CC1L1">CC1L1</A> = (<A HREF="#E1_nDSACK">E1_nDSACK</A> & (<A HREF="#YB1L14">YB1L14</A> & ((<A HREF="#E1_STATE[0]">E1_STATE[0]</A>) # (<A HREF="#E1_STATE[3]">E1_STATE[3]</A>))));


<P> --CC1L2 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~1
<P><A NAME="CC1L2">CC1L2</A> = (<A HREF="#ZB1L14">ZB1L14</A>) # ((<A HREF="#EC1L2">EC1L2</A>) # ((<A HREF="#YB1L9">YB1L9</A>) # (<A HREF="#CC1L1">CC1L1</A>)));


<P> --EC1L13 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|p5b~0
<P><A NAME="EC1L13">EC1L13</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#ZB1L13">ZB1L13</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> $ (<A HREF="#E1_STATE[4]">E1_STATE[4]</A>))));


<P> --EC1L14 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|p5b~1
<P><A NAME="EC1L14">EC1L14</A> = (!<A HREF="#ZB1L15">ZB1L15</A> & (!<A HREF="#ZB1L17">ZB1L17</A> & !<A HREF="#YB1L7">YB1L7</A>));


<P> --CC1L3 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~2
<P><A NAME="CC1L3">CC1L3</A> = (<A HREF="#_STERM">_STERM</A> & (<A HREF="#CC1L2">CC1L2</A>)) # (!<A HREF="#_STERM">_STERM</A> & (((<A HREF="#EC1L13">EC1L13</A>) # (!<A HREF="#EC1L14">EC1L14</A>))));


<P> --CC1L4 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~3
<P><A NAME="CC1L4">CC1L4</A> = (<A HREF="#NC1L1">NC1L1</A> & (((<A HREF="#YB1L22">YB1L22</A> & !<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>)))) # (!<A HREF="#NC1L1">NC1L1</A> & (<A HREF="#YB1L25">YB1L25</A>));


<P> --CC1L5 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~4
<P><A NAME="CC1L5">CC1L5</A> = (<A HREF="#ZB1L22">ZB1L22</A>) # ((<A HREF="#CC1L4">CC1L4</A> & ((<A HREF="#E1L24">E1L24</A>) # (!<A HREF="#NC1L1">NC1L1</A>))));


<P> --CC1L11 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|p3a~0
<P><A NAME="CC1L11">CC1L11</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & ((<A HREF="#E1_STATE[1]">E1_STATE[1]</A>) # (!<A HREF="#E1_STATE[2]">E1_STATE[2]</A>))));


<P> --ZB1L40 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~0
<P><A NAME="ZB1L40">ZB1L40</A> = (<A HREF="#CC1L11">CC1L11</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>);


<P> --CC1L6 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~5
<P><A NAME="CC1L6">CC1L6</A> = (<A HREF="#EC1L1">EC1L1</A> & ((<A HREF="#ZB1L40">ZB1L40</A>) # ((<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & <A HREF="#ZB1L21">ZB1L21</A>)))) # (!<A HREF="#EC1L1">EC1L1</A> & (((<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & <A HREF="#ZB1L21">ZB1L21</A>))));


<P> --CC1L7 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~6
<P><A NAME="CC1L7">CC1L7</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#YB1L10">YB1L10</A> & ((<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>) # (!<A HREF="#E1L24">E1L24</A>))));


<P> --CC1L8 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~7
<P><A NAME="CC1L8">CC1L8</A> = (<A HREF="#YB1L20">YB1L20</A>) # ((<A HREF="#YB1L16">YB1L16</A>) # ((<A HREF="#CC1L6">CC1L6</A>) # (<A HREF="#CC1L7">CC1L7</A>)));


<P> --ZB1L53 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~0
<P><A NAME="ZB1L53">ZB1L53</A> = (!<A HREF="#YB1L6">YB1L6</A> & ((<A HREF="#E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A>) # ((<A HREF="#E1_DSACK_LATCHED_[1]">E1_DSACK_LATCHED_[1]</A>) # (!<A HREF="#YB1L11">YB1L11</A>))));


<P> --CC1L9 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~8
<P><A NAME="CC1L9">CC1L9</A> = ((<A HREF="#YB1L12">YB1L12</A> & (<A HREF="#ZB1L20">ZB1L20</A> & <A HREF="#YB1L4">YB1L4</A>))) # (!<A HREF="#ZB1L53">ZB1L53</A>);


<P> --CC1L10 is CPU_SM:u_CPU_SM|cpudff3:u_cpudff3|cpudff3_d~9
<P><A NAME="CC1L10">CC1L10</A> = (<A HREF="#CC1L3">CC1L3</A>) # ((<A HREF="#CC1L5">CC1L5</A>) # ((<A HREF="#CC1L8">CC1L8</A>) # (<A HREF="#CC1L9">CC1L9</A>)));


<P> --_BG is _BG
<P><A NAME="_BG">_BG</A> = INPUT();


<P> --E1L37 is CPU_SM:u_CPU_SM|aCYCLEDONE_~0
<P><A NAME="E1L37">E1L37</A> = (<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A> & (<A HREF="#_BERR">_BERR</A> & (<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A> & <A HREF="#_STERM">_STERM</A>)));


<P> --E1L38 is CPU_SM:u_CPU_SM|aCYCLEDONE_~1
<P><A NAME="E1L38">E1L38</A> = (<A HREF="#A1L114">A1L114</A> & (<A HREF="#A1L118">A1L118</A> & <A HREF="#E1L37">E1L37</A>));


<P> --EC1L3 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~2
<P><A NAME="EC1L3">EC1L3</A> = (<A HREF="#YB1L18">YB1L18</A>) # ((<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (<A HREF="#ZB1L19">ZB1L19</A> & <A HREF="#YB1L23">YB1L23</A>)));


<P> --ZB1L41 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~1
<P><A NAME="ZB1L41">ZB1L41</A> = (<A HREF="#YB1L8">YB1L8</A> & (!<A HREF="#E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A> & !<A HREF="#E1_DSACK_LATCHED_[1]">E1_DSACK_LATCHED_[1]</A>));


<P> --EC1L4 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~3
<P><A NAME="EC1L4">EC1L4</A> = (<A HREF="#EC1L3">EC1L3</A>) # ((<A HREF="#_STERM">_STERM</A> & ((<A HREF="#ZB1L41">ZB1L41</A>) # (!<A HREF="#BC1L12">BC1L12</A>))));


<P> --EC1L5 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~4
<P><A NAME="EC1L5">EC1L5</A> = (<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A>) # ((!<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A> & (<A HREF="#E1_DREQ_">E1_DREQ_</A> & <A HREF="#E1_STATE[4]">E1_STATE[4]</A>)));


<P> --EC1L6 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~5
<P><A NAME="EC1L6">EC1L6</A> = (<A HREF="#E1_DMAENA">E1_DMAENA</A> & (!<A HREF="#EC1L5">EC1L5</A> & ((<A HREF="#E1_STATE[4]">E1_STATE[4]</A>) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A>)))) # (!<A HREF="#E1_DMAENA">E1_DMAENA</A> & (((<A HREF="#E1_STATE[4]">E1_STATE[4]</A>))));


<P> --EC1L7 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~6
<P><A NAME="EC1L7">EC1L7</A> = (!<A HREF="#_STERM">_STERM</A> & ((<A HREF="#EC1L13">EC1L13</A>) # (!<A HREF="#EC1L14">EC1L14</A>)));


<P> --EC1L8 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~7
<P><A NAME="EC1L8">EC1L8</A> = (<A HREF="#EC1L7">EC1L7</A>) # ((<A HREF="#EC1L6">EC1L6</A> & (!<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & !<A HREF="#E1_STATE[3]">E1_STATE[3]</A>)));


<P> --EC1L9 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~8
<P><A NAME="EC1L9">EC1L9</A> = (<A HREF="#ZB1L15">ZB1L15</A> & ((!<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>) # (!<A HREF="#_BERR">_BERR</A>)));


<P> --EC1L10 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~9
<P><A NAME="EC1L10">EC1L10</A> = (<A HREF="#AC1L6">AC1L6</A> & (((!<A HREF="#YB1L23">YB1L23</A>) # (!<A HREF="#ZB1L20">ZB1L20</A>)) # (!<A HREF="#YB1L12">YB1L12</A>)));


<P> --EC1L11 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~10
<P><A NAME="EC1L11">EC1L11</A> = ((<A HREF="#EC1L1">EC1L1</A> & ((<A HREF="#EC1L9">EC1L9</A>) # (!<A HREF="#ZB1L60">ZB1L60</A>)))) # (!<A HREF="#EC1L10">EC1L10</A>);


<P> --EC1L12 is CPU_SM:u_CPU_SM|cpudff5:u_cpudff5|cpudff5_d~11
<P><A NAME="EC1L12">EC1L12</A> = ((<A HREF="#EC1L4">EC1L4</A>) # ((<A HREF="#EC1L8">EC1L8</A>) # (<A HREF="#EC1L11">EC1L11</A>))) # (!<A HREF="#AC1L5">AC1L5</A>);


<P> --QC1L11 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~5
<P><A NAME="QC1L11">QC1L11</A> = (<A HREF="#QC1L9">QC1L9</A> & (!<A HREF="#ADDR[5]">ADDR[5]</A> & (!<A HREF="#ADDR[3]">ADDR[3]</A> & !<A HREF="#ADDR[6]">ADDR[6]</A>)));


<P> --PC1L5 is registers:u_registers|addr_decoder:u_addr_decoder|FLUSH_~0
<P><A NAME="PC1L5">PC1L5</A> = (<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & (<A HREF="#ADDR[2]">ADDR[2]</A> & <A HREF="#ADDR[4]">ADDR[4]</A>));


<P> --E1_STOPFLUSH is CPU_SM:u_CPU_SM|STOPFLUSH
<P><A NAME="E1_STOPFLUSH">E1_STOPFLUSH</A> = DFFEAS(<A HREF="#ZB1L80">ZB1L80</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --J1L4 is registers:u_registers|FLUSHFIFO~0
<P><A NAME="J1L4">J1L4</A> = (<A HREF="#QC1L11">QC1L11</A> & ((<A HREF="#PC1L5">PC1L5</A>) # ((<A HREF="#J1_FLUSHFIFO">J1_FLUSHFIFO</A> & !<A HREF="#E1_STOPFLUSH">E1_STOPFLUSH</A>)))) # (!<A HREF="#QC1L11">QC1L11</A> & (((<A HREF="#J1_FLUSHFIFO">J1_FLUSHFIFO</A> & !<A HREF="#E1_STOPFLUSH">E1_STOPFLUSH</A>))));


<P> --G1_INCBO_o is SCSI_SM:u_SCSI_SM|INCBO_o
<P><A NAME="G1_INCBO_o">G1_INCBO_o</A> = DFFEAS(<A HREF="#HC1_INCBO">HC1_INCBO</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --SB1L5 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|PTR[0]~0
<P><A NAME="SB1L5">SB1L5</A> = <A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> $ (((<A HREF="#G1_INCBO_o">G1_INCBO_o</A> & ((<A HREF="#A1L111">A1L111</A>) # (!<A HREF="#PC1_h_0C">PC1_h_0C</A>)))));


<P> --QC1_CNTR_O[8] is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]
<P><A NAME="QC1_CNTR_O[8]">QC1_CNTR_O[8]</A> = DFFEAS(<A HREF="#QC1L13">QC1L13</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  ,  ,  ,  ,  ,  );


<P> --SB1_B is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|B
<P><A NAME="SB1_B">SB1_B</A> = DFFEAS(<A HREF="#SB1L2">SB1L2</A>, !<A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --SB1_S is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|S
<P><A NAME="SB1_S">SB1_S</A> = DFFEAS(<A HREF="#PC1_h_0C">PC1_h_0C</A>, !<A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --SB1L7 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|PTR~1
<P><A NAME="SB1L7">SB1L7</A> = (<A HREF="#SB1_S">SB1_S</A> & (<A HREF="#SB1_B">SB1_B</A>)) # (!<A HREF="#SB1_S">SB1_S</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> $ (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>))));


<P> --PC1L9 is registers:u_registers|addr_decoder:u_addr_decoder|h_0C~0
<P><A NAME="PC1L9">PC1L9</A> = (<A HREF="#QC1L9">QC1L9</A> & (<A HREF="#ADDR[3]">ADDR[3]</A> & (!<A HREF="#ADDR[5]">ADDR[5]</A> & !<A HREF="#ADDR[6]">ADDR[6]</A>)));


<P> --PC1_ACR_WR is registers:u_registers|addr_decoder:u_addr_decoder|ACR_WR
<P><A NAME="PC1_ACR_WR">PC1_ACR_WR</A> = (<A HREF="#PC1L9">PC1L9</A> & (<A HREF="#ADDR[2]">ADDR[2]</A> & (!<A HREF="#A1L111">A1L111</A> & !<A HREF="#ADDR[4]">ADDR[4]</A>)));


<P> --SB1L8 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|PTR~2
<P><A NAME="SB1L8">SB1L8</A> = (<A HREF="#PC1_ACR_WR">PC1_ACR_WR</A> & (<A HREF="#SB1L7">SB1L7</A>)) # (!<A HREF="#PC1_ACR_WR">PC1_ACR_WR</A> & ((<A HREF="#G1_INCBO_o">G1_INCBO_o</A> & (<A HREF="#SB1L7">SB1L7</A>)) # (!<A HREF="#G1_INCBO_o">G1_INCBO_o</A> & ((<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>)))));


<P> --TB1_UP[7] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[7]
<P><A NAME="TB1_UP[7]">TB1_UP[7]</A> = DFFEAS(<A HREF="#TB1L35">TB1L35</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  , <A HREF="#TB1L36">TB1L36</A>,  ,  ,  ,  );


<P> --TB1_UP[6] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[6]
<P><A NAME="TB1_UP[6]">TB1_UP[6]</A> = DFFEAS(<A HREF="#TB1L37">TB1L37</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  , <A HREF="#TB1L36">TB1L36</A>,  ,  ,  ,  );


<P> --TB1_UP[5] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[5]
<P><A NAME="TB1_UP[5]">TB1_UP[5]</A> = DFFEAS(<A HREF="#TB1L38">TB1L38</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  , <A HREF="#TB1L36">TB1L36</A>,  ,  ,  ,  );


<P> --TB1_UP[4] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[4]
<P><A NAME="TB1_UP[4]">TB1_UP[4]</A> = DFFEAS(<A HREF="#TB1L39">TB1L39</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  , <A HREF="#TB1L36">TB1L36</A>,  ,  ,  ,  );


<P> --TB1L20 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~0
<P><A NAME="TB1L20">TB1L20</A> = (!<A HREF="#TB1_UP[7]">TB1_UP[7]</A> & (!<A HREF="#TB1_UP[6]">TB1_UP[6]</A> & (!<A HREF="#TB1_UP[5]">TB1_UP[5]</A> & !<A HREF="#TB1_UP[4]">TB1_UP[4]</A>)));


<P> --TB1_UP[3] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[3]
<P><A NAME="TB1_UP[3]">TB1_UP[3]</A> = DFFEAS(<A HREF="#TB1L40">TB1L40</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  , <A HREF="#TB1L36">TB1L36</A>,  ,  ,  ,  );


<P> --TB1_UP[2] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[2]
<P><A NAME="TB1_UP[2]">TB1_UP[2]</A> = DFFEAS(<A HREF="#TB1L41">TB1L41</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  , <A HREF="#TB1L36">TB1L36</A>,  ,  ,  ,  );


<P> --TB1_UP[1] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[1]
<P><A NAME="TB1_UP[1]">TB1_UP[1]</A> = DFFEAS(<A HREF="#TB1L42">TB1L42</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  , <A HREF="#TB1L36">TB1L36</A>,  ,  ,  ,  );


<P> --TB1_UP[0] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP[0]
<P><A NAME="TB1_UP[0]">TB1_UP[0]</A> = DFFEAS(<A HREF="#E1_INCFIFO">E1_INCFIFO</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  , <A HREF="#TB1L36">TB1L36</A>,  ,  ,  ,  );


<P> --TB1L21 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~1
<P><A NAME="TB1L21">TB1L21</A> = (!<A HREF="#TB1_UP[3]">TB1_UP[3]</A> & (!<A HREF="#TB1_UP[2]">TB1_UP[2]</A> & (!<A HREF="#TB1_UP[1]">TB1_UP[1]</A> & !<A HREF="#TB1_UP[0]">TB1_UP[0]</A>)));


<P> --TB1_DOWN[6] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[6]
<P><A NAME="TB1_DOWN[6]">TB1_DOWN[6]</A> = DFFEAS(<A HREF="#TB1L15">TB1L15</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --TB1_DOWN[5] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[5]
<P><A NAME="TB1_DOWN[5]">TB1_DOWN[5]</A> = DFFEAS(<A HREF="#TB1L13">TB1L13</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --TB1_DOWN[4] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[4]
<P><A NAME="TB1_DOWN[4]">TB1_DOWN[4]</A> = DFFEAS(<A HREF="#TB1L11">TB1L11</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --TB1_DOWN[3] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[3]
<P><A NAME="TB1_DOWN[3]">TB1_DOWN[3]</A> = DFFEAS(<A HREF="#TB1L9">TB1L9</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --TB1L22 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~2
<P><A NAME="TB1L22">TB1L22</A> = (!<A HREF="#TB1_DOWN[6]">TB1_DOWN[6]</A> & (!<A HREF="#TB1_DOWN[5]">TB1_DOWN[5]</A> & (!<A HREF="#TB1_DOWN[4]">TB1_DOWN[4]</A> & !<A HREF="#TB1_DOWN[3]">TB1_DOWN[3]</A>)));


<P> --TB1_DOWN[2] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[2]
<P><A NAME="TB1_DOWN[2]">TB1_DOWN[2]</A> = DFFEAS(<A HREF="#TB1L7">TB1L7</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --TB1_DOWN[1] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[1]
<P><A NAME="TB1_DOWN[1]">TB1_DOWN[1]</A> = DFFEAS(<A HREF="#TB1L5">TB1L5</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --TB1_DOWN[0] is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[0]
<P><A NAME="TB1_DOWN[0]">TB1_DOWN[0]</A> = DFFEAS(<A HREF="#TB1L3">TB1L3</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --TB1L23 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~3
<P><A NAME="TB1L23">TB1L23</A> = (!<A HREF="#TB1_DOWN[2]">TB1_DOWN[2]</A> & (!<A HREF="#TB1_DOWN[1]">TB1_DOWN[1]</A> & !<A HREF="#TB1_DOWN[0]">TB1_DOWN[0]</A>));


<P> --TB1L24 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|FIFOEMPTY~4
<P><A NAME="TB1L24">TB1L24</A> = (((!<A HREF="#TB1L23">TB1L23</A>) # (!<A HREF="#TB1L22">TB1L22</A>)) # (!<A HREF="#TB1L21">TB1L21</A>)) # (!<A HREF="#TB1L20">TB1L20</A>);


<P> --SC1L2 is registers:u_registers|registers_term:u_registers_term|CYCLE_ACTIVE~0
<P><A NAME="SC1L2">SC1L2</A> = (<A HREF="#_CS">_CS</A>) # ((<A HREF="#A1L114">A1L114</A>) # ((<A HREF="#ADDR[6]">ADDR[6]</A>) # (<A HREF="#PC1_h_0C">PC1_h_0C</A>)));


<P> --SC1L1 is registers:u_registers|registers_term:u_registers_term|Add0~0
<P><A NAME="SC1L1">SC1L1</A> = (<A HREF="#SC1_TERM_COUNTER[0]">SC1_TERM_COUNTER[0]</A> & <A HREF="#SC1_TERM_COUNTER[1]">SC1_TERM_COUNTER[1]</A>);


<P> --SC1L9 is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER~0
<P><A NAME="SC1L9">SC1L9</A> = (!<A HREF="#A1L114">A1L114</A> & (<A HREF="#SC1_TERM_COUNTER[2]">SC1_TERM_COUNTER[2]</A> $ (((!<A HREF="#SC1L2">SC1L2</A> & <A HREF="#SC1L1">SC1L1</A>)))));


<P> --SC1L10 is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER~1
<P><A NAME="SC1L10">SC1L10</A> = (!<A HREF="#A1L114">A1L114</A> & (<A HREF="#SC1_TERM_COUNTER[0]">SC1_TERM_COUNTER[0]</A> $ (!<A HREF="#SC1L2">SC1L2</A>)));


<P> --SC1L11 is registers:u_registers|registers_term:u_registers_term|TERM_COUNTER~2
<P><A NAME="SC1L11">SC1L11</A> = (!<A HREF="#A1L114">A1L114</A> & (<A HREF="#SC1_TERM_COUNTER[1]">SC1_TERM_COUNTER[1]</A> $ (((!<A HREF="#SC1L2">SC1L2</A> & <A HREF="#SC1_TERM_COUNTER[0]">SC1_TERM_COUNTER[0]</A>)))));


<P> --TB1L16 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|Equal2~0
<P><A NAME="TB1L16">TB1L16</A> = (<A HREF="#TB1_UP[7]">TB1_UP[7]</A> & (<A HREF="#TB1_UP[6]">TB1_UP[6]</A> & (<A HREF="#TB1_UP[5]">TB1_UP[5]</A> & <A HREF="#TB1_UP[4]">TB1_UP[4]</A>)));


<P> --TB1L17 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|Equal2~1
<P><A NAME="TB1L17">TB1L17</A> = (<A HREF="#TB1_UP[3]">TB1_UP[3]</A> & <A HREF="#TB1_UP[2]">TB1_UP[2]</A>);


<P> --TB1L18 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|Equal2~2
<P><A NAME="TB1L18">TB1L18</A> = (<A HREF="#TB1_UP[1]">TB1_UP[1]</A> & (<A HREF="#TB1_UP[0]">TB1_UP[0]</A> & (<A HREF="#TB1L16">TB1L16</A> & <A HREF="#TB1L17">TB1L17</A>)));


<P> --HC1_state_reg.s1 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s1
<P><A NAME="HC1_state_reg.s1">HC1_state_reg.s1</A> = DFFEAS(<A HREF="#HC1_state_reg.s18">HC1_state_reg.s18</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L12 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector12~0
<P><A NAME="HC1L12">HC1L12</A> = (<A HREF="#HC1_state_reg.s1">HC1_state_reg.s1</A>) # ((!<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & (!<A HREF="#G1_CCPUREQ">G1_CCPUREQ</A> & !<A HREF="#HC1_state_reg.s0">HC1_state_reg.s0</A>)));


<P> --PC1_WDREGREQ is registers:u_registers|addr_decoder:u_addr_decoder|WDREGREQ
<P><A NAME="PC1_WDREGREQ">PC1_WDREGREQ</A> = (<A HREF="#ADDR[6]">ADDR[6]</A> & (!<A HREF="#_CS">_CS</A> & !<A HREF="#A1L114">A1L114</A>));


<P> --G1_RDFIFO_d is SCSI_SM:u_SCSI_SM|RDFIFO_d
<P><A NAME="G1_RDFIFO_d">G1_RDFIFO_d</A> = DFFEAS(<A HREF="#HC1L15">HC1L15</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_INCFIFO is CPU_SM:u_CPU_SM|INCFIFO
<P><A NAME="E1_INCFIFO">E1_INCFIFO</A> = DFFEAS(<A HREF="#ZB1L39">ZB1L39</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_DECFIFO is CPU_SM:u_CPU_SM|DECFIFO
<P><A NAME="E1_DECFIFO">E1_DECFIFO</A> = DFFEAS(<A HREF="#ZB1L7">ZB1L7</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1L14 is SCSI_SM:u_SCSI_SM|RDFIFO_o~0
<P><A NAME="G1L14">G1L14</A> = (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & ((<A HREF="#G1_RDFIFO_o">G1_RDFIFO_o</A>) # ((<A HREF="#G1_RDFIFO_d">G1_RDFIFO_d</A> & !<A HREF="#E1_INCFIFO">E1_INCFIFO</A>))));


<P> --_DREQ is _DREQ
<P><A NAME="_DREQ">_DREQ</A> = INPUT();


<P> --DREQ_ is DREQ_
<P><A NAME="DREQ_">DREQ_</A> = (!<A HREF="#_DREQ">_DREQ</A> & <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>);


<P> --G1_RIFIFO_d is SCSI_SM:u_SCSI_SM|RIFIFO_d
<P><A NAME="G1_RIFIFO_d">G1_RIFIFO_d</A> = DFFEAS(<A HREF="#HC1L24">HC1L24</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1L18 is SCSI_SM:u_SCSI_SM|RIFIFO_o~0
<P><A NAME="G1L18">G1L18</A> = (<A HREF="#G1_RIFIFO_d">G1_RIFIFO_d</A> & !<A HREF="#G1_RDFIFO_d">G1_RDFIFO_d</A>);


<P> --G1L19 is SCSI_SM:u_SCSI_SM|RIFIFO_o~1
<P><A NAME="G1L19">G1L19</A> = (<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (<A HREF="#G1_RIFIFO_o">G1_RIFIFO_o</A>)) # (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (!<A HREF="#E1_INCFIFO">E1_INCFIFO</A> & ((<A HREF="#G1_RIFIFO_o">G1_RIFIFO_o</A>) # (<A HREF="#G1L18">G1L18</A>))));


<P> --HC1_state_reg.s14 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s14
<P><A NAME="HC1_state_reg.s14">HC1_state_reg.s14</A> = DFFEAS(<A HREF="#HC1L11">HC1L11</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1_state_reg.s25 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s25
<P><A NAME="HC1_state_reg.s25">HC1_state_reg.s25</A> = DFFEAS(<A HREF="#HC1L14">HC1L14</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_CDSACK_ is SCSI_SM:u_SCSI_SM|CDSACK_
<P><A NAME="G1_CDSACK_">G1_CDSACK_</A> = DFFEAS(<A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L6 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector1~0
<P><A NAME="HC1L6">HC1L6</A> = (<A HREF="#HC1_state_reg.s14">HC1_state_reg.s14</A> & (((!<A HREF="#G1_CDSACK_">G1_CDSACK_</A>) # (!<A HREF="#HC1_state_reg.s0">HC1_state_reg.s0</A>)))) # (!<A HREF="#HC1_state_reg.s14">HC1_state_reg.s14</A> & (<A HREF="#HC1_state_reg.s25">HC1_state_reg.s25</A> & ((!<A HREF="#G1_CDSACK_">G1_CDSACK_</A>) # (!<A HREF="#HC1_state_reg.s0">HC1_state_reg.s0</A>))));


<P> --HC1L7 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector1~1
<P><A NAME="HC1L7">HC1L7</A> = (<A HREF="#HC1_state_reg.s16">HC1_state_reg.s16</A> & (!<A HREF="#G1_CCPUREQ">G1_CCPUREQ</A> & ((<A HREF="#HC1L30">HC1L30</A>) # (!<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>))));


<P> --HC1_state_reg.s12 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s12
<P><A NAME="HC1_state_reg.s12">HC1_state_reg.s12</A> = DFFEAS(<A HREF="#HC1_state_reg.s20">HC1_state_reg.s20</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L32 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|always1~2
<P><A NAME="HC1L32">HC1L32</A> = (<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & !<A HREF="#G1_CCPUREQ">G1_CCPUREQ</A>);


<P> --HC1L8 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector1~2
<P><A NAME="HC1L8">HC1L8</A> = (<A HREF="#HC1L32">HC1L32</A> & (!<A HREF="#HC1_state_reg.s0">HC1_state_reg.s0</A> & ((<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A>) # (!<A HREF="#HC1L31">HC1L31</A>))));


<P> --HC1L9 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector1~3
<P><A NAME="HC1L9">HC1L9</A> = (!<A HREF="#HC1L6">HC1L6</A> & (!<A HREF="#HC1L7">HC1L7</A> & (!<A HREF="#HC1_state_reg.s12">HC1_state_reg.s12</A> & !<A HREF="#HC1L8">HC1L8</A>)));


<P> --HC1L20 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector25~2
<P><A NAME="HC1L20">HC1L20</A> = (<A HREF="#A1L111">A1L111</A> & <A HREF="#HC1_state_reg.s8">HC1_state_reg.s8</A>);


<P> --HC1L10 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector7~0
<P><A NAME="HC1L10">HC1L10</A> = (<A HREF="#G1_CCPUREQ">G1_CCPUREQ</A> & ((<A HREF="#HC1_state_reg.s16">HC1_state_reg.s16</A>) # (!<A HREF="#HC1_state_reg.s0">HC1_state_reg.s0</A>)));


<P> --AS_O_ is AS_O_
<P><A NAME="AS_O_">AS_O_</A> = DFFEAS(<A HREF="#A1L8">A1L8</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --DS_O_ is DS_O_
<P><A NAME="DS_O_">DS_O_</A> = DFFEAS(<A HREF="#A1L74">A1L74</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --KC1_LD_LATCH[0] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[0]
<P><A NAME="KC1_LD_LATCH[0]">KC1_LD_LATCH[0]</A> = DFFEAS(<A HREF="#WB1_ram_block1a0">WB1_ram_block1a0</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --E1_F2CPUL is CPU_SM:u_CPU_SM|F2CPUL
<P><A NAME="E1_F2CPUL">E1_F2CPUL</A> = DFFEAS(<A HREF="#ZB1L34">ZB1L34</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_S2CPU_o is SCSI_SM:u_SCSI_SM|S2CPU_o
<P><A NAME="G1_S2CPU_o">G1_S2CPU_o</A> = DFFEAS(<A HREF="#HC1L21">HC1L21</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --KC1L10 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[3]~0
<P><A NAME="KC1L10">KC1L10</A> = (<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>);


<P> --PC1L6 is registers:u_registers|addr_decoder:u_addr_decoder|ISTR_RD_~0
<P><A NAME="PC1L6">PC1L6</A> = (<A HREF="#ADDR[2]">ADDR[2]</A> & <A HREF="#ADDR[4]">ADDR[4]</A>);


<P> --KC1L1 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[0]~1
<P><A NAME="KC1L1">KC1L1</A> = (!<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>);


<P> --KC1L2 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[0]~2
<P><A NAME="KC1L2">KC1L2</A> = (<A HREF="#A1L111">A1L111</A> & (<A HREF="#PC1L9">PC1L9</A> & (<A HREF="#PC1L6">PC1L6</A> & <A HREF="#KC1L1">KC1L1</A>)));


<P> --RC1_FE is registers:u_registers|registers_istr:u_registers_istr|FE
<P><A NAME="RC1_FE">RC1_FE</A> = DFFEAS(<A HREF="#RC1L2">RC1L2</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  , <A HREF="#RC1L3">RC1L3</A>,  ,  ,  ,  );


<P> --KC1L3 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[0]~3
<P><A NAME="KC1L3">KC1L3</A> = (<A HREF="#KC1_LD_LATCH[0]">KC1_LD_LATCH[0]</A> & ((<A HREF="#KC1L10">KC1L10</A>) # ((<A HREF="#KC1L2">KC1L2</A> & !<A HREF="#RC1_FE">RC1_FE</A>)))) # (!<A HREF="#KC1_LD_LATCH[0]">KC1_LD_LATCH[0]</A> & (((<A HREF="#KC1L2">KC1L2</A> & !<A HREF="#RC1_FE">RC1_FE</A>))));


<P> --KC1_LD_LATCH[1] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[1]
<P><A NAME="KC1_LD_LATCH[1]">KC1_LD_LATCH[1]</A> = DFFEAS(<A HREF="#WB1_ram_block1a1">WB1_ram_block1a1</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L4 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[1]~4
<P><A NAME="KC1L4">KC1L4</A> = (<A HREF="#A1L111">A1L111</A> & (<A HREF="#PC1L9">PC1L9</A> & (<A HREF="#PC1L2">PC1L2</A> & <A HREF="#KC1L1">KC1L1</A>)));


<P> --KC1L5 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[1]~5
<P><A NAME="KC1L5">KC1L5</A> = (<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & ((<A HREF="#KC1L4">KC1L4</A>) # ((<A HREF="#KC1L10">KC1L10</A> & <A HREF="#KC1_LD_LATCH[1]">KC1_LD_LATCH[1]</A>)))) # (!<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A> & (<A HREF="#KC1L10">KC1L10</A> & (<A HREF="#KC1_LD_LATCH[1]">KC1_LD_LATCH[1]</A>)));


<P> --RC1_FF is registers:u_registers|registers_istr:u_registers_istr|FF
<P><A NAME="RC1_FF">RC1_FF</A> = DFFEAS(<A HREF="#RC1L5">RC1L5</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  , <A HREF="#RC1L3">RC1L3</A>,  ,  ,  ,  );


<P> --PC1L3 is registers:u_registers|addr_decoder:u_addr_decoder|CONTR_RD_~1
<P><A NAME="PC1L3">PC1L3</A> = (<A HREF="#A1L111">A1L111</A> & (<A HREF="#QC1L10">QC1L10</A> & (<A HREF="#PC1L2">PC1L2</A> & !<A HREF="#ADDR[5]">ADDR[5]</A>)));


<P> --KC1L6 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[1]~6
<P><A NAME="KC1L6">KC1L6</A> = (<A HREF="#KC1L5">KC1L5</A>) # ((<A HREF="#KC1L2">KC1L2</A> & (<A HREF="#RC1_FF">RC1_FF</A> & !<A HREF="#PC1L3">PC1L3</A>)));


<P> --KC1_LD_LATCH[2] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[2]
<P><A NAME="KC1_LD_LATCH[2]">KC1_LD_LATCH[2]</A> = DFFEAS(<A HREF="#WB1_ram_block1a2">WB1_ram_block1a2</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L7 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[2]~7
<P><A NAME="KC1L7">KC1L7</A> = (<A HREF="#QC1L11">QC1L11</A> & (<A HREF="#ADDR[2]">ADDR[2]</A> & (<A HREF="#KC1L1">KC1L1</A> & !<A HREF="#ADDR[4]">ADDR[4]</A>)));


<P> --KC1L8 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[2]~8
<P><A NAME="KC1L8">KC1L8</A> = (<A HREF="#A1L111">A1L111</A> & ((<A HREF="#KC1L7">KC1L7</A>) # ((<A HREF="#QC1_CNTR_O[2]">QC1_CNTR_O[2]</A> & <A HREF="#KC1L4">KC1L4</A>)))) # (!<A HREF="#A1L111">A1L111</A> & (((<A HREF="#QC1_CNTR_O[2]">QC1_CNTR_O[2]</A> & <A HREF="#KC1L4">KC1L4</A>))));


<P> --KC1L9 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[2]~9
<P><A NAME="KC1L9">KC1L9</A> = (<A HREF="#KC1L8">KC1L8</A>) # ((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & (<A HREF="#KC1_LD_LATCH[2]">KC1_LD_LATCH[2]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>)));


<P> --KC1_LD_LATCH[3] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[3]
<P><A NAME="KC1_LD_LATCH[3]">KC1_LD_LATCH[3]</A> = DFFEAS(<A HREF="#WB1_ram_block1a3">WB1_ram_block1a3</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L11 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[3]~10
<P><A NAME="KC1L11">KC1L11</A> = (<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & (<A HREF="#KC1_LD_LATCH[3]">KC1_LD_LATCH[3]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_LD_LATCH[4] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[4]
<P><A NAME="KC1_LD_LATCH[4]">KC1_LD_LATCH[4]</A> = DFFEAS(<A HREF="#WB1_ram_block1a4">WB1_ram_block1a4</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L12 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[4]~11
<P><A NAME="KC1L12">KC1L12</A> = (<A HREF="#QC1_CNTR_O[4]">QC1_CNTR_O[4]</A> & ((<A HREF="#KC1L4">KC1L4</A>) # ((<A HREF="#KC1L10">KC1L10</A> & <A HREF="#KC1_LD_LATCH[4]">KC1_LD_LATCH[4]</A>)))) # (!<A HREF="#QC1_CNTR_O[4]">QC1_CNTR_O[4]</A> & (<A HREF="#KC1L10">KC1L10</A> & (<A HREF="#KC1_LD_LATCH[4]">KC1_LD_LATCH[4]</A>)));


<P> --RC1_INT_P is registers:u_registers|registers_istr:u_registers_istr|INT_P
<P><A NAME="RC1_INT_P">RC1_INT_P</A> = DFFEAS(<A HREF="#RC1L10">RC1L10</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  , <A HREF="#RC1L3">RC1L3</A>,  ,  ,  ,  );


<P> --KC1L13 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[4]~12
<P><A NAME="KC1L13">KC1L13</A> = (<A HREF="#KC1L12">KC1L12</A>) # ((<A HREF="#KC1L2">KC1L2</A> & (<A HREF="#RC1_INT_P">RC1_INT_P</A> & !<A HREF="#PC1L3">PC1L3</A>)));


<P> --RC1_INT_F is registers:u_registers|registers_istr:u_registers_istr|INT_F
<P><A NAME="RC1_INT_F">RC1_INT_F</A> = DFFEAS(<A HREF="#RC1L8">RC1L8</A>, !<A HREF="#GC1__clk0">GC1__clk0</A>, <A HREF="#_RST">_RST</A>,  , <A HREF="#RC1L3">RC1L3</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[5] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[5]
<P><A NAME="KC1_LD_LATCH[5]">KC1_LD_LATCH[5]</A> = DFFEAS(<A HREF="#WB1_ram_block1a5">WB1_ram_block1a5</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L14 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[5]~13
<P><A NAME="KC1L14">KC1L14</A> = (<A HREF="#KC1L10">KC1L10</A> & ((<A HREF="#KC1_LD_LATCH[5]">KC1_LD_LATCH[5]</A>) # ((<A HREF="#KC1L2">KC1L2</A> & <A HREF="#RC1_INT_F">RC1_INT_F</A>)))) # (!<A HREF="#KC1L10">KC1L10</A> & (<A HREF="#KC1L2">KC1L2</A> & (<A HREF="#RC1_INT_F">RC1_INT_F</A>)));


<P> --KC1_LD_LATCH[6] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[6]
<P><A NAME="KC1_LD_LATCH[6]">KC1_LD_LATCH[6]</A> = DFFEAS(<A HREF="#WB1_ram_block1a6">WB1_ram_block1a6</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L15 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[6]~14
<P><A NAME="KC1L15">KC1L15</A> = (<A HREF="#KC1L10">KC1L10</A> & ((<A HREF="#KC1_LD_LATCH[6]">KC1_LD_LATCH[6]</A>) # ((<A HREF="#KC1L2">KC1L2</A> & <A HREF="#RC1_INT_F">RC1_INT_F</A>)))) # (!<A HREF="#KC1L10">KC1L10</A> & (<A HREF="#KC1L2">KC1L2</A> & (<A HREF="#RC1_INT_F">RC1_INT_F</A>)));


<P> --KC1_LD_LATCH[7] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[7]
<P><A NAME="KC1_LD_LATCH[7]">KC1_LD_LATCH[7]</A> = DFFEAS(<A HREF="#WB1_ram_block1a7">WB1_ram_block1a7</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L16 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[7]~15
<P><A NAME="KC1L16">KC1L16</A> = (<A HREF="#KC1L10">KC1L10</A> & ((<A HREF="#KC1_LD_LATCH[7]">KC1_LD_LATCH[7]</A>) # ((<A HREF="#KC1L2">KC1L2</A> & <A HREF="#RC1_INT_F">RC1_INT_F</A>)))) # (!<A HREF="#KC1L10">KC1L10</A> & (<A HREF="#KC1L2">KC1L2</A> & (<A HREF="#RC1_INT_F">RC1_INT_F</A>)));


<P> --LC1_SCSI_DATA_LATCHED[0] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[0]
<P><A NAME="LC1_SCSI_DATA_LATCHED[0]">LC1_SCSI_DATA_LATCHED[0]</A> = DFFEAS(<A HREF="#A1L87">A1L87</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>,  , <A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[8] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[8]
<P><A NAME="KC1_LD_LATCH[8]">KC1_LD_LATCH[8]</A> = DFFEAS(<A HREF="#WB1_ram_block1a8">WB1_ram_block1a8</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L17 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[8]~16
<P><A NAME="KC1L17">KC1L17</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[0]">LC1_SCSI_DATA_LATCHED[0]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & <A HREF="#KC1_LD_LATCH[8]">KC1_LD_LATCH[8]</A>))));


<P> --KC1L18 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[8]~17
<P><A NAME="KC1L18">KC1L18</A> = (<A HREF="#KC1L17">KC1L17</A>) # ((<A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A> & (<A HREF="#KC1L1">KC1L1</A> & <A HREF="#PC1L3">PC1L3</A>)));


<P> --LC1_SCSI_DATA_LATCHED[1] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[1]
<P><A NAME="LC1_SCSI_DATA_LATCHED[1]">LC1_SCSI_DATA_LATCHED[1]</A> = DFFEAS(<A HREF="#A1L89">A1L89</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>,  , <A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[9] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[9]
<P><A NAME="KC1_LD_LATCH[9]">KC1_LD_LATCH[9]</A> = DFFEAS(<A HREF="#WB1_ram_block1a9">WB1_ram_block1a9</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L19 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[9]~18
<P><A NAME="KC1L19">KC1L19</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[1]">LC1_SCSI_DATA_LATCHED[1]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & <A HREF="#KC1_LD_LATCH[9]">KC1_LD_LATCH[9]</A>))));


<P> --LC1_SCSI_DATA_LATCHED[2] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[2]
<P><A NAME="LC1_SCSI_DATA_LATCHED[2]">LC1_SCSI_DATA_LATCHED[2]</A> = DFFEAS(<A HREF="#A1L91">A1L91</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>,  , <A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[10] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[10]
<P><A NAME="KC1_LD_LATCH[10]">KC1_LD_LATCH[10]</A> = DFFEAS(<A HREF="#WB1_ram_block1a10">WB1_ram_block1a10</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L20 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[10]~19
<P><A NAME="KC1L20">KC1L20</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[2]">LC1_SCSI_DATA_LATCHED[2]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & <A HREF="#KC1_LD_LATCH[10]">KC1_LD_LATCH[10]</A>))));


<P> --LC1_SCSI_DATA_LATCHED[3] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[3]
<P><A NAME="LC1_SCSI_DATA_LATCHED[3]">LC1_SCSI_DATA_LATCHED[3]</A> = DFFEAS(<A HREF="#A1L93">A1L93</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>,  , <A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[11] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[11]
<P><A NAME="KC1_LD_LATCH[11]">KC1_LD_LATCH[11]</A> = DFFEAS(<A HREF="#WB1_ram_block1a11">WB1_ram_block1a11</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L21 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[11]~20
<P><A NAME="KC1L21">KC1L21</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[3]">LC1_SCSI_DATA_LATCHED[3]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & <A HREF="#KC1_LD_LATCH[11]">KC1_LD_LATCH[11]</A>))));


<P> --LC1_SCSI_DATA_LATCHED[4] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[4]
<P><A NAME="LC1_SCSI_DATA_LATCHED[4]">LC1_SCSI_DATA_LATCHED[4]</A> = DFFEAS(<A HREF="#A1L95">A1L95</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>,  , <A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[12] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[12]
<P><A NAME="KC1_LD_LATCH[12]">KC1_LD_LATCH[12]</A> = DFFEAS(<A HREF="#WB1_ram_block1a12">WB1_ram_block1a12</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L22 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[12]~21
<P><A NAME="KC1L22">KC1L22</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[4]">LC1_SCSI_DATA_LATCHED[4]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & <A HREF="#KC1_LD_LATCH[12]">KC1_LD_LATCH[12]</A>))));


<P> --LC1_SCSI_DATA_LATCHED[5] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[5]
<P><A NAME="LC1_SCSI_DATA_LATCHED[5]">LC1_SCSI_DATA_LATCHED[5]</A> = DFFEAS(<A HREF="#A1L97">A1L97</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>,  , <A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[13] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[13]
<P><A NAME="KC1_LD_LATCH[13]">KC1_LD_LATCH[13]</A> = DFFEAS(<A HREF="#WB1_ram_block1a13">WB1_ram_block1a13</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L23 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[13]~22
<P><A NAME="KC1L23">KC1L23</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[5]">LC1_SCSI_DATA_LATCHED[5]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & <A HREF="#KC1_LD_LATCH[13]">KC1_LD_LATCH[13]</A>))));


<P> --LC1_SCSI_DATA_LATCHED[6] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[6]
<P><A NAME="LC1_SCSI_DATA_LATCHED[6]">LC1_SCSI_DATA_LATCHED[6]</A> = DFFEAS(<A HREF="#A1L99">A1L99</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>,  , <A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[14] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[14]
<P><A NAME="KC1_LD_LATCH[14]">KC1_LD_LATCH[14]</A> = DFFEAS(<A HREF="#WB1_ram_block1a14">WB1_ram_block1a14</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L24 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[14]~23
<P><A NAME="KC1L24">KC1L24</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[6]">LC1_SCSI_DATA_LATCHED[6]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & <A HREF="#KC1_LD_LATCH[14]">KC1_LD_LATCH[14]</A>))));


<P> --LC1_SCSI_DATA_LATCHED[7] is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_LATCHED[7]
<P><A NAME="LC1_SCSI_DATA_LATCHED[7]">LC1_SCSI_DATA_LATCHED[7]</A> = DFFEAS(<A HREF="#A1L101">A1L101</A>, !<A HREF="#SCLK">SCLK</A>, <A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>,  , <A HREF="#G1_nLS2CPU">G1_nLS2CPU</A>,  ,  ,  ,  );


<P> --KC1_LD_LATCH[15] is datapath:u_datapath|datapath_output:u_datapath_output|LD_LATCH[15]
<P><A NAME="KC1_LD_LATCH[15]">KC1_LD_LATCH[15]</A> = DFFEAS(<A HREF="#WB1_ram_block1a15">WB1_ram_block1a15</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L25 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[15]~24
<P><A NAME="KC1L25">KC1L25</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[7]">LC1_SCSI_DATA_LATCHED[7]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUL">E1_F2CPUL</A> & <A HREF="#KC1_LD_LATCH[15]">KC1_LD_LATCH[15]</A>))));


<P> --KC1_UD_LATCH[0] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[0]
<P><A NAME="KC1_UD_LATCH[0]">KC1_UD_LATCH[0]</A> = DFFEAS(<A HREF="#KC1L76">KC1L76</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --E1_F2CPUH is CPU_SM:u_CPU_SM|F2CPUH
<P><A NAME="E1_F2CPUH">E1_F2CPUH</A> = DFFEAS(<A HREF="#ZB1L29">ZB1L29</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --KC1L26 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[16]~25
<P><A NAME="KC1L26">KC1L26</A> = (<A HREF="#KC1_UD_LATCH[0]">KC1_UD_LATCH[0]</A> & (<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_UD_LATCH[1] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[1]
<P><A NAME="KC1_UD_LATCH[1]">KC1_UD_LATCH[1]</A> = DFFEAS(<A HREF="#KC1L77">KC1L77</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L27 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[17]~26
<P><A NAME="KC1L27">KC1L27</A> = (<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & (<A HREF="#KC1_UD_LATCH[1]">KC1_UD_LATCH[1]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_UD_LATCH[2] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[2]
<P><A NAME="KC1_UD_LATCH[2]">KC1_UD_LATCH[2]</A> = DFFEAS(<A HREF="#KC1L78">KC1L78</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L28 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[18]~27
<P><A NAME="KC1L28">KC1L28</A> = (<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & (<A HREF="#KC1_UD_LATCH[2]">KC1_UD_LATCH[2]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_UD_LATCH[3] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[3]
<P><A NAME="KC1_UD_LATCH[3]">KC1_UD_LATCH[3]</A> = DFFEAS(<A HREF="#KC1L79">KC1L79</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L29 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[19]~28
<P><A NAME="KC1L29">KC1L29</A> = (<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & (<A HREF="#KC1_UD_LATCH[3]">KC1_UD_LATCH[3]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_UD_LATCH[4] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[4]
<P><A NAME="KC1_UD_LATCH[4]">KC1_UD_LATCH[4]</A> = DFFEAS(<A HREF="#KC1L80">KC1L80</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L30 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[20]~29
<P><A NAME="KC1L30">KC1L30</A> = (<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & (<A HREF="#KC1_UD_LATCH[4]">KC1_UD_LATCH[4]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_UD_LATCH[5] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[5]
<P><A NAME="KC1_UD_LATCH[5]">KC1_UD_LATCH[5]</A> = DFFEAS(<A HREF="#KC1L81">KC1L81</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L31 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[21]~30
<P><A NAME="KC1L31">KC1L31</A> = (<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & (<A HREF="#KC1_UD_LATCH[5]">KC1_UD_LATCH[5]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_UD_LATCH[6] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[6]
<P><A NAME="KC1_UD_LATCH[6]">KC1_UD_LATCH[6]</A> = DFFEAS(<A HREF="#KC1L82">KC1L82</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L32 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[22]~31
<P><A NAME="KC1L32">KC1L32</A> = (<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & (<A HREF="#KC1_UD_LATCH[6]">KC1_UD_LATCH[6]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_UD_LATCH[7] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[7]
<P><A NAME="KC1_UD_LATCH[7]">KC1_UD_LATCH[7]</A> = DFFEAS(<A HREF="#KC1L83">KC1L83</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L33 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[23]~32
<P><A NAME="KC1L33">KC1L33</A> = (<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & (<A HREF="#KC1_UD_LATCH[7]">KC1_UD_LATCH[7]</A> & !<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A>));


<P> --KC1_UD_LATCH[8] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[8]
<P><A NAME="KC1_UD_LATCH[8]">KC1_UD_LATCH[8]</A> = DFFEAS(<A HREF="#KC1L84">KC1L84</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L34 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[24]~33
<P><A NAME="KC1L34">KC1L34</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[0]">LC1_SCSI_DATA_LATCHED[0]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & <A HREF="#KC1_UD_LATCH[8]">KC1_UD_LATCH[8]</A>))));


<P> --KC1_UD_LATCH[9] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[9]
<P><A NAME="KC1_UD_LATCH[9]">KC1_UD_LATCH[9]</A> = DFFEAS(<A HREF="#KC1L85">KC1L85</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L35 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[25]~34
<P><A NAME="KC1L35">KC1L35</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[1]">LC1_SCSI_DATA_LATCHED[1]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & <A HREF="#KC1_UD_LATCH[9]">KC1_UD_LATCH[9]</A>))));


<P> --KC1_UD_LATCH[10] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[10]
<P><A NAME="KC1_UD_LATCH[10]">KC1_UD_LATCH[10]</A> = DFFEAS(<A HREF="#KC1L86">KC1L86</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L36 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[26]~35
<P><A NAME="KC1L36">KC1L36</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[2]">LC1_SCSI_DATA_LATCHED[2]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & <A HREF="#KC1_UD_LATCH[10]">KC1_UD_LATCH[10]</A>))));


<P> --KC1_UD_LATCH[11] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[11]
<P><A NAME="KC1_UD_LATCH[11]">KC1_UD_LATCH[11]</A> = DFFEAS(<A HREF="#KC1L87">KC1L87</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L37 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[27]~36
<P><A NAME="KC1L37">KC1L37</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[3]">LC1_SCSI_DATA_LATCHED[3]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & <A HREF="#KC1_UD_LATCH[11]">KC1_UD_LATCH[11]</A>))));


<P> --KC1_UD_LATCH[12] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[12]
<P><A NAME="KC1_UD_LATCH[12]">KC1_UD_LATCH[12]</A> = DFFEAS(<A HREF="#KC1L88">KC1L88</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L38 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[28]~37
<P><A NAME="KC1L38">KC1L38</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[4]">LC1_SCSI_DATA_LATCHED[4]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & <A HREF="#KC1_UD_LATCH[12]">KC1_UD_LATCH[12]</A>))));


<P> --KC1_UD_LATCH[13] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[13]
<P><A NAME="KC1_UD_LATCH[13]">KC1_UD_LATCH[13]</A> = DFFEAS(<A HREF="#KC1L89">KC1L89</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L39 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[29]~38
<P><A NAME="KC1L39">KC1L39</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[5]">LC1_SCSI_DATA_LATCHED[5]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & <A HREF="#KC1_UD_LATCH[13]">KC1_UD_LATCH[13]</A>))));


<P> --KC1_UD_LATCH[14] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[14]
<P><A NAME="KC1_UD_LATCH[14]">KC1_UD_LATCH[14]</A> = DFFEAS(<A HREF="#KC1L90">KC1L90</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L40 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[30]~39
<P><A NAME="KC1L40">KC1L40</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[6]">LC1_SCSI_DATA_LATCHED[6]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & <A HREF="#KC1_UD_LATCH[14]">KC1_UD_LATCH[14]</A>))));


<P> --KC1_UD_LATCH[15] is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH[15]
<P><A NAME="KC1_UD_LATCH[15]">KC1_UD_LATCH[15]</A> = DFFEAS(<A HREF="#KC1L91">KC1L91</A>, <A HREF="#GC1__clk2">GC1__clk2</A>,  ,  , <A HREF="#E1_PAS">E1_PAS</A>,  ,  ,  ,  );


<P> --KC1L41 is datapath:u_datapath|datapath_output:u_datapath_output|DATA[31]~40
<P><A NAME="KC1L41">KC1L41</A> = (<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (<A HREF="#LC1_SCSI_DATA_LATCHED[7]">LC1_SCSI_DATA_LATCHED[7]</A>)) # (!<A HREF="#G1_S2CPU_o">G1_S2CPU_o</A> & (((<A HREF="#E1_F2CPUH">E1_F2CPUH</A> & <A HREF="#KC1_UD_LATCH[15]">KC1_UD_LATCH[15]</A>))));


<P> --E1_DIEH is CPU_SM:u_CPU_SM|DIEH
<P><A NAME="E1_DIEH">E1_DIEH</A> = DFFEAS(<A HREF="#ZB1L11">ZB1L11</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --LC1L10 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[0]~0
<P><A NAME="LC1L10">LC1L10</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L36">A1L36</A> & (<A HREF="#E1_DIEH">E1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L12">A1L12</A>))));


<P> --G1_CPU2S_o is SCSI_SM:u_SCSI_SM|CPU2S_o
<P><A NAME="G1_CPU2S_o">G1_CPU2S_o</A> = DFFEAS(<A HREF="#HC1L23">HC1L23</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_F2S_o is SCSI_SM:u_SCSI_SM|F2S_o
<P><A NAME="G1_F2S_o">G1_F2S_o</A> = DFFEAS(<A HREF="#HC1_WideOr22">HC1_WideOr22</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --LC1L11 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[0]~1
<P><A NAME="LC1L11">LC1L11</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#WB1_ram_block1a8">WB1_ram_block1a8</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & ((<A HREF="#WB1_ram_block1a24">WB1_ram_block1a24</A>)))));


<P> --LC1L12 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[0]~2
<P><A NAME="LC1L12">LC1L12</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#LC1L11">LC1L11</A> & (<A HREF="#WB1_ram_block1a0">WB1_ram_block1a0</A>)) # (!<A HREF="#LC1L11">LC1L11</A> & ((<A HREF="#WB1_ram_block1a16">WB1_ram_block1a16</A>))))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#LC1L11">LC1L11</A>))));


<P> --LC1L13 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[0]~3
<P><A NAME="LC1L13">LC1L13</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (<A HREF="#LC1L10">LC1L10</A> & (!<A HREF="#G1_F2S_o">G1_F2S_o</A>))) # (!<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (((<A HREF="#G1_F2S_o">G1_F2S_o</A> & <A HREF="#LC1L12">LC1L12</A>))));


<P> --LC1L14 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[1]~4
<P><A NAME="LC1L14">LC1L14</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L38">A1L38</A> & (<A HREF="#E1_DIEH">E1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L14">A1L14</A>))));


<P> --LC1L15 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[1]~5
<P><A NAME="LC1L15">LC1L15</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#WB1_ram_block1a9">WB1_ram_block1a9</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & ((<A HREF="#WB1_ram_block1a25">WB1_ram_block1a25</A>)))));


<P> --LC1L16 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[1]~6
<P><A NAME="LC1L16">LC1L16</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#LC1L15">LC1L15</A> & (<A HREF="#WB1_ram_block1a1">WB1_ram_block1a1</A>)) # (!<A HREF="#LC1L15">LC1L15</A> & ((<A HREF="#WB1_ram_block1a17">WB1_ram_block1a17</A>))))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#LC1L15">LC1L15</A>))));


<P> --LC1L17 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[1]~7
<P><A NAME="LC1L17">LC1L17</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (<A HREF="#LC1L14">LC1L14</A> & (!<A HREF="#G1_F2S_o">G1_F2S_o</A>))) # (!<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (((<A HREF="#G1_F2S_o">G1_F2S_o</A> & <A HREF="#LC1L16">LC1L16</A>))));


<P> --LC1L18 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[2]~8
<P><A NAME="LC1L18">LC1L18</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L40">A1L40</A> & (<A HREF="#E1_DIEH">E1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L16">A1L16</A>))));


<P> --LC1L19 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[2]~9
<P><A NAME="LC1L19">LC1L19</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#WB1_ram_block1a10">WB1_ram_block1a10</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & ((<A HREF="#WB1_ram_block1a26">WB1_ram_block1a26</A>)))));


<P> --LC1L20 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[2]~10
<P><A NAME="LC1L20">LC1L20</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#LC1L19">LC1L19</A> & (<A HREF="#WB1_ram_block1a2">WB1_ram_block1a2</A>)) # (!<A HREF="#LC1L19">LC1L19</A> & ((<A HREF="#WB1_ram_block1a18">WB1_ram_block1a18</A>))))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#LC1L19">LC1L19</A>))));


<P> --LC1L21 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[2]~11
<P><A NAME="LC1L21">LC1L21</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (<A HREF="#LC1L18">LC1L18</A> & (!<A HREF="#G1_F2S_o">G1_F2S_o</A>))) # (!<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (((<A HREF="#G1_F2S_o">G1_F2S_o</A> & <A HREF="#LC1L20">LC1L20</A>))));


<P> --LC1L22 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[3]~12
<P><A NAME="LC1L22">LC1L22</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L42">A1L42</A> & (<A HREF="#E1_DIEH">E1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L18">A1L18</A>))));


<P> --LC1L23 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[3]~13
<P><A NAME="LC1L23">LC1L23</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#WB1_ram_block1a11">WB1_ram_block1a11</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & ((<A HREF="#WB1_ram_block1a27">WB1_ram_block1a27</A>)))));


<P> --LC1L24 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[3]~14
<P><A NAME="LC1L24">LC1L24</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#LC1L23">LC1L23</A> & (<A HREF="#WB1_ram_block1a3">WB1_ram_block1a3</A>)) # (!<A HREF="#LC1L23">LC1L23</A> & ((<A HREF="#WB1_ram_block1a19">WB1_ram_block1a19</A>))))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#LC1L23">LC1L23</A>))));


<P> --LC1L25 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[3]~15
<P><A NAME="LC1L25">LC1L25</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (<A HREF="#LC1L22">LC1L22</A> & (!<A HREF="#G1_F2S_o">G1_F2S_o</A>))) # (!<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (((<A HREF="#G1_F2S_o">G1_F2S_o</A> & <A HREF="#LC1L24">LC1L24</A>))));


<P> --LC1L26 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[4]~16
<P><A NAME="LC1L26">LC1L26</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L44">A1L44</A> & (<A HREF="#E1_DIEH">E1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L20">A1L20</A>))));


<P> --LC1L27 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[4]~17
<P><A NAME="LC1L27">LC1L27</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#WB1_ram_block1a12">WB1_ram_block1a12</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & ((<A HREF="#WB1_ram_block1a28">WB1_ram_block1a28</A>)))));


<P> --LC1L28 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[4]~18
<P><A NAME="LC1L28">LC1L28</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#LC1L27">LC1L27</A> & (<A HREF="#WB1_ram_block1a4">WB1_ram_block1a4</A>)) # (!<A HREF="#LC1L27">LC1L27</A> & ((<A HREF="#WB1_ram_block1a20">WB1_ram_block1a20</A>))))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#LC1L27">LC1L27</A>))));


<P> --LC1L29 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[4]~19
<P><A NAME="LC1L29">LC1L29</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (<A HREF="#LC1L26">LC1L26</A> & (!<A HREF="#G1_F2S_o">G1_F2S_o</A>))) # (!<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (((<A HREF="#G1_F2S_o">G1_F2S_o</A> & <A HREF="#LC1L28">LC1L28</A>))));


<P> --LC1L30 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[5]~20
<P><A NAME="LC1L30">LC1L30</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L46">A1L46</A> & (<A HREF="#E1_DIEH">E1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L22">A1L22</A>))));


<P> --LC1L31 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[5]~21
<P><A NAME="LC1L31">LC1L31</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#WB1_ram_block1a13">WB1_ram_block1a13</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & ((<A HREF="#WB1_ram_block1a29">WB1_ram_block1a29</A>)))));


<P> --LC1L32 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[5]~22
<P><A NAME="LC1L32">LC1L32</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#LC1L31">LC1L31</A> & (<A HREF="#WB1_ram_block1a5">WB1_ram_block1a5</A>)) # (!<A HREF="#LC1L31">LC1L31</A> & ((<A HREF="#WB1_ram_block1a21">WB1_ram_block1a21</A>))))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#LC1L31">LC1L31</A>))));


<P> --LC1L33 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[5]~23
<P><A NAME="LC1L33">LC1L33</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (<A HREF="#LC1L30">LC1L30</A> & (!<A HREF="#G1_F2S_o">G1_F2S_o</A>))) # (!<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (((<A HREF="#G1_F2S_o">G1_F2S_o</A> & <A HREF="#LC1L32">LC1L32</A>))));


<P> --LC1L34 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[6]~24
<P><A NAME="LC1L34">LC1L34</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L48">A1L48</A> & (<A HREF="#E1_DIEH">E1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L24">A1L24</A>))));


<P> --LC1L35 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[6]~25
<P><A NAME="LC1L35">LC1L35</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#WB1_ram_block1a14">WB1_ram_block1a14</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & ((<A HREF="#WB1_ram_block1a30">WB1_ram_block1a30</A>)))));


<P> --LC1L36 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[6]~26
<P><A NAME="LC1L36">LC1L36</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#LC1L35">LC1L35</A> & (<A HREF="#WB1_ram_block1a6">WB1_ram_block1a6</A>)) # (!<A HREF="#LC1L35">LC1L35</A> & ((<A HREF="#WB1_ram_block1a22">WB1_ram_block1a22</A>))))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#LC1L35">LC1L35</A>))));


<P> --LC1L37 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[6]~27
<P><A NAME="LC1L37">LC1L37</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (<A HREF="#LC1L34">LC1L34</A> & (!<A HREF="#G1_F2S_o">G1_F2S_o</A>))) # (!<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (((<A HREF="#G1_F2S_o">G1_F2S_o</A> & <A HREF="#LC1L36">LC1L36</A>))));


<P> --LC1L38 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[7]~28
<P><A NAME="LC1L38">LC1L38</A> = (<A HREF="#ADDR[3]">ADDR[3]</A> & (<A HREF="#A1L50">A1L50</A> & (<A HREF="#E1_DIEH">E1_DIEH</A>))) # (!<A HREF="#ADDR[3]">ADDR[3]</A> & (((<A HREF="#A1L26">A1L26</A>))));


<P> --LC1L39 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[7]~29
<P><A NAME="LC1L39">LC1L39</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#WB1_ram_block1a15">WB1_ram_block1a15</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & ((<A HREF="#WB1_ram_block1a31">WB1_ram_block1a31</A>)))));


<P> --LC1L40 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[7]~30
<P><A NAME="LC1L40">LC1L40</A> = (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & ((<A HREF="#LC1L39">LC1L39</A> & (<A HREF="#WB1_ram_block1a7">WB1_ram_block1a7</A>)) # (!<A HREF="#LC1L39">LC1L39</A> & ((<A HREF="#WB1_ram_block1a23">WB1_ram_block1a23</A>))))) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (((<A HREF="#LC1L39">LC1L39</A>))));


<P> --LC1L41 is datapath:u_datapath|datapath_scsi:u_datapath_scsi|SCSI_DATA_OUT[7]~31
<P><A NAME="LC1L41">LC1L41</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (<A HREF="#LC1L38">LC1L38</A> & (!<A HREF="#G1_F2S_o">G1_F2S_o</A>))) # (!<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A> & (((<A HREF="#G1_F2S_o">G1_F2S_o</A> & <A HREF="#LC1L40">LC1L40</A>))));


<P> --J1L2 is registers:u_registers|A1~0
<P><A NAME="J1L2">J1L2</A> = (<A HREF="#PC1_h_0C">PC1_h_0C</A> & ((<A HREF="#A1L111">A1L111</A> & (<A HREF="#J1_A1">J1_A1</A>)) # (!<A HREF="#A1L111">A1L111</A> & ((<A HREF="#A1L53">A1L53</A>))))) # (!<A HREF="#PC1_h_0C">PC1_h_0C</A> & (<A HREF="#J1_A1">J1_A1</A>));


<P> --ZB1L79 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nSTOPFLUSH_d~0
<P><A NAME="ZB1L79">ZB1L79</A> = (<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#ZB1L16">ZB1L16</A> & !<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>)));


<P> --YB1L2 is CPU_SM:u_CPU_SM|CPU_SM_inputs:u_CPU_SM_inputs|E[0]~20
<P><A NAME="YB1L2">YB1L2</A> = (<A HREF="#E1_FLUSHFIFO">E1_FLUSHFIFO</A> & (!<A HREF="#E1L24">E1L24</A> & (!<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A> & !<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A>)));


<P> --ZB1L80 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nSTOPFLUSH_d~1
<P><A NAME="ZB1L80">ZB1L80</A> = (<A HREF="#ZB1L79">ZB1L79</A>) # ((<A HREF="#YB1L25">YB1L25</A>) # ((<A HREF="#YB1L1">YB1L1</A> & <A HREF="#YB1L2">YB1L2</A>)));


<P> --HC1_INCBO is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|INCBO
<P><A NAME="HC1_INCBO">HC1_INCBO</A> = (<A HREF="#HC1_state_reg.s1">HC1_state_reg.s1</A>) # (<A HREF="#HC1_state_reg.s12">HC1_state_reg.s12</A>);


<P> --QC1L12 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~6
<P><A NAME="QC1L12">QC1L12</A> = (<A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A> & (((!<A HREF="#PC1L6">PC1L6</A>) # (!<A HREF="#QC1L10">QC1L10</A>)) # (!<A HREF="#ADDR[5]">ADDR[5]</A>)));


<P> --QC1L13 is registers:u_registers|registers_cntr:u_registers_cntr|CNTR_O[8]~7
<P><A NAME="QC1L13">QC1L13</A> = (<A HREF="#QC1L12">QC1L12</A>) # ((<A HREF="#ADDR[4]">ADDR[4]</A> & (<A HREF="#QC1L11">QC1L11</A> & !<A HREF="#ADDR[2]">ADDR[2]</A>)));


<P> --TB1L35 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~0
<P><A NAME="TB1L35">TB1L35</A> = (<A HREF="#E1_INCFIFO">E1_INCFIFO</A> & ((<A HREF="#TB1_UP[6]">TB1_UP[6]</A>) # (<A HREF="#TB1_DOWN[0]">TB1_DOWN[0]</A>)));


<P> --TB1L36 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~1
<P><A NAME="TB1L36">TB1L36</A> = (<A HREF="#E1_INCFIFO">E1_INCFIFO</A>) # ((<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & ((!<A HREF="#TB1L21">TB1L21</A>) # (!<A HREF="#TB1L20">TB1L20</A>))));


<P> --TB1L37 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~2
<P><A NAME="TB1L37">TB1L37</A> = (<A HREF="#E1_INCFIFO">E1_INCFIFO</A> & ((<A HREF="#TB1_UP[5]">TB1_UP[5]</A>) # (<A HREF="#TB1_DOWN[1]">TB1_DOWN[1]</A>)));


<P> --TB1L38 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~3
<P><A NAME="TB1L38">TB1L38</A> = (<A HREF="#E1_INCFIFO">E1_INCFIFO</A> & ((<A HREF="#TB1_UP[4]">TB1_UP[4]</A>) # (<A HREF="#TB1_DOWN[2]">TB1_DOWN[2]</A>)));


<P> --TB1L39 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~4
<P><A NAME="TB1L39">TB1L39</A> = (<A HREF="#E1_INCFIFO">E1_INCFIFO</A> & ((<A HREF="#TB1_UP[3]">TB1_UP[3]</A>) # (<A HREF="#TB1_DOWN[3]">TB1_DOWN[3]</A>)));


<P> --TB1L40 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~5
<P><A NAME="TB1L40">TB1L40</A> = (<A HREF="#E1_INCFIFO">E1_INCFIFO</A> & ((<A HREF="#TB1_UP[2]">TB1_UP[2]</A>) # (<A HREF="#TB1_DOWN[4]">TB1_DOWN[4]</A>)));


<P> --TB1L41 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~6
<P><A NAME="TB1L41">TB1L41</A> = (<A HREF="#E1_INCFIFO">E1_INCFIFO</A> & ((<A HREF="#TB1_UP[1]">TB1_UP[1]</A>) # (<A HREF="#TB1_DOWN[5]">TB1_DOWN[5]</A>)));


<P> --TB1L42 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|UP~7
<P><A NAME="TB1L42">TB1L42</A> = (<A HREF="#E1_INCFIFO">E1_INCFIFO</A> & ((<A HREF="#TB1_UP[0]">TB1_UP[0]</A>) # (<A HREF="#TB1_DOWN[6]">TB1_DOWN[6]</A>)));


<P> --TB1L15 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[6]~0
<P><A NAME="TB1L15">TB1L15</A> = (<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (((<A HREF="#TB1_UP[1]">TB1_UP[1]</A>) # (<A HREF="#TB1_DOWN[5]">TB1_DOWN[5]</A>)))) # (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (<A HREF="#TB1_DOWN[6]">TB1_DOWN[6]</A>));


<P> --TB1L13 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[5]~1
<P><A NAME="TB1L13">TB1L13</A> = (<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (((<A HREF="#TB1_UP[2]">TB1_UP[2]</A>) # (<A HREF="#TB1_DOWN[4]">TB1_DOWN[4]</A>)))) # (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (<A HREF="#TB1_DOWN[5]">TB1_DOWN[5]</A>));


<P> --TB1L11 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[4]~2
<P><A NAME="TB1L11">TB1L11</A> = (<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (((<A HREF="#TB1_UP[3]">TB1_UP[3]</A>) # (<A HREF="#TB1_DOWN[3]">TB1_DOWN[3]</A>)))) # (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (<A HREF="#TB1_DOWN[4]">TB1_DOWN[4]</A>));


<P> --TB1L9 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[3]~3
<P><A NAME="TB1L9">TB1L9</A> = (<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (((<A HREF="#TB1_UP[4]">TB1_UP[4]</A>) # (<A HREF="#TB1_DOWN[2]">TB1_DOWN[2]</A>)))) # (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (<A HREF="#TB1_DOWN[3]">TB1_DOWN[3]</A>));


<P> --TB1L7 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[2]~4
<P><A NAME="TB1L7">TB1L7</A> = (<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (((<A HREF="#TB1_UP[5]">TB1_UP[5]</A>) # (<A HREF="#TB1_DOWN[1]">TB1_DOWN[1]</A>)))) # (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (<A HREF="#TB1_DOWN[2]">TB1_DOWN[2]</A>));


<P> --TB1L5 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[1]~5
<P><A NAME="TB1L5">TB1L5</A> = (<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (((<A HREF="#TB1_UP[6]">TB1_UP[6]</A>) # (<A HREF="#TB1_DOWN[0]">TB1_DOWN[0]</A>)))) # (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (<A HREF="#TB1_DOWN[1]">TB1_DOWN[1]</A>));


<P> --TB1L3 is fifo:int_fifo|fifo__full_empty_ctr:u_full_empty_ctr|DOWN[0]~6
<P><A NAME="TB1L3">TB1L3</A> = (<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & (<A HREF="#TB1_UP[7]">TB1_UP[7]</A>)) # (!<A HREF="#E1_DECFIFO">E1_DECFIFO</A> & ((<A HREF="#TB1_DOWN[0]">TB1_DOWN[0]</A>)));


<P> --HC1L15 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector23~0
<P><A NAME="HC1L15">HC1L15</A> = (<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & <A HREF="#HC1_state_reg.s1">HC1_state_reg.s1</A>));


<P> --ZB1L35 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|FF~0
<P><A NAME="ZB1L35">ZB1L35</A> = (<A HREF="#ZB1L15">ZB1L15</A> & ((<A HREF="#E1_STATE[1]">E1_STATE[1]</A>) # ((!<A HREF="#DSACK_I_[0]">DSACK_I_[0]</A>) # (!<A HREF="#_BERR">_BERR</A>))));


<P> --ZB1L36 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|FF~1
<P><A NAME="ZB1L36">ZB1L36</A> = (<A HREF="#EC1L1">EC1L1</A> & ((<A HREF="#ZB1L35">ZB1L35</A>) # ((!<A HREF="#_STERM">_STERM</A> & !<A HREF="#EC1L14">EC1L14</A>)))) # (!<A HREF="#EC1L1">EC1L1</A> & (((!<A HREF="#_STERM">_STERM</A> & !<A HREF="#EC1L14">EC1L14</A>))));


<P> --ZB1L39 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|INCFIFO_d~2
<P><A NAME="ZB1L39">ZB1L39</A> = (<A HREF="#ZB1L37">ZB1L37</A>) # (((<A HREF="#G1_RIFIFO_o">G1_RIFIFO_o</A> & !<A HREF="#ZB1L36">ZB1L36</A>)) # (!<A HREF="#ZB1L38">ZB1L38</A>));


<P> --ZB1L7 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DECFIFO_d~0
<P><A NAME="ZB1L7">ZB1L7</A> = (<A HREF="#ZB1L36">ZB1L36</A>) # ((<A HREF="#G1_RDFIFO_o">G1_RDFIFO_o</A> & (<A HREF="#ZB1L38">ZB1L38</A> & !<A HREF="#ZB1L37">ZB1L37</A>)));


<P> --HC1L24 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector29~0
<P><A NAME="HC1L24">HC1L24</A> = (<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & <A HREF="#HC1_state_reg.s12">HC1_state_reg.s12</A>));


<P> --HC1_state_reg.s22 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s22
<P><A NAME="HC1_state_reg.s22">HC1_state_reg.s22</A> = DFFEAS(<A HREF="#HC1_state_reg.s6">HC1_state_reg.s6</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L11 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector11~0
<P><A NAME="HC1L11">HC1L11</A> = (<A HREF="#HC1_state_reg.s22">HC1_state_reg.s22</A>) # ((<A HREF="#HC1_state_reg.s14">HC1_state_reg.s14</A> & <A HREF="#G1_CDSACK_">G1_CDSACK_</A>));


<P> --HC1_state_reg.s9 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|state_reg.s9
<P><A NAME="HC1_state_reg.s9">HC1_state_reg.s9</A> = DFFEAS(<A HREF="#HC1_state_reg.s19">HC1_state_reg.s19</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --HC1L14 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector19~0
<P><A NAME="HC1L14">HC1L14</A> = (<A HREF="#HC1_state_reg.s9">HC1_state_reg.s9</A>) # ((<A HREF="#HC1_state_reg.s25">HC1_state_reg.s25</A> & <A HREF="#G1_CDSACK_">G1_CDSACK_</A>));


<P> --E1_PAS is CPU_SM:u_CPU_SM|PAS
<P><A NAME="E1_PAS">E1_PAS</A> = DFFEAS(<A HREF="#ZB1L46">ZB1L46</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_PDS is CPU_SM:u_CPU_SM|PDS
<P><A NAME="E1_PDS">E1_PDS</A> = DFFEAS(<A HREF="#ZB1L47">ZB1L47</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --ZB1L25 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~0
<P><A NAME="ZB1L25">ZB1L25</A> = (<A HREF="#E1_nDSACK">E1_nDSACK</A> & (<A HREF="#_STERM">_STERM</A>)) # (!<A HREF="#E1_nDSACK">E1_nDSACK</A> & (((!<A HREF="#_BERR">_BERR</A>) # (!<A HREF="#DSACK_I_[1]">DSACK_I_[1]</A>))));


<P> --ZB1L30 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~0
<P><A NAME="ZB1L30">ZB1L30</A> = (<A HREF="#ZB1L18">ZB1L18</A>) # ((<A HREF="#ZB1L17">ZB1L17</A>) # ((<A HREF="#ZB1L40">ZB1L40</A> & <A HREF="#ZB1L25">ZB1L25</A>)));


<P> --ZB1L31 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~1
<P><A NAME="ZB1L31">ZB1L31</A> = (<A HREF="#ZB1L15">ZB1L15</A>) # ((<A HREF="#ZB1L65">ZB1L65</A> & !<A HREF="#E1_STATE[3]">E1_STATE[3]</A>));


<P> --ZB1L32 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~2
<P><A NAME="ZB1L32">ZB1L32</A> = (<A HREF="#ZB1L30">ZB1L30</A>) # ((<A HREF="#ZB1L31">ZB1L31</A> & !<A HREF="#_STERM">_STERM</A>));


<P> --ZB1L33 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~3
<P><A NAME="ZB1L33">ZB1L33</A> = (!<A HREF="#YB1L7">YB1L7</A> & ((!<A HREF="#ZB1L14">ZB1L14</A>) # (!<A HREF="#_STERM">_STERM</A>)));


<P> --ZB1L34 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUL_d~4
<P><A NAME="ZB1L34">ZB1L34</A> = (<A HREF="#ZB1L32">ZB1L32</A>) # (((!<A HREF="#ZB1L33">ZB1L33</A>) # (!<A HREF="#DC1L11">DC1L11</A>)) # (!<A HREF="#ZB1L62">ZB1L62</A>));


<P> --HC1L21 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector26~0
<P><A NAME="HC1L21">HC1L21</A> = (<A HREF="#HC1L20">HC1L20</A>) # ((<A HREF="#HC1_state_reg.s25">HC1_state_reg.s25</A>) # ((<A HREF="#HC1_state_reg.s9">HC1_state_reg.s9</A>) # (!<A HREF="#HC1L18">HC1L18</A>)));


<P> --RC1L2 is registers:u_registers|registers_istr:u_registers_istr|FE~0
<P><A NAME="RC1L2">RC1L2</A> = (<A HREF="#A1L111">A1L111</A> & (<A HREF="#PC1L9">PC1L9</A> & (<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A> & <A HREF="#PC1L6">PC1L6</A>)));


<P> --RC1L3 is registers:u_registers|registers_istr:u_registers_istr|FE~1
<P><A NAME="RC1L3">RC1L3</A> = (<A HREF="#PC1L9">PC1L9</A> & (<A HREF="#ADDR[4]">ADDR[4]</A> & ((<A HREF="#A1L111">A1L111</A>) # (!<A HREF="#ADDR[2]">ADDR[2]</A>))));


<P> --RC1L5 is registers:u_registers|registers_istr:u_registers_istr|FF~0
<P><A NAME="RC1L5">RC1L5</A> = (<A HREF="#A1L111">A1L111</A> & (<A HREF="#PC1L9">PC1L9</A> & (<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & <A HREF="#PC1L6">PC1L6</A>)));


<P> --RC1L10 is registers:u_registers|registers_istr:u_registers_istr|INT_P~0
<P><A NAME="RC1L10">RC1L10</A> = (<A HREF="#RC1_INT">RC1_INT</A> & (<A HREF="#A1L111">A1L111</A> & (<A HREF="#PC1L9">PC1L9</A> & <A HREF="#PC1L6">PC1L6</A>)));


<P> --RC1L8 is registers:u_registers|registers_istr:u_registers_istr|INT_F~0
<P><A NAME="RC1L8">RC1L8</A> = (<A HREF="#INTA">INTA</A> & (<A HREF="#A1L111">A1L111</A> & (<A HREF="#PC1L9">PC1L9</A> & <A HREF="#PC1L6">PC1L6</A>)));


<P> --E1_BRIDGEOUT is CPU_SM:u_CPU_SM|BRIDGEOUT
<P><A NAME="E1_BRIDGEOUT">E1_BRIDGEOUT</A> = DFFEAS(<A HREF="#ZB1L6">ZB1L6</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --KC1L76 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~0
<P><A NAME="KC1L76">KC1L76</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a0">WB1_ram_block1a0</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a16">WB1_ram_block1a16</A>)));


<P> --ZB1L24 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_X~0
<P><A NAME="ZB1L24">ZB1L24</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (!<A HREF="#E1_STATE[3]">E1_STATE[3]</A> & (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> $ (!<A HREF="#E1_STATE[2]">E1_STATE[2]</A>))));


<P> --ZB1L26 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~1
<P><A NAME="ZB1L26">ZB1L26</A> = (<A HREF="#ZB1L24">ZB1L24</A> & !<A HREF="#E1_STATE[4]">E1_STATE[4]</A>);


<P> --ZB1L27 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~2
<P><A NAME="ZB1L27">ZB1L27</A> = (<A HREF="#ZB1L15">ZB1L15</A> & (((<A HREF="#ZB1L65">ZB1L65</A> & !<A HREF="#E1_STATE[3]">E1_STATE[3]</A>)) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A>))) # (!<A HREF="#ZB1L15">ZB1L15</A> & (<A HREF="#ZB1L65">ZB1L65</A> & ((!<A HREF="#E1_STATE[3]">E1_STATE[3]</A>))));


<P> --ZB1L28 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~3
<P><A NAME="ZB1L28">ZB1L28</A> = (<A HREF="#ZB1L25">ZB1L25</A> & ((<A HREF="#ZB1L26">ZB1L26</A>) # ((<A HREF="#ZB1L27">ZB1L27</A> & !<A HREF="#_STERM">_STERM</A>)))) # (!<A HREF="#ZB1L25">ZB1L25</A> & (((<A HREF="#ZB1L27">ZB1L27</A> & !<A HREF="#_STERM">_STERM</A>))));


<P> --ZB1L29 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|F2CPUH_d~4
<P><A NAME="ZB1L29">ZB1L29</A> = (<A HREF="#ZB1L28">ZB1L28</A>) # (((!<A HREF="#ZB1L33">ZB1L33</A>) # (!<A HREF="#DC1L11">DC1L11</A>)) # (!<A HREF="#ZB1L62">ZB1L62</A>));


<P> --KC1L77 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~1
<P><A NAME="KC1L77">KC1L77</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a1">WB1_ram_block1a1</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a17">WB1_ram_block1a17</A>)));


<P> --KC1L78 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~2
<P><A NAME="KC1L78">KC1L78</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a2">WB1_ram_block1a2</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a18">WB1_ram_block1a18</A>)));


<P> --KC1L79 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~3
<P><A NAME="KC1L79">KC1L79</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a3">WB1_ram_block1a3</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a19">WB1_ram_block1a19</A>)));


<P> --KC1L80 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~4
<P><A NAME="KC1L80">KC1L80</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a4">WB1_ram_block1a4</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a20">WB1_ram_block1a20</A>)));


<P> --KC1L81 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~5
<P><A NAME="KC1L81">KC1L81</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a5">WB1_ram_block1a5</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a21">WB1_ram_block1a21</A>)));


<P> --KC1L82 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~6
<P><A NAME="KC1L82">KC1L82</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a6">WB1_ram_block1a6</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a22">WB1_ram_block1a22</A>)));


<P> --KC1L83 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~7
<P><A NAME="KC1L83">KC1L83</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a7">WB1_ram_block1a7</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a23">WB1_ram_block1a23</A>)));


<P> --KC1L84 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~8
<P><A NAME="KC1L84">KC1L84</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a8">WB1_ram_block1a8</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a24">WB1_ram_block1a24</A>)));


<P> --KC1L85 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~9
<P><A NAME="KC1L85">KC1L85</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a9">WB1_ram_block1a9</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a25">WB1_ram_block1a25</A>)));


<P> --KC1L86 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~10
<P><A NAME="KC1L86">KC1L86</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a10">WB1_ram_block1a10</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a26">WB1_ram_block1a26</A>)));


<P> --KC1L87 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~11
<P><A NAME="KC1L87">KC1L87</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a11">WB1_ram_block1a11</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a27">WB1_ram_block1a27</A>)));


<P> --KC1L88 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~12
<P><A NAME="KC1L88">KC1L88</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a12">WB1_ram_block1a12</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a28">WB1_ram_block1a28</A>)));


<P> --KC1L89 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~13
<P><A NAME="KC1L89">KC1L89</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a13">WB1_ram_block1a13</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a29">WB1_ram_block1a29</A>)));


<P> --KC1L90 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~14
<P><A NAME="KC1L90">KC1L90</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a14">WB1_ram_block1a14</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a30">WB1_ram_block1a30</A>)));


<P> --KC1L91 is datapath:u_datapath|datapath_output:u_datapath_output|UD_LATCH~15
<P><A NAME="KC1L91">KC1L91</A> = (<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & (<A HREF="#WB1_ram_block1a15">WB1_ram_block1a15</A>)) # (!<A HREF="#E1_BRIDGEOUT">E1_BRIDGEOUT</A> & ((<A HREF="#WB1_ram_block1a31">WB1_ram_block1a31</A>)));


<P> --BC1L11 is CPU_SM:u_CPU_SM|cpudff2:u_cpudff2|cpudff2_d~10
<P><A NAME="BC1L11">BC1L11</A> = (<A HREF="#A1L72">A1L72</A> & ((<A HREF="#YB1L8">YB1L8</A>) # ((<A HREF="#ZB1L59">ZB1L59</A> & !<A HREF="#E1_nDSACK">E1_nDSACK</A>))));


<P> --ZB1L52 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_Y~2
<P><A NAME="ZB1L52">ZB1L52</A> = (!<A HREF="#E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A> & (!<A HREF="#E1_DSACK_LATCHED_[1]">E1_DSACK_LATCHED_[1]</A> & ((<A HREF="#YB1L13">YB1L13</A>) # (<A HREF="#YB1L8">YB1L8</A>))));


<P> --ZB1L9 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEH_Z~0
<P><A NAME="ZB1L9">ZB1L9</A> = (<A HREF="#ZB1L51">ZB1L51</A>) # ((<A HREF="#ZB1L52">ZB1L52</A>) # ((<A HREF="#ZB1L13">ZB1L13</A> & <A HREF="#YB1L10">YB1L10</A>)));


<P> --ZB1L10 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEH_d~0
<P><A NAME="ZB1L10">ZB1L10</A> = (<A HREF="#_STERM">_STERM</A> & (((!<A HREF="#ZB1L9">ZB1L9</A>)))) # (!<A HREF="#_STERM">_STERM</A> & (<A HREF="#ZB1L50">ZB1L50</A> & (!<A HREF="#YB1L9">YB1L9</A>)));


<P> --ZB1L54 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~1
<P><A NAME="ZB1L54">ZB1L54</A> = (<A HREF="#ZB1L48">ZB1L48</A> & (!<A HREF="#YB1L20">YB1L20</A> & (!<A HREF="#YB1L18">YB1L18</A> & !<A HREF="#YB1L16">YB1L16</A>)));


<P> --ZB1L11 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEH_d~1
<P><A NAME="ZB1L11">ZB1L11</A> = (<A HREF="#YB1L11">YB1L11</A>) # ((<A HREF="#BC1L11">BC1L11</A>) # ((!<A HREF="#ZB1L54">ZB1L54</A>) # (!<A HREF="#ZB1L10">ZB1L10</A>)));


<P> --HC1L23 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector28~0
<P><A NAME="HC1L23">HC1L23</A> = (<A HREF="#HC1_state_reg.s6">HC1_state_reg.s6</A>) # ((<A HREF="#HC1_state_reg.s17">HC1_state_reg.s17</A>) # ((<A HREF="#HC1_state_reg.s26">HC1_state_reg.s26</A>) # (<A HREF="#HC1L13">HC1L13</A>)));


<P> --HC1_WideOr22 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|WideOr22
<P><A NAME="HC1_WideOr22">HC1_WideOr22</A> = (<A HREF="#HC1_state_reg.s2">HC1_state_reg.s2</A>) # ((<A HREF="#HC1_state_reg.s18">HC1_state_reg.s18</A>) # ((<A HREF="#HC1_state_reg.s28">HC1_state_reg.s28</A>) # (<A HREF="#HC1_state_reg.s1">HC1_state_reg.s1</A>)));


<P> --LHW is LHW
<P><A NAME="LHW">LHW</A> = DFFEAS(<A HREF="#E1_PLHW">E1_PLHW</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --LLW is LLW
<P><A NAME="LLW">LLW</A> = DFFEAS(<A HREF="#E1_PLLW">E1_PLLW</A>, !<A HREF="#SCLK">SCLK</A>,  ,  ,  ,  ,  ,  ,  );


<P> --D1L1 is fifo:int_fifo|BUFFER~0
<P><A NAME="D1L1">D1L1</A> = (<A HREF="#LHW">LHW</A>) # ((<A HREF="#LLW">LLW</A>) # ((<A HREF="#G1_DACK_o">G1_DACK_o</A> & <A HREF="#G1_RE_o">G1_RE_o</A>)));


<P> --UB1_COUNT[0] is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[0]
<P><A NAME="UB1_COUNT[0]">UB1_COUNT[0]</A> = DFFEAS(<A HREF="#UB1L3">UB1L3</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --UB1_COUNT[1] is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[1]
<P><A NAME="UB1_COUNT[1]">UB1_COUNT[1]</A> = DFFEAS(<A HREF="#UB1L5">UB1L5</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --UB1_COUNT[2] is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[2]
<P><A NAME="UB1_COUNT[2]">UB1_COUNT[2]</A> = DFFEAS(<A HREF="#UB1L7">UB1L7</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --VB1L2 is fifo:int_fifo|fifo_write_strobes:u_write_strobes|LLWS~0
<P><A NAME="VB1L2">VB1L2</A> = (<A HREF="#G1_DACK_o">G1_DACK_o</A> & <A HREF="#G1_RE_o">G1_RE_o</A>);


<P> --VB1_UUWS is fifo:int_fifo|fifo_write_strobes:u_write_strobes|UUWS
<P><A NAME="VB1_UUWS">VB1_UUWS</A> = (<A HREF="#LHW">LHW</A>) # ((<A HREF="#VB1L2">VB1L2</A> & (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & !<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>)));


<P> --UB2_COUNT[0] is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[0]
<P><A NAME="UB2_COUNT[0]">UB2_COUNT[0]</A> = DFFEAS(<A HREF="#UB2L3">UB2L3</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --UB2_COUNT[1] is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[1]
<P><A NAME="UB2_COUNT[1]">UB2_COUNT[1]</A> = DFFEAS(<A HREF="#UB2L5">UB2L5</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --UB2_COUNT[2] is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[2]
<P><A NAME="UB2_COUNT[2]">UB2_COUNT[2]</A> = DFFEAS(<A HREF="#UB2L7">UB2L7</A>, <A HREF="#GC1__clk2">GC1__clk2</A>, <A HREF="#QC1_CNTR_O[8]">QC1_CNTR_O[8]</A>,  ,  ,  ,  ,  ,  );


<P> --VB1_LMWS is fifo:int_fifo|fifo_write_strobes:u_write_strobes|LMWS
<P><A NAME="VB1_LMWS">VB1_LMWS</A> = (<A HREF="#LLW">LLW</A>) # ((<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A> & (<A HREF="#VB1L2">VB1L2</A> & !<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>)));


<P> --VB1_UMWS is fifo:int_fifo|fifo_write_strobes:u_write_strobes|UMWS
<P><A NAME="VB1_UMWS">VB1_UMWS</A> = (<A HREF="#LHW">LHW</A>) # ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & (<A HREF="#VB1L2">VB1L2</A> & !<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>)));


<P> --JC1_UD_LATCH[0] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[0]
<P><A NAME="JC1_UD_LATCH[0]">JC1_UD_LATCH[0]</A> = DFFEAS(<A HREF="#A1L36">A1L36</A>, !<A HREF="#GC1__clk1">GC1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --E1_BRIDGEIN is CPU_SM:u_CPU_SM|BRIDGEIN
<P><A NAME="E1_BRIDGEIN">E1_BRIDGEIN</A> = DFFEAS(<A HREF="#ZB1_nBRIDGEIN_d">ZB1_nBRIDGEIN_d</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_DIEL is CPU_SM:u_CPU_SM|DIEL
<P><A NAME="E1_DIEL">E1_DIEL</A> = DFFEAS(<A HREF="#ZB1L12">ZB1L12</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --H1_bDIEL is datapath:u_datapath|bDIEL
<P><A NAME="H1_bDIEL">H1_bDIEL</A> = (<A HREF="#G1_CPU2S_o">G1_CPU2S_o</A>) # (<A HREF="#E1_DIEL">E1_DIEL</A>);


<P> --JC1L1 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[0]~0
<P><A NAME="JC1L1">JC1L1</A> = (<A HREF="#H1_bDIEL">H1_bDIEL</A> & (<A HREF="#A1L12">A1L12</A>)) # (!<A HREF="#H1_bDIEL">H1_bDIEL</A> & (((<A HREF="#JC1_UD_LATCH[0]">JC1_UD_LATCH[0]</A> & <A HREF="#E1_BRIDGEIN">E1_BRIDGEIN</A>))));


<P> --G1_S2F_o is SCSI_SM:u_SCSI_SM|S2F_o
<P><A NAME="G1_S2F_o">G1_S2F_o</A> = DFFEAS(<A HREF="#HC1L22">HC1L22</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --H1L1 is datapath:u_datapath|FIFO_ID[0]~0
<P><A NAME="H1L1">H1L1</A> = (<A HREF="#G1_S2F_o">G1_S2F_o</A> & (<A HREF="#A1L87">A1L87</A>)) # (!<A HREF="#G1_S2F_o">G1_S2F_o</A> & ((<A HREF="#JC1L1">JC1L1</A>)));


<P> --VB1_LLWS is fifo:int_fifo|fifo_write_strobes:u_write_strobes|LLWS
<P><A NAME="VB1_LLWS">VB1_LLWS</A> = (<A HREF="#LLW">LLW</A>) # ((<A HREF="#G1_DACK_o">G1_DACK_o</A> & (<A HREF="#G1_RE_o">G1_RE_o</A> & <A HREF="#NC1L1">NC1L1</A>)));


<P> --JC1_UD_LATCH[1] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[1]
<P><A NAME="JC1_UD_LATCH[1]">JC1_UD_LATCH[1]</A> = DFFEAS(<A HREF="#A1L38">A1L38</A>, !<A HREF="#GC1__clk1">GC1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --JC1L2 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[1]~1
<P><A NAME="JC1L2">JC1L2</A> = (<A HREF="#H1_bDIEL">H1_bDIEL</A> & (<A HREF="#A1L14">A1L14</A>)) # (!<A HREF="#H1_bDIEL">H1_bDIEL</A> & (((<A HREF="#E1_BRIDGEIN">E1_BRIDGEIN</A> & <A HREF="#JC1_UD_LATCH[1]">JC1_UD_LATCH[1]</A>))));


<P> --H1L2 is datapath:u_datapath|FIFO_ID[1]~1
<P><A NAME="H1L2">H1L2</A> = (<A HREF="#G1_S2F_o">G1_S2F_o</A> & (<A HREF="#A1L89">A1L89</A>)) # (!<A HREF="#G1_S2F_o">G1_S2F_o</A> & ((<A HREF="#JC1L2">JC1L2</A>)));


<P> --JC1_UD_LATCH[2] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[2]
<P><A NAME="JC1_UD_LATCH[2]">JC1_UD_LATCH[2]</A> = DFFEAS(<A HREF="#A1L40">A1L40</A>, !<A HREF="#GC1__clk1">GC1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --JC1L3 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[2]~2
<P><A NAME="JC1L3">JC1L3</A> = (<A HREF="#H1_bDIEL">H1_bDIEL</A> & (<A HREF="#A1L16">A1L16</A>)) # (!<A HREF="#H1_bDIEL">H1_bDIEL</A> & (((<A HREF="#E1_BRIDGEIN">E1_BRIDGEIN</A> & <A HREF="#JC1_UD_LATCH[2]">JC1_UD_LATCH[2]</A>))));


<P> --H1L3 is datapath:u_datapath|FIFO_ID[2]~2
<P><A NAME="H1L3">H1L3</A> = (<A HREF="#G1_S2F_o">G1_S2F_o</A> & (<A HREF="#A1L91">A1L91</A>)) # (!<A HREF="#G1_S2F_o">G1_S2F_o</A> & ((<A HREF="#JC1L3">JC1L3</A>)));


<P> --JC1_UD_LATCH[3] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[3]
<P><A NAME="JC1_UD_LATCH[3]">JC1_UD_LATCH[3]</A> = DFFEAS(<A HREF="#A1L42">A1L42</A>, !<A HREF="#GC1__clk1">GC1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --JC1L4 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[3]~3
<P><A NAME="JC1L4">JC1L4</A> = (<A HREF="#H1_bDIEL">H1_bDIEL</A> & (<A HREF="#A1L18">A1L18</A>)) # (!<A HREF="#H1_bDIEL">H1_bDIEL</A> & (((<A HREF="#E1_BRIDGEIN">E1_BRIDGEIN</A> & <A HREF="#JC1_UD_LATCH[3]">JC1_UD_LATCH[3]</A>))));


<P> --H1L4 is datapath:u_datapath|FIFO_ID[3]~3
<P><A NAME="H1L4">H1L4</A> = (<A HREF="#G1_S2F_o">G1_S2F_o</A> & (<A HREF="#A1L93">A1L93</A>)) # (!<A HREF="#G1_S2F_o">G1_S2F_o</A> & ((<A HREF="#JC1L4">JC1L4</A>)));


<P> --JC1_UD_LATCH[4] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[4]
<P><A NAME="JC1_UD_LATCH[4]">JC1_UD_LATCH[4]</A> = DFFEAS(<A HREF="#A1L44">A1L44</A>, !<A HREF="#GC1__clk1">GC1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --JC1L5 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[4]~4
<P><A NAME="JC1L5">JC1L5</A> = (<A HREF="#H1_bDIEL">H1_bDIEL</A> & (<A HREF="#A1L20">A1L20</A>)) # (!<A HREF="#H1_bDIEL">H1_bDIEL</A> & (((<A HREF="#E1_BRIDGEIN">E1_BRIDGEIN</A> & <A HREF="#JC1_UD_LATCH[4]">JC1_UD_LATCH[4]</A>))));


<P> --H1L5 is datapath:u_datapath|FIFO_ID[4]~4
<P><A NAME="H1L5">H1L5</A> = (<A HREF="#G1_S2F_o">G1_S2F_o</A> & (<A HREF="#A1L95">A1L95</A>)) # (!<A HREF="#G1_S2F_o">G1_S2F_o</A> & ((<A HREF="#JC1L5">JC1L5</A>)));


<P> --JC1_UD_LATCH[5] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[5]
<P><A NAME="JC1_UD_LATCH[5]">JC1_UD_LATCH[5]</A> = DFFEAS(<A HREF="#A1L46">A1L46</A>, !<A HREF="#GC1__clk1">GC1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --JC1L6 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[5]~5
<P><A NAME="JC1L6">JC1L6</A> = (<A HREF="#H1_bDIEL">H1_bDIEL</A> & (<A HREF="#A1L22">A1L22</A>)) # (!<A HREF="#H1_bDIEL">H1_bDIEL</A> & (((<A HREF="#E1_BRIDGEIN">E1_BRIDGEIN</A> & <A HREF="#JC1_UD_LATCH[5]">JC1_UD_LATCH[5]</A>))));


<P> --H1L6 is datapath:u_datapath|FIFO_ID[5]~5
<P><A NAME="H1L6">H1L6</A> = (<A HREF="#G1_S2F_o">G1_S2F_o</A> & (<A HREF="#A1L97">A1L97</A>)) # (!<A HREF="#G1_S2F_o">G1_S2F_o</A> & ((<A HREF="#JC1L6">JC1L6</A>)));


<P> --JC1_UD_LATCH[6] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[6]
<P><A NAME="JC1_UD_LATCH[6]">JC1_UD_LATCH[6]</A> = DFFEAS(<A HREF="#A1L48">A1L48</A>, !<A HREF="#GC1__clk1">GC1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --JC1L7 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[6]~6
<P><A NAME="JC1L7">JC1L7</A> = (<A HREF="#H1_bDIEL">H1_bDIEL</A> & (<A HREF="#A1L24">A1L24</A>)) # (!<A HREF="#H1_bDIEL">H1_bDIEL</A> & (((<A HREF="#E1_BRIDGEIN">E1_BRIDGEIN</A> & <A HREF="#JC1_UD_LATCH[6]">JC1_UD_LATCH[6]</A>))));


<P> --H1L7 is datapath:u_datapath|FIFO_ID[6]~6
<P><A NAME="H1L7">H1L7</A> = (<A HREF="#G1_S2F_o">G1_S2F_o</A> & (<A HREF="#A1L99">A1L99</A>)) # (!<A HREF="#G1_S2F_o">G1_S2F_o</A> & ((<A HREF="#JC1L7">JC1L7</A>)));


<P> --JC1_UD_LATCH[7] is datapath:u_datapath|datapath_input:u_datapath_input|UD_LATCH[7]
<P><A NAME="JC1_UD_LATCH[7]">JC1_UD_LATCH[7]</A> = DFFEAS(<A HREF="#A1L50">A1L50</A>, !<A HREF="#GC1__clk1">GC1__clk1</A>,  ,  , !<A HREF="#DS_O_">DS_O_</A>,  ,  ,  ,  );


<P> --JC1L8 is datapath:u_datapath|datapath_input:u_datapath_input|CPU_OD[7]~7
<P><A NAME="JC1L8">JC1L8</A> = (<A HREF="#H1_bDIEL">H1_bDIEL</A> & (<A HREF="#A1L26">A1L26</A>)) # (!<A HREF="#H1_bDIEL">H1_bDIEL</A> & (((<A HREF="#E1_BRIDGEIN">E1_BRIDGEIN</A> & <A HREF="#JC1_UD_LATCH[7]">JC1_UD_LATCH[7]</A>))));


<P> --H1L8 is datapath:u_datapath|FIFO_ID[7]~7
<P><A NAME="H1L8">H1L8</A> = (<A HREF="#G1_S2F_o">G1_S2F_o</A> & (<A HREF="#A1L101">A1L101</A>)) # (!<A HREF="#G1_S2F_o">G1_S2F_o</A> & ((<A HREF="#JC1L8">JC1L8</A>)));


<P> --ZB1L63 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~7
<P><A NAME="ZB1L63">ZB1L63</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#E1_nDSACK">E1_nDSACK</A> & <A HREF="#YB1L12">YB1L12</A>)));


<P> --ZB1L42 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~2
<P><A NAME="ZB1L42">ZB1L42</A> = (<A HREF="#CC1L11">CC1L11</A> & (!<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & (!<A HREF="#E1_DSACK_LATCHED_[0]">E1_DSACK_LATCHED_[0]</A> & !<A HREF="#E1_DSACK_LATCHED_[1]">E1_DSACK_LATCHED_[1]</A>)));


<P> --ZB1L43 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~3
<P><A NAME="ZB1L43">ZB1L43</A> = (<A HREF="#ZB1L51">ZB1L51</A>) # ((<A HREF="#E1_nDSACK">E1_nDSACK</A> & ((<A HREF="#YB1L13">YB1L13</A>) # (<A HREF="#YB1L8">YB1L8</A>))));


<P> --ZB1L44 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_Y~4
<P><A NAME="ZB1L44">ZB1L44</A> = (<A HREF="#_STERM">_STERM</A> & ((<A HREF="#ZB1L42">ZB1L42</A>) # ((<A HREF="#ZB1L43">ZB1L43</A>) # (!<A HREF="#AC1L8">AC1L8</A>))));


<P> --ZB1L45 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_d~0
<P><A NAME="ZB1L45">ZB1L45</A> = (<A HREF="#ZB1L18">ZB1L18</A>) # ((!<A HREF="#DC1L11">DC1L11</A>) # (!<A HREF="#ZB1L62">ZB1L62</A>));


<P> --ZB1L46 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_d~1
<P><A NAME="ZB1L46">ZB1L46</A> = (<A HREF="#ZB1L63">ZB1L63</A>) # ((<A HREF="#ZB1L44">ZB1L44</A>) # ((<A HREF="#ZB1L45">ZB1L45</A>) # (!<A HREF="#ZB1L54">ZB1L54</A>)));


<P> --ZB1L47 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PAS_d~2
<P><A NAME="ZB1L47">ZB1L47</A> = ((<A HREF="#ZB1L44">ZB1L44</A>) # ((<A HREF="#E1_nDSACK">E1_nDSACK</A> & <A HREF="#YB1L11">YB1L11</A>))) # (!<A HREF="#ZB1L54">ZB1L54</A>);


<P> --ZB1L4 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BRIDGEOUT_Y~0
<P><A NAME="ZB1L4">ZB1L4</A> = (<A HREF="#E1_STATE[0]">E1_STATE[0]</A> & (!<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> $ (<A HREF="#E1_STATE[4]">E1_STATE[4]</A>))));


<P> --ZB1L5 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BRIDGEOUT_d~0
<P><A NAME="ZB1L5">ZB1L5</A> = (<A HREF="#_STERM">_STERM</A> & (<A HREF="#ZB1L17">ZB1L17</A>)) # (!<A HREF="#_STERM">_STERM</A> & (((<A HREF="#ZB1L4">ZB1L4</A> & !<A HREF="#E1_STATE[3]">E1_STATE[3]</A>))));


<P> --ZB1L23 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|Equal2~10
<P><A NAME="ZB1L23">ZB1L23</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & <A HREF="#ZB1L15">ZB1L15</A>);


<P> --ZB1L6 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|BRIDGEOUT_d~1
<P><A NAME="ZB1L6">ZB1L6</A> = (<A HREF="#ZB1L18">ZB1L18</A>) # ((<A HREF="#ZB1L5">ZB1L5</A>) # ((<A HREF="#ZB1L23">ZB1L23</A> & <A HREF="#ZB1L25">ZB1L25</A>)));


<P> --E1_PLHW is CPU_SM:u_CPU_SM|PLHW
<P><A NAME="E1_PLHW">E1_PLHW</A> = DFFEAS(<A HREF="#ZB1L49">ZB1L49</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_PLLW is CPU_SM:u_CPU_SM|PLLW
<P><A NAME="E1_PLLW">E1_PLLW</A> = DFFEAS(<A HREF="#ZB1L57">ZB1L57</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --E1_INCNI is CPU_SM:u_CPU_SM|INCNI
<P><A NAME="E1_INCNI">E1_INCNI</A> = DFFEAS(<A HREF="#ZB1L21">ZB1L21</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_INCNI_o is SCSI_SM:u_SCSI_SM|INCNI_o
<P><A NAME="G1_INCNI_o">G1_INCNI_o</A> = DFFEAS(<A HREF="#HC1L25">HC1L25</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --UB1L3 is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[0]~0
<P><A NAME="UB1L3">UB1L3</A> = <A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A> $ (((<A HREF="#E1_INCNI">E1_INCNI</A>) # (<A HREF="#G1_INCNI_o">G1_INCNI_o</A>)));


<P> --UB1L5 is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[1]~1
<P><A NAME="UB1L5">UB1L5</A> = <A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A> $ (((<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A> & ((<A HREF="#E1_INCNI">E1_INCNI</A>) # (<A HREF="#G1_INCNI_o">G1_INCNI_o</A>)))));


<P> --INCNI is INCNI
<P><A NAME="INCNI">INCNI</A> = (<A HREF="#E1_INCNI">E1_INCNI</A>) # (<A HREF="#G1_INCNI_o">G1_INCNI_o</A>);


<P> --UB1L7 is fifo:int_fifo|fifo_3bit_cntr:u_next_in_cntr|COUNT[2]~2
<P><A NAME="UB1L7">UB1L7</A> = <A HREF="#UB1_COUNT[2]">UB1_COUNT[2]</A> $ (((<A HREF="#UB1_COUNT[0]">UB1_COUNT[0]</A> & (<A HREF="#UB1_COUNT[1]">UB1_COUNT[1]</A> & <A HREF="#INCNI">INCNI</A>))));


<P> --E1_INCNO is CPU_SM:u_CPU_SM|INCNO
<P><A NAME="E1_INCNO">E1_INCNO</A> = DFFEAS(<A HREF="#ZB1L36">ZB1L36</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#E1_CCRESET_">E1_CCRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --G1_INCNO_o is SCSI_SM:u_SCSI_SM|INCNO_o
<P><A NAME="G1_INCNO_o">G1_INCNO_o</A> = DFFEAS(<A HREF="#HC1L16">HC1L16</A>, <A HREF="#GC1__clk1">GC1__clk1</A>, <A HREF="#G1_CRESET_">G1_CRESET_</A>,  ,  ,  ,  ,  ,  );


<P> --UB2L3 is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[0]~0
<P><A NAME="UB2L3">UB2L3</A> = <A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A> $ (((<A HREF="#E1_INCNO">E1_INCNO</A>) # (<A HREF="#G1_INCNO_o">G1_INCNO_o</A>)));


<P> --UB2L5 is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[1]~1
<P><A NAME="UB2L5">UB2L5</A> = <A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A> $ (((<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A> & ((<A HREF="#E1_INCNO">E1_INCNO</A>) # (<A HREF="#G1_INCNO_o">G1_INCNO_o</A>)))));


<P> --INCNO is INCNO
<P><A NAME="INCNO">INCNO</A> = (<A HREF="#E1_INCNO">E1_INCNO</A>) # (<A HREF="#G1_INCNO_o">G1_INCNO_o</A>);


<P> --UB2L7 is fifo:int_fifo|fifo_3bit_cntr:u_next_out_cntr|COUNT[2]~2
<P><A NAME="UB2L7">UB2L7</A> = <A HREF="#UB2_COUNT[2]">UB2_COUNT[2]</A> $ (((<A HREF="#UB2_COUNT[0]">UB2_COUNT[0]</A> & (<A HREF="#UB2_COUNT[1]">UB2_COUNT[1]</A> & <A HREF="#INCNO">INCNO</A>))));


<P> --ZB1L78 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBRIDGEIN_d~0
<P><A NAME="ZB1L78">ZB1L78</A> = (<A HREF="#YB1L6">YB1L6</A>) # ((<A HREF="#E1_STATE[2]">E1_STATE[2]</A> & ((<A HREF="#YB1L16">YB1L16</A>) # (<A HREF="#YB1L21">YB1L21</A>))));


<P> --ZB1_nBRIDGEIN_d is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBRIDGEIN_d
<P><A NAME="ZB1_nBRIDGEIN_d">ZB1_nBRIDGEIN_d</A> = (<A HREF="#YB1L18">YB1L18</A>) # ((<A HREF="#YB1L11">YB1L11</A>) # ((<A HREF="#YB1L16">YB1L16</A>) # (<A HREF="#ZB1L78">ZB1L78</A>)));


<P> --ZB1L12 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|DIEL_d~0
<P><A NAME="ZB1L12">ZB1L12</A> = (<A HREF="#YB1L20">YB1L20</A>) # ((<A HREF="#ZB1L37">ZB1L37</A>) # ((!<A HREF="#ZB1L10">ZB1L10</A>) # (!<A HREF="#ZB1L48">ZB1L48</A>)));


<P> --HC1L22 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector27~0
<P><A NAME="HC1L22">HC1L22</A> = (<A HREF="#HC1_state_reg.s12">HC1_state_reg.s12</A>) # (!<A HREF="#HC1L4">HC1L4</A>);


<P> --ZB1L49 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLHW_d~1
<P><A NAME="ZB1L49">ZB1L49</A> = ((<A HREF="#_STERM">_STERM</A> & ((<A HREF="#ZB1L51">ZB1L51</A>) # (<A HREF="#ZB1L41">ZB1L41</A>)))) # (!<A HREF="#ZB1L48">ZB1L48</A>);


<P> --ZB1L55 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~2
<P><A NAME="ZB1L55">ZB1L55</A> = (<A HREF="#_STERM">_STERM</A> & ((<A HREF="#ZB1L51">ZB1L51</A>) # ((<A HREF="#ZB1L13">ZB1L13</A> & <A HREF="#YB1L10">YB1L10</A>))));


<P> --ZB1L56 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~3
<P><A NAME="ZB1L56">ZB1L56</A> = (<A HREF="#ZB1L55">ZB1L55</A>) # (((<A HREF="#_STERM">_STERM</A> & <A HREF="#ZB1L52">ZB1L52</A>)) # (!<A HREF="#ZB1L53">ZB1L53</A>));


<P> --ZB1L57 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|PLLW_d~4
<P><A NAME="ZB1L57">ZB1L57</A> = (<A HREF="#ZB1L56">ZB1L56</A>) # (((<A HREF="#_STERM">_STERM</A> & <A HREF="#EC1L2">EC1L2</A>)) # (!<A HREF="#ZB1L54">ZB1L54</A>));


<P> --HC1L25 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector29~1
<P><A NAME="HC1L25">HC1L25</A> = (<A HREF="#NC1L1">NC1L1</A> & ((<A HREF="#HC1_state_reg.s12">HC1_state_reg.s12</A>) # ((<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & <A HREF="#HC1_state_reg.s24">HC1_state_reg.s24</A>)))) # (!<A HREF="#NC1L1">NC1L1</A> & (<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & (<A HREF="#HC1_state_reg.s24">HC1_state_reg.s24</A>)));


<P> --HC1L16 is SCSI_SM:u_SCSI_SM|SCSI_SM_INTERNALS:u_SCSI_SM_INTERNALS|Selector23~1
<P><A NAME="HC1L16">HC1L16</A> = (<A HREF="#NC1L1">NC1L1</A> & ((<A HREF="#HC1_state_reg.s1">HC1_state_reg.s1</A>) # ((<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & <A HREF="#HC1_state_reg.s24">HC1_state_reg.s24</A>)))) # (!<A HREF="#NC1L1">NC1L1</A> & (<A HREF="#TB1_FIFOFULL">TB1_FIFOFULL</A> & (<A HREF="#HC1_state_reg.s24">HC1_state_reg.s24</A>)));


<P> --ZB1L64 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|SIZE1_X~8
<P><A NAME="ZB1L64">ZB1L64</A> = ((<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>) # ((<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A> & <A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>))) # (!<A HREF="#YB1L22">YB1L22</A>);


<P> --ZB1L76 is CPU_SM:u_CPU_SM|CPU_SM_outputs:u_CPU_SM_outputs|nBREQ_d~4
<P><A NAME="ZB1L76">ZB1L76</A> = (<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (((<A HREF="#ZB1L19">ZB1L19</A>)))) # (!<A HREF="#E1_STATE[1]">E1_STATE[1]</A> & (!<A HREF="#E1_STATE[4]">E1_STATE[4]</A> & (<A HREF="#ZB1L20">ZB1L20</A>)));


<P> --DC1L14 is CPU_SM:u_CPU_SM|cpudff4:u_cpudff4|cpudff4_d~15
<P><A NAME="DC1L14">DC1L14</A> = (((<A HREF="#TB1_FIFOEMPTY">TB1_FIFOEMPTY</A>) # (!<A HREF="#YB1L22">YB1L22</A>)) # (!<A HREF="#SB1_PTR[1]">SB1_PTR[1]</A>)) # (!<A HREF="#SB1_PTR[0]">SB1_PTR[0]</A>);


<P> --E1L4 is CPU_SM:u_CPU_SM|BGRANT_~0
<P><A NAME="E1L4">E1L4</A> = !<A HREF="#_BG">_BG</A>;


<P> --SB1L2 is fifo:int_fifo|fifo_byte_ptr:u_byte_ptr|B~0
<P><A NAME="SB1L2">SB1L2</A> = !<A HREF="#A1L53">A1L53</A>;


<P> --A1L8 is AS_O_~0
<P><A NAME="A1L8">A1L8</A> = !<A HREF="#E1_PAS">E1_PAS</A>;


<P> --A1L74 is DS_O_~0
<P><A NAME="A1L74">A1L74</A> = !<A HREF="#E1_PDS">E1_PDS</A>;


<P> --A1L140 is ~GND
<P><A NAME="A1L140">A1L140</A> = GND;


<P> --A1L111 is R_W_IO~0
<P> --operation mode is bidir

<P><A NAME="A1L111">A1L111</A> = <A HREF="#R_W_IO">R_W_IO</A>;

<P> --R_W_IO is R_W_IO
<P> --operation mode is bidir

<P><A NAME="R_W_IO_tri_out">R_W_IO_tri_out</A> = TRI(!<A HREF="#QC1_CNTR_O[1]">QC1_CNTR_O[1]</A>, <A HREF="#E1_BGACK">E1_BGACK</A>);
<P><A NAME="R_W_IO">R_W_IO</A> = BIDIR(<A HREF="#R_W_IO_tri_out">R_W_IO_tri_out</A>);


<P> --A1L114 is _AS_IO~0
<P> --operation mode is bidir

<P><A NAME="A1L114">A1L114</A> = <A HREF="#_AS_IO">_AS_IO</A>;

<P> --_AS_IO is _AS_IO
<P> --operation mode is bidir

<P><A NAME="_AS_IO_tri_out">_AS_IO_tri_out</A> = TRI(<A HREF="#AS_O_">AS_O_</A>, <A HREF="#E1_BGACK">E1_BGACK</A>);
<P><A NAME="_AS_IO">_AS_IO</A> = BIDIR(<A HREF="#_AS_IO_tri_out">_AS_IO_tri_out</A>);


<P> --_DS_IO is _DS_IO
<P> --operation mode is bidir

<P><A NAME="_DS_IO_tri_out">_DS_IO_tri_out</A> = TRI(<A HREF="#DS_O_">DS_O_</A>, <A HREF="#E1_BGACK">E1_BGACK</A>);
<P><A NAME="_DS_IO">_DS_IO</A> = BIDIR(<A HREF="#_DS_IO_tri_out">_DS_IO_tri_out</A>);


<P> --A1L12 is DATA_IO[0]~0
<P> --operation mode is bidir

<P><A NAME="A1L12">A1L12</A> = <A HREF="#DATA_IO[0]">DATA_IO[0]</A>;

<P> --DATA_IO[0] is DATA_IO[0]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[0]_tri_out">DATA_IO[0]_tri_out</A> = TRI(<A HREF="#KC1L3">KC1L3</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[0]">DATA_IO[0]</A> = BIDIR(<A HREF="#DATA_IO[0]_tri_out">DATA_IO[0]_tri_out</A>);


<P> --A1L14 is DATA_IO[1]~1
<P> --operation mode is bidir

<P><A NAME="A1L14">A1L14</A> = <A HREF="#DATA_IO[1]">DATA_IO[1]</A>;

<P> --DATA_IO[1] is DATA_IO[1]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[1]_tri_out">DATA_IO[1]_tri_out</A> = TRI(<A HREF="#KC1L6">KC1L6</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[1]">DATA_IO[1]</A> = BIDIR(<A HREF="#DATA_IO[1]_tri_out">DATA_IO[1]_tri_out</A>);


<P> --A1L16 is DATA_IO[2]~2
<P> --operation mode is bidir

<P><A NAME="A1L16">A1L16</A> = <A HREF="#DATA_IO[2]">DATA_IO[2]</A>;

<P> --DATA_IO[2] is DATA_IO[2]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[2]_tri_out">DATA_IO[2]_tri_out</A> = TRI(<A HREF="#KC1L9">KC1L9</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[2]">DATA_IO[2]</A> = BIDIR(<A HREF="#DATA_IO[2]_tri_out">DATA_IO[2]_tri_out</A>);


<P> --A1L18 is DATA_IO[3]~3
<P> --operation mode is bidir

<P><A NAME="A1L18">A1L18</A> = <A HREF="#DATA_IO[3]">DATA_IO[3]</A>;

<P> --DATA_IO[3] is DATA_IO[3]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[3]_tri_out">DATA_IO[3]_tri_out</A> = TRI(<A HREF="#KC1L11">KC1L11</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[3]">DATA_IO[3]</A> = BIDIR(<A HREF="#DATA_IO[3]_tri_out">DATA_IO[3]_tri_out</A>);


<P> --A1L20 is DATA_IO[4]~4
<P> --operation mode is bidir

<P><A NAME="A1L20">A1L20</A> = <A HREF="#DATA_IO[4]">DATA_IO[4]</A>;

<P> --DATA_IO[4] is DATA_IO[4]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[4]_tri_out">DATA_IO[4]_tri_out</A> = TRI(<A HREF="#KC1L13">KC1L13</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[4]">DATA_IO[4]</A> = BIDIR(<A HREF="#DATA_IO[4]_tri_out">DATA_IO[4]_tri_out</A>);


<P> --A1L22 is DATA_IO[5]~5
<P> --operation mode is bidir

<P><A NAME="A1L22">A1L22</A> = <A HREF="#DATA_IO[5]">DATA_IO[5]</A>;

<P> --DATA_IO[5] is DATA_IO[5]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[5]_tri_out">DATA_IO[5]_tri_out</A> = TRI(<A HREF="#KC1L14">KC1L14</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[5]">DATA_IO[5]</A> = BIDIR(<A HREF="#DATA_IO[5]_tri_out">DATA_IO[5]_tri_out</A>);


<P> --A1L24 is DATA_IO[6]~6
<P> --operation mode is bidir

<P><A NAME="A1L24">A1L24</A> = <A HREF="#DATA_IO[6]">DATA_IO[6]</A>;

<P> --DATA_IO[6] is DATA_IO[6]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[6]_tri_out">DATA_IO[6]_tri_out</A> = TRI(<A HREF="#KC1L15">KC1L15</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[6]">DATA_IO[6]</A> = BIDIR(<A HREF="#DATA_IO[6]_tri_out">DATA_IO[6]_tri_out</A>);


<P> --A1L26 is DATA_IO[7]~7
<P> --operation mode is bidir

<P><A NAME="A1L26">A1L26</A> = <A HREF="#DATA_IO[7]">DATA_IO[7]</A>;

<P> --DATA_IO[7] is DATA_IO[7]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[7]_tri_out">DATA_IO[7]_tri_out</A> = TRI(<A HREF="#KC1L16">KC1L16</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[7]">DATA_IO[7]</A> = BIDIR(<A HREF="#DATA_IO[7]_tri_out">DATA_IO[7]_tri_out</A>);


<P> --DATA_IO[8] is DATA_IO[8]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[8]_tri_out">DATA_IO[8]_tri_out</A> = TRI(<A HREF="#KC1L18">KC1L18</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[8]">DATA_IO[8]</A> = BIDIR(<A HREF="#DATA_IO[8]_tri_out">DATA_IO[8]_tri_out</A>);


<P> --DATA_IO[9] is DATA_IO[9]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[9]_tri_out">DATA_IO[9]_tri_out</A> = TRI(<A HREF="#KC1L19">KC1L19</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[9]">DATA_IO[9]</A> = BIDIR(<A HREF="#DATA_IO[9]_tri_out">DATA_IO[9]_tri_out</A>);


<P> --DATA_IO[10] is DATA_IO[10]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[10]_tri_out">DATA_IO[10]_tri_out</A> = TRI(<A HREF="#KC1L20">KC1L20</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[10]">DATA_IO[10]</A> = BIDIR(<A HREF="#DATA_IO[10]_tri_out">DATA_IO[10]_tri_out</A>);


<P> --DATA_IO[11] is DATA_IO[11]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[11]_tri_out">DATA_IO[11]_tri_out</A> = TRI(<A HREF="#KC1L21">KC1L21</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[11]">DATA_IO[11]</A> = BIDIR(<A HREF="#DATA_IO[11]_tri_out">DATA_IO[11]_tri_out</A>);


<P> --DATA_IO[12] is DATA_IO[12]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[12]_tri_out">DATA_IO[12]_tri_out</A> = TRI(<A HREF="#KC1L22">KC1L22</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[12]">DATA_IO[12]</A> = BIDIR(<A HREF="#DATA_IO[12]_tri_out">DATA_IO[12]_tri_out</A>);


<P> --DATA_IO[13] is DATA_IO[13]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[13]_tri_out">DATA_IO[13]_tri_out</A> = TRI(<A HREF="#KC1L23">KC1L23</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[13]">DATA_IO[13]</A> = BIDIR(<A HREF="#DATA_IO[13]_tri_out">DATA_IO[13]_tri_out</A>);


<P> --DATA_IO[14] is DATA_IO[14]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[14]_tri_out">DATA_IO[14]_tri_out</A> = TRI(<A HREF="#KC1L24">KC1L24</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[14]">DATA_IO[14]</A> = BIDIR(<A HREF="#DATA_IO[14]_tri_out">DATA_IO[14]_tri_out</A>);


<P> --DATA_IO[15] is DATA_IO[15]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[15]_tri_out">DATA_IO[15]_tri_out</A> = TRI(<A HREF="#KC1L25">KC1L25</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[15]">DATA_IO[15]</A> = BIDIR(<A HREF="#DATA_IO[15]_tri_out">DATA_IO[15]_tri_out</A>);


<P> --A1L36 is DATA_IO[16]~16
<P> --operation mode is bidir

<P><A NAME="A1L36">A1L36</A> = <A HREF="#DATA_IO[16]">DATA_IO[16]</A>;

<P> --DATA_IO[16] is DATA_IO[16]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[16]_tri_out">DATA_IO[16]_tri_out</A> = TRI(<A HREF="#KC1L26">KC1L26</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[16]">DATA_IO[16]</A> = BIDIR(<A HREF="#DATA_IO[16]_tri_out">DATA_IO[16]_tri_out</A>);


<P> --A1L38 is DATA_IO[17]~17
<P> --operation mode is bidir

<P><A NAME="A1L38">A1L38</A> = <A HREF="#DATA_IO[17]">DATA_IO[17]</A>;

<P> --DATA_IO[17] is DATA_IO[17]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[17]_tri_out">DATA_IO[17]_tri_out</A> = TRI(<A HREF="#KC1L27">KC1L27</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[17]">DATA_IO[17]</A> = BIDIR(<A HREF="#DATA_IO[17]_tri_out">DATA_IO[17]_tri_out</A>);


<P> --A1L40 is DATA_IO[18]~18
<P> --operation mode is bidir

<P><A NAME="A1L40">A1L40</A> = <A HREF="#DATA_IO[18]">DATA_IO[18]</A>;

<P> --DATA_IO[18] is DATA_IO[18]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[18]_tri_out">DATA_IO[18]_tri_out</A> = TRI(<A HREF="#KC1L28">KC1L28</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[18]">DATA_IO[18]</A> = BIDIR(<A HREF="#DATA_IO[18]_tri_out">DATA_IO[18]_tri_out</A>);


<P> --A1L42 is DATA_IO[19]~19
<P> --operation mode is bidir

<P><A NAME="A1L42">A1L42</A> = <A HREF="#DATA_IO[19]">DATA_IO[19]</A>;

<P> --DATA_IO[19] is DATA_IO[19]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[19]_tri_out">DATA_IO[19]_tri_out</A> = TRI(<A HREF="#KC1L29">KC1L29</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[19]">DATA_IO[19]</A> = BIDIR(<A HREF="#DATA_IO[19]_tri_out">DATA_IO[19]_tri_out</A>);


<P> --A1L44 is DATA_IO[20]~20
<P> --operation mode is bidir

<P><A NAME="A1L44">A1L44</A> = <A HREF="#DATA_IO[20]">DATA_IO[20]</A>;

<P> --DATA_IO[20] is DATA_IO[20]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[20]_tri_out">DATA_IO[20]_tri_out</A> = TRI(<A HREF="#KC1L30">KC1L30</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[20]">DATA_IO[20]</A> = BIDIR(<A HREF="#DATA_IO[20]_tri_out">DATA_IO[20]_tri_out</A>);


<P> --A1L46 is DATA_IO[21]~21
<P> --operation mode is bidir

<P><A NAME="A1L46">A1L46</A> = <A HREF="#DATA_IO[21]">DATA_IO[21]</A>;

<P> --DATA_IO[21] is DATA_IO[21]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[21]_tri_out">DATA_IO[21]_tri_out</A> = TRI(<A HREF="#KC1L31">KC1L31</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[21]">DATA_IO[21]</A> = BIDIR(<A HREF="#DATA_IO[21]_tri_out">DATA_IO[21]_tri_out</A>);


<P> --A1L48 is DATA_IO[22]~22
<P> --operation mode is bidir

<P><A NAME="A1L48">A1L48</A> = <A HREF="#DATA_IO[22]">DATA_IO[22]</A>;

<P> --DATA_IO[22] is DATA_IO[22]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[22]_tri_out">DATA_IO[22]_tri_out</A> = TRI(<A HREF="#KC1L32">KC1L32</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[22]">DATA_IO[22]</A> = BIDIR(<A HREF="#DATA_IO[22]_tri_out">DATA_IO[22]_tri_out</A>);


<P> --A1L50 is DATA_IO[23]~23
<P> --operation mode is bidir

<P><A NAME="A1L50">A1L50</A> = <A HREF="#DATA_IO[23]">DATA_IO[23]</A>;

<P> --DATA_IO[23] is DATA_IO[23]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[23]_tri_out">DATA_IO[23]_tri_out</A> = TRI(<A HREF="#KC1L33">KC1L33</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[23]">DATA_IO[23]</A> = BIDIR(<A HREF="#DATA_IO[23]_tri_out">DATA_IO[23]_tri_out</A>);


<P> --DATA_IO[24] is DATA_IO[24]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[24]_tri_out">DATA_IO[24]_tri_out</A> = TRI(<A HREF="#KC1L34">KC1L34</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[24]">DATA_IO[24]</A> = BIDIR(<A HREF="#DATA_IO[24]_tri_out">DATA_IO[24]_tri_out</A>);


<P> --A1L53 is DATA_IO[25]~25
<P> --operation mode is bidir

<P><A NAME="A1L53">A1L53</A> = <A HREF="#DATA_IO[25]">DATA_IO[25]</A>;

<P> --DATA_IO[25] is DATA_IO[25]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[25]_tri_out">DATA_IO[25]_tri_out</A> = TRI(<A HREF="#KC1L35">KC1L35</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[25]">DATA_IO[25]</A> = BIDIR(<A HREF="#DATA_IO[25]_tri_out">DATA_IO[25]_tri_out</A>);


<P> --DATA_IO[26] is DATA_IO[26]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[26]_tri_out">DATA_IO[26]_tri_out</A> = TRI(<A HREF="#KC1L36">KC1L36</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[26]">DATA_IO[26]</A> = BIDIR(<A HREF="#DATA_IO[26]_tri_out">DATA_IO[26]_tri_out</A>);


<P> --DATA_IO[27] is DATA_IO[27]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[27]_tri_out">DATA_IO[27]_tri_out</A> = TRI(<A HREF="#KC1L37">KC1L37</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[27]">DATA_IO[27]</A> = BIDIR(<A HREF="#DATA_IO[27]_tri_out">DATA_IO[27]_tri_out</A>);


<P> --DATA_IO[28] is DATA_IO[28]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[28]_tri_out">DATA_IO[28]_tri_out</A> = TRI(<A HREF="#KC1L38">KC1L38</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[28]">DATA_IO[28]</A> = BIDIR(<A HREF="#DATA_IO[28]_tri_out">DATA_IO[28]_tri_out</A>);


<P> --DATA_IO[29] is DATA_IO[29]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[29]_tri_out">DATA_IO[29]_tri_out</A> = TRI(<A HREF="#KC1L39">KC1L39</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[29]">DATA_IO[29]</A> = BIDIR(<A HREF="#DATA_IO[29]_tri_out">DATA_IO[29]_tri_out</A>);


<P> --DATA_IO[30] is DATA_IO[30]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[30]_tri_out">DATA_IO[30]_tri_out</A> = TRI(<A HREF="#KC1L40">KC1L40</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[30]">DATA_IO[30]</A> = BIDIR(<A HREF="#DATA_IO[30]_tri_out">DATA_IO[30]_tri_out</A>);


<P> --DATA_IO[31] is DATA_IO[31]
<P> --operation mode is bidir

<P><A NAME="DATA_IO[31]_tri_out">DATA_IO[31]_tri_out</A> = TRI(<A HREF="#KC1L41">KC1L41</A>, <A HREF="#A1L61">A1L61</A>);
<P><A NAME="DATA_IO[31]">DATA_IO[31]</A> = BIDIR(<A HREF="#DATA_IO[31]_tri_out">DATA_IO[31]_tri_out</A>);


<P> --A1L118 is _BGACK_IO~0
<P> --operation mode is bidir

<P><A NAME="A1L118">A1L118</A> = <A HREF="#_BGACK_IO">_BGACK_IO</A>;

<P> --_BGACK_IO is _BGACK_IO
<P> --operation mode is bidir

<P><A NAME="_BGACK_IO">_BGACK_IO</A> = BIDIR(OPNDRN(!<A HREF="#E1_BGACK">E1_BGACK</A>));


<P> --A1L87 is PD_PORT[0]~0
<P> --operation mode is bidir

<P><A NAME="A1L87">A1L87</A> = <A HREF="#PD_PORT[0]">PD_PORT[0]</A>;

<P> --PD_PORT[0] is PD_PORT[0]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[0]_tri_out">PD_PORT[0]_tri_out</A> = TRI(<A HREF="#LC1L13">LC1L13</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[0]">PD_PORT[0]</A> = BIDIR(<A HREF="#PD_PORT[0]_tri_out">PD_PORT[0]_tri_out</A>);


<P> --A1L89 is PD_PORT[1]~1
<P> --operation mode is bidir

<P><A NAME="A1L89">A1L89</A> = <A HREF="#PD_PORT[1]">PD_PORT[1]</A>;

<P> --PD_PORT[1] is PD_PORT[1]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[1]_tri_out">PD_PORT[1]_tri_out</A> = TRI(<A HREF="#LC1L17">LC1L17</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[1]">PD_PORT[1]</A> = BIDIR(<A HREF="#PD_PORT[1]_tri_out">PD_PORT[1]_tri_out</A>);


<P> --A1L91 is PD_PORT[2]~2
<P> --operation mode is bidir

<P><A NAME="A1L91">A1L91</A> = <A HREF="#PD_PORT[2]">PD_PORT[2]</A>;

<P> --PD_PORT[2] is PD_PORT[2]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[2]_tri_out">PD_PORT[2]_tri_out</A> = TRI(<A HREF="#LC1L21">LC1L21</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[2]">PD_PORT[2]</A> = BIDIR(<A HREF="#PD_PORT[2]_tri_out">PD_PORT[2]_tri_out</A>);


<P> --A1L93 is PD_PORT[3]~3
<P> --operation mode is bidir

<P><A NAME="A1L93">A1L93</A> = <A HREF="#PD_PORT[3]">PD_PORT[3]</A>;

<P> --PD_PORT[3] is PD_PORT[3]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[3]_tri_out">PD_PORT[3]_tri_out</A> = TRI(<A HREF="#LC1L25">LC1L25</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[3]">PD_PORT[3]</A> = BIDIR(<A HREF="#PD_PORT[3]_tri_out">PD_PORT[3]_tri_out</A>);


<P> --A1L95 is PD_PORT[4]~4
<P> --operation mode is bidir

<P><A NAME="A1L95">A1L95</A> = <A HREF="#PD_PORT[4]">PD_PORT[4]</A>;

<P> --PD_PORT[4] is PD_PORT[4]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[4]_tri_out">PD_PORT[4]_tri_out</A> = TRI(<A HREF="#LC1L29">LC1L29</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[4]">PD_PORT[4]</A> = BIDIR(<A HREF="#PD_PORT[4]_tri_out">PD_PORT[4]_tri_out</A>);


<P> --A1L97 is PD_PORT[5]~5
<P> --operation mode is bidir

<P><A NAME="A1L97">A1L97</A> = <A HREF="#PD_PORT[5]">PD_PORT[5]</A>;

<P> --PD_PORT[5] is PD_PORT[5]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[5]_tri_out">PD_PORT[5]_tri_out</A> = TRI(<A HREF="#LC1L33">LC1L33</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[5]">PD_PORT[5]</A> = BIDIR(<A HREF="#PD_PORT[5]_tri_out">PD_PORT[5]_tri_out</A>);


<P> --A1L99 is PD_PORT[6]~6
<P> --operation mode is bidir

<P><A NAME="A1L99">A1L99</A> = <A HREF="#PD_PORT[6]">PD_PORT[6]</A>;

<P> --PD_PORT[6] is PD_PORT[6]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[6]_tri_out">PD_PORT[6]_tri_out</A> = TRI(<A HREF="#LC1L37">LC1L37</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[6]">PD_PORT[6]</A> = BIDIR(<A HREF="#PD_PORT[6]_tri_out">PD_PORT[6]_tri_out</A>);


<P> --A1L101 is PD_PORT[7]~7
<P> --operation mode is bidir

<P><A NAME="A1L101">A1L101</A> = <A HREF="#PD_PORT[7]">PD_PORT[7]</A>;

<P> --PD_PORT[7] is PD_PORT[7]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[7]_tri_out">PD_PORT[7]_tri_out</A> = TRI(<A HREF="#LC1L41">LC1L41</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[7]">PD_PORT[7]</A> = BIDIR(<A HREF="#PD_PORT[7]_tri_out">PD_PORT[7]_tri_out</A>);


<P> --PD_PORT[8] is PD_PORT[8]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[8]_tri_out">PD_PORT[8]_tri_out</A> = TRI(<A HREF="#LC1L13">LC1L13</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[8]">PD_PORT[8]</A> = BIDIR(<A HREF="#PD_PORT[8]_tri_out">PD_PORT[8]_tri_out</A>);


<P> --PD_PORT[9] is PD_PORT[9]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[9]_tri_out">PD_PORT[9]_tri_out</A> = TRI(<A HREF="#LC1L17">LC1L17</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[9]">PD_PORT[9]</A> = BIDIR(<A HREF="#PD_PORT[9]_tri_out">PD_PORT[9]_tri_out</A>);


<P> --PD_PORT[10] is PD_PORT[10]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[10]_tri_out">PD_PORT[10]_tri_out</A> = TRI(<A HREF="#LC1L21">LC1L21</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[10]">PD_PORT[10]</A> = BIDIR(<A HREF="#PD_PORT[10]_tri_out">PD_PORT[10]_tri_out</A>);


<P> --PD_PORT[11] is PD_PORT[11]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[11]_tri_out">PD_PORT[11]_tri_out</A> = TRI(<A HREF="#LC1L25">LC1L25</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[11]">PD_PORT[11]</A> = BIDIR(<A HREF="#PD_PORT[11]_tri_out">PD_PORT[11]_tri_out</A>);


<P> --PD_PORT[12] is PD_PORT[12]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[12]_tri_out">PD_PORT[12]_tri_out</A> = TRI(<A HREF="#LC1L29">LC1L29</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[12]">PD_PORT[12]</A> = BIDIR(<A HREF="#PD_PORT[12]_tri_out">PD_PORT[12]_tri_out</A>);


<P> --PD_PORT[13] is PD_PORT[13]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[13]_tri_out">PD_PORT[13]_tri_out</A> = TRI(<A HREF="#LC1L33">LC1L33</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[13]">PD_PORT[13]</A> = BIDIR(<A HREF="#PD_PORT[13]_tri_out">PD_PORT[13]_tri_out</A>);


<P> --PD_PORT[14] is PD_PORT[14]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[14]_tri_out">PD_PORT[14]_tri_out</A> = TRI(<A HREF="#LC1L37">LC1L37</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[14]">PD_PORT[14]</A> = BIDIR(<A HREF="#PD_PORT[14]_tri_out">PD_PORT[14]_tri_out</A>);


<P> --PD_PORT[15] is PD_PORT[15]
<P> --operation mode is bidir

<P><A NAME="PD_PORT[15]_tri_out">PD_PORT[15]_tri_out</A> = TRI(<A HREF="#LC1L41">LC1L41</A>, <A HREF="#A1L129">A1L129</A>);
<P><A NAME="PD_PORT[15]">PD_PORT[15]</A> = BIDIR(<A HREF="#PD_PORT[15]_tri_out">PD_PORT[15]_tri_out</A>);


<P> --E1L2 is CPU_SM:u_CPU_SM|BGACK~_wirecell
<P><A NAME="E1L2">E1L2</A> = !<A HREF="#E1_BGACK">E1_BGACK</A>;


<P> --A1L70 is DSACK_O~0_wirecell
<P><A NAME="A1L70">A1L70</A> = !<A HREF="#A1L69">A1L69</A>;


<P> --A1L84 is PDATA_OE_~0_wirecell
<P><A NAME="A1L84">A1L84</A> = !<A HREF="#A1L83">A1L83</A>;


<P> --G1L7 is SCSI_SM:u_SCSI_SM|DACK_o~_wirecell
<P><A NAME="G1L7">G1L7</A> = !<A HREF="#G1_DACK_o">G1_DACK_o</A>;


<P> --G1L23 is SCSI_SM:u_SCSI_SM|SCSI_CS_o~_wirecell
<P><A NAME="G1L23">G1L23</A> = !<A HREF="#G1_SCSI_CS_o">G1_SCSI_CS_o</A>;


<P> --A1L127 is _IOR~0_wirecell
<P><A NAME="A1L127">A1L127</A> = !<A HREF="#A1L126">A1L126</A>;


<P> --A1L130 is _IOW~0_wirecell
<P><A NAME="A1L130">A1L130</A> = !<A HREF="#A1L129">A1L129</A>;


</body></html>
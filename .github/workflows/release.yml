################################################################################
# SPDX-License-Identifier: CC0-1.0
# SPDX-FileType: OTHER
# SPDX-FileCopyrightText: (c) 2021-2022, The Raetro authors and contributors
################################################################################
name: Create New Core Release
################################################################################
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Trigger only when tag matches v*, i.e. v1.0, v21.12.31, v211231
################################################################################
jobs:
  synthesis:
    runs-on: ubuntu-latest
    container: ghcr.io/raetro/quartus:21.1 # Use GitHub Container Registry
    #container: raetro/quartus:17.1        # Use DockerHub
    ############################################################################
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    ############################################################################
    steps:
      ##########################################################################
      ## 1 - Checkout repository
      ##########################################################################
      - name: Checkout repository
        uses: actions/checkout@v4
      ##########################################################################
      ## 2 - RTL synthesis
      ##########################################################################
      - name: Run compilation flow
        run: quartus_sh --flow compile Quartus/RESDMAC.qpf
      ##########################################################################
      ## 3 - Get current version for tagging binary
      ##########################################################################
      - name: Get the version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      ##########################################################################
      ## 4 - Upload artifacts
      ##########################################################################
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: RESDMAC_${{ steps.version.outputs.version }}.zip
          path: Quartus/output_files/
          retention-days: 14
      ##########################################################################
      ## 5 - Create tag with version and SHA256 checksum
      ##########################################################################
      - name: Copy, tag with version and create SHA256 checksum
        run: |
          mkdir -p releases
          cp Quartus/output_files/RESDMAC.pof releases/RESDMAC_${{ steps.version.outputs.version }}.pof
          ( cd Quartus/output_files && sha256sum RESDMAC.pof > ../../releases/RESDMAC_${{ steps.version.outputs.version }}.pof.sha256 )
      ##########################################################################
      ## 6 - Create a new GitHub release and upload the distribution artifacts
      ##########################################################################
      - name: Create a new GitHub release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            releases/RESDMAC_${{ steps.version.outputs.version }}.pof
            releases/RESDMAC_${{ steps.version.outputs.version }}.pof.sha256
      ##########################################################################
      ## 7 - Don't ever commit binary files to Git! But if this is what you want to do.
      ##########################################################################
      #- name: Commit Binary to Repository (aka. the MiST(er) way)
      #  run: |
      #    git fetch
      #    git checkout -b master
      #    git config user.name github-actions
      #    git config user.email github-actions@github.com
      #    git add releases/my_project_${{ steps.version.outputs.version }}.rbf
      #    git commit -m "Release ${{ steps.version.outputs.version }}"
      #    git push origin master